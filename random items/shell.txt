    function setGlobalIgloo(mc) {
        IGLOO_HOLDER = mc;
    }
    function getGlobalIgloo() {
        return(IGLOO_HOLDER);
    }
    function setWebServiceManager(service) {
        WEB_CRUMBS_SERVICE = service;
    }
    function getWebServiceManager() {
        return(WEB_CRUMBS_SERVICE);
    }
    function setWebServiceReceiver(service) {
        WEB_SERVICE_RECEIVER = service;
    }
    function getWebServiceReceiver() {
        return(WEB_SERVICE_RECEIVER);
    }
    function setCacheVersion(cacheVersion) {
        _cacheVersion = cacheVersion;
    }
    function setIsFriendsConnected(status, sid) {
        _friendsSid = sid;
        _friendsStatus = status;
    }
    function isFriendsConnected() {
        return(_friendsStatus);
    }
    function getFriendsSid() {
        return(_friendsSid);
    }
    function getIsMapShowGames() {
        return(MAP_SHOW_GAMES);
    }
    function setIsMapShowGames(_status) {
        MAP_SHOW_GAMES = _status;
    }
    function getInteractionPoints(_type) {
        var _local_1;
        switch (_type) {
            case IGLOO_INTERACTION : 
                _local_1 = IGLOO_INTERACTION_POINTS;
                break;
            case POSTCARD_INTERACTION : 
                _local_1 = POSTCARD_INTERACTION_POINTS;
                break;
            case STAMPS_INTERACTION : 
                _local_1 = STAMPS_INTERACTION_POINTS;
                break;
            case JUMP_INTERACTION : 
                _local_1 = JUMP_INTERACTION_POINTS;
                break;
            default : 
                break;
        }
        return(_local_1);
    }
    function setIsGameQueWidgetOpen(_status) {
        isGameQueWidgetOpen = _status;
    }
    function getIsGameQueWidgetOpen() {
        return(isGameQueWidgetOpen);
    }
    function setJoinGameFromIgloo(status, room_id) {
        joinGameFromIglooStatus = status;
        if (SHELL.dependencyHolder.engine.isInAnIgloo()) {
            idOfIglooRoomToJoin = getIglooPlayerID();
        } else {
            idOfIglooRoomToJoin = room_id;
        }
    }
    function getDimgBiService() {
        return(DIMG_BI_SERVICE);
    }
    function getRawBiService() {
        return(RAW_BI_SERVICE);
    }
    function isActiveFeature(feature) {
        var _local_1 = 0;
        while (_local_1 < activeFeaturesArray.length) {
            if (activeFeaturesArray[_local_1] == feature) {
                return(true);
            }
            _local_1++;
        }
        return(false);
    }
    function getDomainName() {
        var _local_2 = this._url.toLowerCase();
        var _local_4 = _local_2.split("/");
        var _local_3 = _local_4[2].split(".");
        return(_local_3);
    }
    function startMyPuffleBrains() {
        puffleManager.startRoomPuffleBrains();
    }
    function stopMyPuffleBrains() {
        puffleManager.stopRoomPuffleBrains();
    }
    function sendPuffleMove(id, xpos, ypos) {
        puffleManager.sendPuffleMove(id, xpos, ypos);
    }
    function sendPuffleInteraction(success, id, interactionType, xpos, ypos) {
        puffleManager.sendPuffleInteraction(success, id, interactionType, xpos, ypos);
    }
    function setPuffleInteractionCompleteById(id) {
        puffleManager.setPuffleInteractionCompleteById(id);
    }
    function sendStartPuffleWalk(id, showAdoptionAnimation) {
        puffleManager.sendStartPuffleWalk(id, showAdoptionAnimation);
    }
    function playPufflePlayAnim(id, playTypeID) {
        puffleManager.playPufflePlayAnim(id, playTypeID);
    }
    function playPuffleGumAnim(id) {
        puffleManager.playPuffleGumAnim(id);
    }
    function sendSwapPuffle(id) {
        puffleManager.sendSwapPuffle(id);
    }
    function sendPuffleRest(id) {
        puffleManager.requestPuffleRest(id);
    }
    function getPuffleObjectById(id) {
        return(puffleManager.getRoomPuffleById(id));
    }
    function getMyPuffleById(id) {
        return(puffleManager.getMyPuffleById(id));
    }
    function getMyPuffleCount() {
        return(puffleManager.myPuffleCount);
    }
    function disablePuffleInteractionByID(id) {
        puffleManager.disablePuffleInteractionByID(id);
    }
    function enablePuffleInteractionByID(id) {
        puffleManager.enablePuffleInteractionByID(id);
    }
    function setPuffleCrumbs(crumbObj) {
        for (var _local_2 in crumbObj) {
            crumbObj[_local_2].colour = crumbObj[_local_2]["color"];
        }
        puffleCrumbs = crumbObj;
    }
    function getPuffleCrumbs() {
        return(puffleCrumbs);
    }
    function getPuffleCrumbById(id) {
        var _local_1;
        for (var _local_3 in puffleCrumbs) {
            if (puffleCrumbs[_local_3].puffle_id != undefined) {
                if (puffleCrumbs[_local_3].puffle_id == id) {
                    _local_1 = puffleCrumbs[_local_3];
                }
            }
        }
        return(_local_1);
    }
    function getMyPuffles() {
        var _local_2 = puffleManager.myPuffles;
        var _local_3 = new Array();
        var _local_1 = 0;
        while (_local_1 < _local_2.length) {
            if (((_local_2[_local_1].typeID == 10) || (_local_2[_local_1].typeID == 11)) || (_local_2[_local_1].isWildPuffle())) {
            } else {
                _local_3.push(_local_2[_local_1]);
            }
            _local_1++;
        }
        return(_local_3);
    }
    function isItemAPuffle(itemID) {
        return(puffleManager.isItemAPuffle(itemID));
    }
    function setPuffleHatCollection(puffleHatData) {
        puffleHatCollection = com.clubpenguin.shell.PuffleHatCollection.getInstance();
        puffleHatCollection.init(puffleHatData);
    }
    function getPuffleHatCollection() {
        return(puffleHatCollection);
    }
    function parseEnvironment() {
        var _local_4 = this._url.toLowerCase().split("://");
        var _local_3 = _local_4[0];
        var _local_5;
        var _local_2;
        _local_5 = _local_4[1].split(".");
        _local_2 = _local_5[0];
        if ((_local_3 == PROTOCOL_HTTP) || (_local_3 == PROTOCOL_HTTPS)) {
            switch (_local_2) {
                case "sandbox01" : 
                    setEnvironment(ENV_SANDBOX_01);
                    break;
                case "sandbox02" : 
                    setEnvironment(ENV_SANDBOX_02);
                    break;
                case "sandbox03" : 
                    setEnvironment(ENV_SANDBOX_03);
                    break;
                case "sandbox04" : 
                    setEnvironment(ENV_SANDBOX_04);
                    break;
                case "sandbox05" : 
                    setEnvironment(ENV_SANDBOX_05);
                    break;
                case "sandbox06" : 
                    setEnvironment(ENV_SANDBOX_06);
                    break;
                case "sandbox07" : 
                    setEnvironment(ENV_SANDBOX_07);
                    break;
                case "sandbox08" : 
                    setEnvironment(ENV_SANDBOX_08);
                    break;
                case "sandbox09" : 
                    setEnvironment(ENV_SANDBOX_09);
                    break;
                case "gameint1" : 
                    setEnvironment(ENV_GAME_INT_1);
                    break;
                case "gameqa2" : 
                    setEnvironment(ENV_GAME_QA_2);
                    break;
                case "qa01" : 
                    setEnvironment(ENV_QA_01);
                    break;
                case "qa02" : 
                    setEnvironment(ENV_QA_02);
                    break;
                case "qa03" : 
                    setEnvironment(ENV_QA_03);
                    break;
                case "qa04" : 
                    setEnvironment(ENV_QA_04);
                    break;
                case "qa20" : 
                    setEnvironment(ENV_QA_20);
                    break;
                case "qa21" : 
                    setEnvironment(ENV_QA_21);
                    break;
                case "qa22" : 
                    setEnvironment(ENV_QA_22);
                    break;
                case "qa23" : 
                    setEnvironment(ENV_QA_23);
                    break;
                case "qa24" : 
                    setEnvironment(ENV_QA_24);
                    break;
                case "qa25" : 
                    setEnvironment(ENV_QA_25);
                    break;
                case "qa26" : 
                    setEnvironment(ENV_QA_26);
                    break;
                case "qa27" : 
                    setEnvironment(ENV_QA_27);
                    break;
                case "qa28" : 
                    setEnvironment(ENV_QA_28);
                    break;
                case "bld01" : 
                    setEnvironment(ENV_QA_28);
                    break;
                case "stage" : 
                    setEnvironment(ENV_STAGE);
                    break;
                case "stage2" : 
                    setEnvironment(ENV_STAGE2);
                    break;
                case "hotfix" : 
                    setEnvironment(ENV_HOTFIX);
                    break;
                case "sec01" : 
                    setEnvironment(ENV_SEC_01);
                    break;
            }
            if (_local_2.indexOf(ENV_DEV) >= 0) {
                setEnvironment(ENV_DEV);
            }
        }
    }
    function getEnvironment() {
        return(current_environment);
    }
    function setEnvironment(env) {
        current_environment = env;
    }
    function setBootPaths(bootData) {
        basePath = bootData.getBasePath();
        baseConfigPath = bootData.getBaseConfigPath();
        globalContentPath = bootData.getGlobalContentPath();
        localContentPath = bootData.getLocalContentPath();
        clientPath = bootData.getClientPath();
        gamesPath = bootData.getGamesPath();
        webServiceContentPath = bootData.getWebServiceContentPath();
        phraseChatPath = bootData.getPhraseChatPath();
    }
    function getGlobalContentPath() {
        return(globalContentPath);
    }
    function getLocalContentPath() {
        return(localContentPath);
    }
    function getWebServiceContentPath() {
        return(webServiceContentPath);
    }
    function getPhraseChatPath() {
        return(phraseChatPath);
    }
    function getGamesPath() {
        return(gamesPath);
    }
    function getGameContentPath() {
        return(com.clubpenguin.util.StringUtils.removeTrailingSlash(getGamesPath()));
    }
    function setAffilateId(id) {
        affiliateID = id || (DEFAULT_AFFILIATE_ID);
    }
    function getAffilateId() {
        return(affiliateID);
    }
    function setPromotionID(id) {
        promotionID = id || (DEFAULT_PROMOTION_ID);
    }
    function getPromotionID() {
        return(promotionID);
    }
    function getLocalPathsObject() {
        return(local_paths_object);
    }
    function setLocalPathsObject(obj) {
        if (obj != undefined) {
            local_paths_object = obj;
            com.clubpenguin.util.URLUtils.resetCacheOnURLsInObject(local_paths_object);
        }
    }
    function addLocalPath(keyword, path) {
        if (isValidString(keyword)) {
            if (isValidString(path)) {
                var _local_3 = getLocalPathsObject();
                _local_3[keyword] = path;
            } else {
                $e("[shell] addLocalPath() -> Invalid String passed as path! path: " + path);
            }
        } else {
            $e("[shell] addLocalPath() -> Invalid String passed as keyword! keyword: " + keyword);
        }
    }
    function addGlobalPath(keyword, path) {
        if (isValidString(keyword)) {
            if (isValidString(path)) {
                var _local_3 = getGlobalPathsObject();
                _local_3[keyword] = getGlobalContentPath() + path;
            } else {
                $e("[shell] addLocalPath() -> Invalid String passed as path! path: " + path);
            }
        } else {
            $e("[shell] addLocalPath() -> Invalid String passed as keyword! keyword: " + keyword);
        }
    }
    function getGlobalPathsObject() {
        return(global_paths_object);
    }
    function setGlobalPathsObject(paths) {
        for (var _local_2 in paths) {
            paths[_local_2] = getGlobalContentPath() + paths[_local_2];
        }
        global_paths_object = paths;
        com.clubpenguin.util.URLUtils.resetCacheOnURLsInObject(global_paths_object);
    }
    function setLinkPathsObject(obj) {
        if (obj != undefined) {
            link_paths_object = obj;
            com.clubpenguin.util.URLUtils.resetCacheOnURLsInObject(link_paths_object);
        }
    }
    function getLinkPathsObject() {
        return(link_paths_object);
    }
    function getPath(id) {
        var _local_1;
        _local_1 = getLocalPath(id);
        if (_local_1) {
            return(_local_1);
        }
        _local_1 = getLinkPath(id);
        if (_local_1) {
            return(_local_1);
        }
        _local_1 = getGlobalPath(id);
        if (_local_1) {
            return(_local_1);
        }
        $e(("[shell] getPath() -> \"" + id) + "\" does not exist!");
        return(undefined);
    }
    function getLocalPath(id) {
        var _local_1 = getLocalPathsObject();
        if (_local_1[id] != undefined) {
            return(getLocalContentPath() + _local_1[id]);
        }
        return(null);
    }
    function getLinkPath(id) {
        var _local_1 = getLinkPathsObject();
        if (_local_1[id] != undefined) {
            return(_local_1[id]);
        }
        return(null);
    }
    function getGlobalPath(id) {
        var _local_1 = getGlobalPathsObject();
        if (_local_1[id] != undefined) {
            return(_local_1[id]);
        }
        return(null);
    }
    function getBasePath() {
        return(basePath);
    }
    function getBaseConfigPath() {
        return(baseConfigPath);
    }
    function getClientPath() {
        return(clientPath);
    }
    function getLocalizedFolder() {
        return(localized_folder);
    }
    function setLocalizedFolder(folder) {
        localized_folder = folder;
    }
    function getRootPath() {
        return(getBasePath());
    }
    function getStartScreenXMLPath() {
        return(getLocalContentPath() + START_SCREEN_XML);
    }
    function getStartScreenIconsPath() {
        return(getLocalContentPath() + START_SCREEN_ICONS);
    }
    function getStartScreenPopupsPath() {
        return(getLocalContentPath() + START_SCREEN_POPUPS);
    }
    function getStartScreenBackgroundsPath() {
        return(getLocalContentPath() + START_SCREEN_BACKGROUNDS);
    }
    function getLoadingAnimationPaths() {
        var _local_1;
        var _local_4 = 1;
        var _local_3 = [];
        var _local_2 = getGlobalPathsObject();
        for (var _local_5 in _local_2) {
        }
        while (true) {
            _local_1 = getGlobalPath("loading_animation" + (_local_4++));
            if (_local_1 == null) {
                break;
            }
            _local_3.push(_local_1);
        }
        return(_local_3);
    }
    function getLanguageObject() {
        return(language_obj);
    }
    function setLanguageObject(obj) {
        if (obj != undefined) {
            language_obj = obj;
        }
    }
    function setJokeArray(arr) {
        joke_arr = arr;
    }
    function getJokeArray() {
        return(joke_arr);
    }
    function getJokeById(id) {
        var _local_2 = getJokeArray();
        var _local_1 = _local_2[id];
        if (isValidString(_local_1)) {
            return(_local_1);
        }
        return(undefined);
    }
    function getRandomJokeId() {
        return(randBetween(0, getJokeArray().length - 1));
    }
    function setSafeMessageArray(arr) {
        safe_message_arr = arr;
    }
    function getSafeMessageArray() {
        return(safe_message_arr);
    }
    function setTreveresdSafeMessageObject(obj) {
        treveresed_safe_message_obj = obj;
    }
    function getTreveresdSafeMessageObject() {
        return(treveresed_safe_message_obj);
    }
    function getSafeMessageById(id) {
        var _local_2;
        var _local_1 = getTreveresdSafeMessageObject();
        if (_local_1[id].name != undefined) {
            _local_2 = _local_1[id].name;
        }
        if (_local_1[id].message != undefined) {
            _local_2 = _local_1[id].message;
        }
        if (isValidString(_local_2)) {
            return(_local_2);
        }
        return(undefined);
    }
    function setMascotMessageArray(arr) {
        mascot_message_arr = arr;
    }
    function getMascotMessageArray() {
        return(mascot_message_arr);
    }
    function getMascotMessageById(id) {
        var _local_10 = getMascotMessageArray();
        var _local_3;
        var _local_6 = 0;
        var _local_11 = _local_10.length;
        var _local_8 = 0;
        while (_local_8 < _local_11) {
            var _local_5 = _local_10[_local_8].mascotScript;
            var _local_9 = _local_5.length;
            var _local_1 = 0;
            while (_local_1 < _local_9) {
                var _local_4 = _local_6;
                var _local_2 = _local_5[_local_1].script;
                _local_6 = _local_6 + _local_2.length;
                if (_local_6 > id) {
                    if (_local_5[_local_1].sharedScript) {
                        _local_3 = _local_2[id - _local_4].message;
                    } else {
                        _local_3 = _local_2[id - _local_4];
                    }
                    if (isValidString(_local_3)) {
                        return(_local_3);
                    }
                }
                _local_1++;
            }
            _local_8++;
        }
        return(undefined);
    }
    function setLineMessageArray(arr) {
        line_message_arr = arr;
    }
    function getLineMessageArray() {
        return(line_message_arr);
    }
    function getLineMessageById(id) {
        var _local_2 = getLineMessageArray();
        var _local_1 = _local_2[id].message;
        if (isValidString(_local_1)) {
            return(_local_1);
        }
        return(undefined);
    }
    function setQuickMessageArray(arr) {
        quick_message_arr = arr;
    }
    function getQuickMessageArray() {
        return(quick_message_arr);
    }
    function getQuickMessageById(id) {
        var _local_2 = getQuickMessageArray();
        var _local_1 = _local_2[id];
        if (isValidString(_local_1)) {
            return(_local_1);
        }
        return(undefined);
    }
    function getTourGuideMessageByRoomName(roomName) {
        var _local_2 = getTourGuideMessageArray();
        var _local_1 = _local_2[roomName];
        if (isValidString(_local_1)) {
            return(_local_1);
        }
        return(undefined);
    }
    function setTourGuideMessageArray(arr) {
        tour_guide_message_arr = arr;
    }
    function getTourGuideMessageArray() {
        return(tour_guide_message_arr);
    }
    function getLocalizedString(str) {
        var _local_1 = getLanguageObject()[str];
        if (isValidString(_local_1)) {
            return(_local_1);
        }
        $e("getLocalizedString() -> There is no localized string for: " + str);
        return(("**" + str) + "**");
    }
    function replace(what, _with, input_string) {
        return(input_string.split(what).join(_with));
    }
    function replace_m(search, replacements) {
        var _local_3 = replacements.length;
        var _local_1 = 0;
        while (_local_1 < _local_3) {
            search = search.split("%" + _local_1).join(replacements[_local_1]);
            _local_1++;
        }
        return(search);
    }
    function setLanguageAbbreviation(abbr) {
        var _local_1;
        switch (abbr) {
            case EN_ABBR : 
                _local_1 = EN_ABBR;
                break;
            case PT_ABBR : 
                _local_1 = PT_ABBR;
                break;
            case FR_ABBR : 
                _local_1 = FR_ABBR;
                break;
            case ES_ABBR : 
                _local_1 = ES_ABBR;
                break;
            case DE_ABBR : 
                _local_1 = DE_ABBR;
                break;
            case RU_ABBR : 
                _local_1 = RU_ABBR;
                break;
            default : 
                _local_1 = EN_ABBR;
        }
        currentLanguageAbbreviation = _local_1.toLowerCase();
        currentLanguageBitmask = getLanguageBitmaskByAbbreviation(currentLanguageAbbreviation);
        currentLanguageFrame = getLocalizedFrameByAbbreviation(currentLanguageAbbreviation);
    }
    function getLanguageBitmaskByAbbreviation(abbr) {
        switch (abbr) {
            case EN_ABBR : 
                return(EN_BITMASK);
            case PT_ABBR : 
                return(PT_BITMASK);
            case FR_ABBR : 
                return(FR_BITMASK);
            case ES_ABBR : 
                return(ES_BITMASK);
            case DE_ABBR : 
                return(DE_BITMASK);
            case RU_ABBR : 
                return(RU_BITMASK);
        }
        return(EN_BITMASK);
    }
    function getLocalizedFrame() {
        return(currentLanguageFrame);
    }
    function getLocalizedFrameLabel() {
        switch (currentLanguageFrame) {
            case EN_FRAME : 
                return(EN_LABEL);
            case PT_FRAME : 
                return(PT_LABEL);
            case FR_FRAME : 
                return(FR_LABEL);
            case ES_FRAME : 
                return(ES_LABEL);
            case DE_FRAME : 
                return(DE_LABEL);
            case RU_FRAME : 
                return(RU_LABEL);
        }
        return("Error");
    }
    function getLocalizedFrameByAbbreviation(abbr) {
        switch (abbr) {
            case EN_ABBR : 
                return(EN_FRAME);
            case PT_ABBR : 
                return(PT_FRAME);
            case FR_ABBR : 
                return(FR_FRAME);
            case ES_ABBR : 
                return(ES_FRAME);
            case DE_ABBR : 
                return(DE_FRAME);
            case RU_ABBR : 
                return(RU_FRAME);
        }
        return(EN_FRAME);
    }
    function getCurrentLanguageString() {
        switch (currentLanguageFrame) {
            case 1 : 
                return("en_US");
            case 2 : 
                return("pt_BR");
            case 3 : 
                return("fr_FR");
            case 4 : 
                return("es_LA");
            case 5 : 
                return("de_DE");
            case 6 : 
                return("ru_RU");
        }
    }
    function getLanguageAbbreviation() {
        return(currentLanguageAbbreviation);
    }
    function getLanguageBitmask() {
        return(currentLanguageBitmask);
    }
    function e_default(obj) {
        $d("[UNDEFINED ERROR] e_default() -> There has been an undefined error!");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(DEFAULT_ERROR);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(DEFAULT_ERROR_TYPE, DEFAULT_ERROR);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            getURL (getPath("client_web"), "_self");
        };
        hideLoading();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_noConnection(obj) {
        $d(("[" + obj.type) + "] e_noConnection() -> No connection");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(NO_SOCKET_CONNECTION);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, NO_SOCKET_CONNECTION);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            getURL (getPath("cant_connect_web"), "_self");
        };
        hideLoading();
        com.clubpenguin.login.LoginFloodManager.setLoginAttempt();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_chromeMacLoginError(obj) {
        $d(("[" + obj.type) + "] e_chromeMacLoginError() -> Chrome Mac Login error");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(CHROME_MAC_LOGIN_ERROR);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, CHROME_MAC_LOGIN_ERROR, "chrome_mac_login_issue");
        AIRTOWER.disconnect();
        var _local_2 = function () {
            getURL (getPath("cant_connect_web"), "_self");
        };
        hideLoading();
        com.clubpenguin.login.LoginFloodManager.setLoginAttempt();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_connectionNotAllowed(obj) {
        $d(("[" + obj.type) + "] e_noConnection() -> No connection");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(CONNECTION_NOT_ALLOWED);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, CONNECTION_NOT_ALLOWED);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            getURL (getPath("cant_connect_web"), "_self");
        };
        hideLoading();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_connectionLost(obj) {
        var _local_2 = ((obj.error_code != undefined) ? (obj.error_code) : (CONNECTION_LOST));
        sendShowError(obj, _local_2);
        AIRTOWER.disconnect();
    }
    function e_timeOut(obj) {
        sendShowError(obj, TIME_OUT);
        AIRTOWER.disconnect();
    }
    function e_connectionAttemptTimedOut(obj) {
        $d(("[" + obj.type) + "] e_connectionAttemptTimedOut() -> Client has timed out!");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(CONNECTION_TIMEOUT);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, CONNECTION_TIMEOUT);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            getURL (getPath("client_web"), "_self");
        };
        hideLoading();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_multiConnections(obj) {
        sendShowError(obj, MULTI_CONNECTIONS);
        AIRTOWER.disconnect();
    }
    function e_disconnect(obj) {
        $d(("[" + obj.type) + "] e_disconnect() -> Socket Timeout");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(DISCONNECT);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, DISCONNECT);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            getURL (getPath("client_web"), "_self");
        };
        hideLoading();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_kick(obj) {
        $d(("[" + obj.type) + "] e_kick() -> You have been kicked");
        var _local_3 = window_size[WINDOW_EXTRA_LARGE];
        var _local_1 = getLocalizedErrorStringById(KICK);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, KICK);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            getURL (getPath("client_web"), "_self");
        };
        hideLoading();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_nameNotFound(obj) {
        if (_localLoginServerData.autoLogin) {
            doManualLogin();
        } else {
            $d(("[" + obj.type) + "] e_nameNotFound() -> Name not found");
            var _local_3 = window_size[WINDOW_SMALL];
            var _local_1 = getLocalizedErrorStringById(NAME_NOT_FOUND);
            var _local_4 = getLocalizedString("Okay");
            var _local_5 = buildErrorCodeString(obj.type, NAME_NOT_FOUND);
            AIRTOWER.disconnect();
            var _local_2 = function () {
                LOGIN_HOLDER.gotoNewPlayer();
                Selection.setFocus("LOGIN_HOLDER.NP_USERNAME_INPUT");
                closeErrorPrompt();
            };
            hideLoading();
            _trackerAS2.sendTrackLoginError();
            showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
        }
    }
    function e_passwordWrong(obj) {
        if (_localLoginServerData.autoLogin) {
            doManualLogin();
        } else {
            $d(("[" + obj.type) + "] e_passwordWrong() -> Password wrong");
            var _local_3 = window_size[WINDOW_SMALL];
            var _local_1 = getLocalizedErrorStringById(PASSWORD_WRONG);
            var _local_4 = getLocalizedString("Okay");
            var _local_5 = buildErrorCodeString(obj.type, PASSWORD_WRONG);
            AIRTOWER.disconnect();
            var _local_2 = function () {
                Selection.setFocus("LOGIN_HOLDER.NP_PASSWORD_INPUT");
                closeErrorPrompt();
            };
            hideLoading();
            _trackerAS2.sendTrackLoginError();
            showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
        }
    }
    function e_serverFull(obj) {
        $d(("[" + obj.type) + "] e_serverFull() -> Password wrong");
        var _local_4 = window_size[WINDOW_SMALL];
        var _local_2 = getLocalizedErrorStringById(SERVER_FULL);
        var _local_5 = getLocalizedString("Okay");
        var _local_6 = buildErrorCodeString(obj.type, SERVER_FULL);
        if ((obj.type == SOCKET_ERROR) || (obj.type == DEFAULT_ERROR_TYPE)) {
            var _local_3 = function () {
                getURL (getPath("client_web"), "_self");
            };
            showLoading();
            AIRTOWER.disconnect();
        } else {
            var _local_3 = function () {
                LOGIN_HOLDER.gotoWorldSelection();
                closeErrorPrompt();
            };
        }
        hideLoading();
        showErrorPrompt(_local_4, _local_2, _local_5, _local_3, _local_6);
    }
    function e_passwordRequired(obj) {
        $d(("[" + obj.type) + "] e_passwordRequired() -> Password required");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(PASSWORD_REQUIRED);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, PASSWORD_REQUIRED);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            Selection.setFocus("LOGIN_HOLDER.NP_PASSWORD_INPUT");
            closeErrorPrompt();
        };
        hideLoading();
        _trackerAS2.sendTrackLoginError();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_passwordRequiredRedemption(obj) {
        $d(("[" + obj.type) + "] e_passwordRequiredRedemption() -> Password required for redemption");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(PASSWORD_REQUIRED);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, PASSWORD_REQUIRED_REDEMPTION);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            closeErrorPrompt();
        };
        hideLoading();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_passwordShort(obj) {
        $d(("[" + obj.type) + "] e_passwordShort() -> Password too short");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(PASSWORD_SHORT);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, PASSWORD_SHORT);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            Selection.setFocus("LOGIN_HOLDER.NP_PASSWORD_INPUT");
            closeErrorPrompt();
        };
        hideLoading();
        _trackerAS2.sendTrackLoginError();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_passwordShortRedemption(obj) {
        $d(("[" + obj.type) + "] e_passwordShortRedemption() -> Password too short");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(PASSWORD_SHORT);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, PASSWORD_SHORT_REDEMPTION);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            closeErrorPrompt();
        };
        hideLoading();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_passwordLong(obj) {
        $d(("[" + obj.type) + "] e_passwordLong() -> Password too short");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(PASSWORD_LONG);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, PASSWORD_LONG);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            Selection.setFocus("LOGIN_HOLDER.NP_PASSWORD_INPUT");
            closeErrorPrompt();
        };
        hideLoading();
        _trackerAS2.sendTrackLoginError();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_nameRequired(obj) {
        $d(("[" + obj.type) + "] e_nameRequired() -> Name required");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(NAME_REQUIRED);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, NAME_REQUIRED);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            Selection.setFocus("LOGIN_HOLDER.NP_USERNAME_INPUT");
            closeErrorPrompt();
        };
        hideLoading();
        _trackerAS2.sendTrackLoginError();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_nameRequiredRedemption(obj) {
        $d(("[" + obj.type) + "] e_nameRequiredRedemption() -> Name required");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(NAME_REQUIRED);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, NAME_REQUIRED_REDEMPTION);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            closeErrorPrompt();
        };
        hideLoading();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_nameShort(obj) {
        $d(("[" + obj.type) + "] e_nameShort() -> Name too short");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(NAME_SHORT);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, NAME_SHORT);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            Selection.setFocus("LOGIN_HOLDER.NP_USERNAME_INPUT");
            closeErrorPrompt();
        };
        hideLoading();
        _trackerAS2.sendTrackLoginError();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_nameShortRedemption(obj) {
        $d(("[" + obj.type) + "] e_nameShort() -> Name too short");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(NAME_SHORT);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, NAME_SHORT_REDEMPTION);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            closeErrorPrompt();
        };
        hideLoading();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_nameLong(obj) {
        $d(("[" + obj.type) + "] e_nameLong() -> Name too short");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(NAME_LONG);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, NAME_LONG);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            Selection.setFocus("LOGIN_HOLDER.NP_USERNAME_INPUT");
            closeErrorPrompt();
        };
        hideLoading();
        _trackerAS2.sendTrackLoginError();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_loginFlooding(obj) {
        $d(("[SOCKET ERROR - " + LOGIN_FLOODING) + "] e_loginFlooding() -> Login flooding limit reached");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(LOGIN_FLOODING);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, LOGIN_FLOODING);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            LOGIN_HOLDER.gotoNewPlayer();
            closeErrorPrompt();
        };
        hideLoading();
        _trackerAS2.sendTrackLoginError();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_playerInRoom(obj) {
        $d(("[" + obj.type) + "] e_playerInRoom() -> Player in room");
        var _local_2 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(PLAYER_IN_ROOM);
        var _local_3 = getLocalizedString("Okay");
        var _local_4 = buildErrorCodeString(obj.type, PLAYER_IN_ROOM);
        hideLoading();
        showErrorPrompt(_local_2, _local_1, _local_3, button_action, _local_4);
    }
    function e_roomFull(obj) {
        $d(("[" + obj.type) + "] e_roomFull() -> Room is full");
        var _local_5 = window_size[WINDOW_SMALL];
        var _local_2 = getLocalizedErrorStringById(ROOM_FULL);
        var _local_6 = getLocalizedString("Okay");
        var _local_7 = buildErrorCodeString(obj.type, ROOM_FULL, obj.room_id);
        var _local_3 = function () {
            closeErrorPrompt();
            INTERFACE.showContent("map", com.clubpenguin.util.Delegate.create(this, onMapLoaded), null, null, true);
        };
        hideLoading();
        showErrorPrompt(_local_5, _local_2, _local_6, _local_3, _local_7);
    }
    function e_roomCapacityRule(obj) {
        $d(("[" + obj.type) + "] e_roomCapacityRule() -> Room is full");
        var _local_5 = window_size[WINDOW_SMALL];
        var _local_2 = getLocalizedErrorStringById(ROOM_FULL);
        var _local_6 = getLocalizedString("Okay");
        var _local_7 = buildErrorCodeString(obj.type, ROOM_CAPACITY_RULE, obj.room_id);
        var _local_3 = function () {
            closeErrorPrompt();
            INTERFACE.showInterface();
            INTERFACE.showContent("map", com.clubpenguin.util.Delegate.create(this, onMapLoaded), null, null, true);
        };
        hideLoading();
        showErrorPrompt(_local_5, _local_2, _local_6, _local_3, _local_7);
    }
    function e_roomDoesNotExist(obj) {
        $d(("[" + obj.type) + "] e_roomDoesNotExist() -> Room expired or does not exist");
        var _local_4 = window_size[WINDOW_SMALL];
        var _local_2 = getLocalizedErrorStringById(DEFAULT_ERROR);
        var _local_5 = getLocalizedString("Okay");
        var _local_6 = buildErrorCodeString(DEFAULT_ERROR_TYPE, ROOM_DOES_NOT_EXIST);
        var _local_3 = function () {
            closeErrorPrompt();
            INTERFACE.showInterface();
            INTERFACE.showContent("map", com.clubpenguin.util.Delegate.create(this, onMapLoaded), null, null, true);
        };
        hideLoading();
        showErrorPrompt(_local_4, _local_2, _local_5, _local_3, _local_6);
    }
    function onMapLoaded(map) {
        map.hideCloseButton();
    }
    function e_gameFull(obj) {
        $d(("[" + obj.type) + "] e_gameFull() -> Game is full");
        var _local_4 = window_size[WINDOW_SMALL];
        var _local_2 = getLocalizedErrorStringById(GAME_FULL);
        var _local_5 = getLocalizedString("Okay");
        var _local_6 = buildErrorCodeString(obj.type, GAME_FULL);
        var _local_3 = function () {
            closeErrorPrompt();
            INTERFACE.showContent("map", com.clubpenguin.util.Delegate.create(this, onMapLoaded), null, null, true);
        };
        hideLoading();
        showErrorPrompt(_local_4, _local_2, _local_5, _local_3, _local_6);
    }
    function e_alreadyOwnInventoryItem(obj) {
        sendShowError(obj, ALREADY_OWN_INVENTORY_ITEM);
    }
    function e_notEnoughCoins(obj) {
        INTERFACE.showComplexPrompt("not_enough_coins", {hasPuffle:getMyPuffleCount() > 0, error_code:NOT_ENOUGH_COINS});
    }
    function e_maxFurnitureItems(obj) {
        sendShowError(obj, MAX_FURNITURE_ITEMS);
    }
    function e_maxPuffleCareItems(obj) {
        sendShowError(obj, MAX_PUFFLECARE_ITEMS);
    }
    function e_maxPuffleHatItems(obj) {
        sendShowError(obj, MAX_PUFFLEHAT_ITEMS);
    }
    function e_alreadyOwnSuperplayItem(obj) {
        sendShowError(obj, ALREADY_OWN_SUPERPLAY_ITEM);
    }
    function e_maxCJMats(obj) {
        sendShowError(obj, MAX_CJ_MATS);
    }
    function e_notEnoughMedals(obj) {
        $d(("[" + obj.type) + "] e_notEnoughMedals() -> Not enough medals");
        var _local_2 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(NOT_ENOUGH_MEDALS);
        var _local_3 = getLocalizedString("Okay");
        var _local_4 = buildErrorCodeString(obj.type, NOT_ENOUGH_MEDALS);
        showErrorPrompt(_local_2, _local_1, _local_3, button_action, _local_4);
    }
    function e_itemNotExist(obj) {
        $d(("[" + obj.type) + "] e_itemNotExist() -> Item does not exist");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(ITEM_NOT_EXIST);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, ITEM_NOT_EXIST);
        var _local_2 = function () {
            closeErrorPrompt();
            INTERFACE.closePrompt();
        };
        sendAS3ClosePrompt();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_itemNotAvailable(obj) {
        $d(("[" + obj.type) + "] e_itemNotAvailable() -> Item does not exist");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(ITEM_NOT_AVAILABLE);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, ITEM_NOT_AVAILABLE);
        var _local_2 = function () {
            closeErrorPrompt();
            INTERFACE.closePrompt();
        };
        sendAS3ClosePrompt();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_nameNotAllowed(obj) {
    }
    function e_iglooPuffleLimit(obj) {
        INTERFACE.closePrompt();
        var _local_1 = new Object();
        _local_1.assetPath = getPath("w.prompts.puffle.igloolimit");
        _local_1.buttonClipPredefinedActions = new Object();
        _local_1.buttonClipPredefinedActions.okButton = "close";
        INTERFACE.showAssetPrompt(_local_1);
    }
    function e_maxPuffleLimit(obj) {
        sendShowError(obj, MAX_PUFFLE_LIMIT);
    }
    function e_alreadyOwnIgloo(obj) {
        INTERFACE.closePrompt();
        sendShowError(obj, ALREADY_OWN_IGLOO);
    }
    function e_alreadyOwnFloor(obj) {
        sendShowError(obj, ALREADY_OWN_FLOOR);
    }
    function e_alreadyOwnLocation(obj) {
        sendShowError(obj, ALREADY_OWN_LOCATION);
    }
    function e_banDuration(obj) {
        $d(("[" + obj.type) + "] e_banDuration() -> Still have time left in ban");
        var _local_3 = getMyPlayerId();
        if ((_local_3 != undefined) && (_local_3 != -1)) {
            com.disney.dlearning.managers.DLSManager.instance.pushOpcodeToHost("account.banned.k.api.dlsnetwork.com", "PRESENTED", TEMP_BAN, dlsBanCallback, "0", "0", "0");
        }
        var _local_2 = Number(obj[1]);
        var _local_4 = getLocalizedString("hours");
        if (_local_2 == 1) {
            _local_4 = getLocalizedString("hour");
        }
        var _local_1 = getLocalizedErrorStringById(BAN_DURATION);
        _local_1 = replace_m(_local_1, [_local_2, _local_4]);
        AIRTOWER.disconnect();
        var _local_5 = function () {
            getURL (getPath("main_web"), "_self");
        };
        hideLoading();
        var _local_7 = window_size[WINDOW_SMALL];
        var _local_8 = getLocalizedString("Okay");
        var _local_9 = buildErrorCodeString(obj.type, BAN_DURATION);
        showErrorPrompt(_local_7, _local_1, _local_8, _local_5, _local_9);
    }
    function e_banAnHour(obj) {
        $d(("[" + obj.type) + "] e_banAnHour() -> Still banned, but only minutes left");
        var _local_1 = getMyPlayerId();
        if ((_local_1 != undefined) && (_local_1 != -1)) {
            com.disney.dlearning.managers.DLSManager.instance.pushOpcodeToHost("account.banned.k.api.dlsnetwork.com", "PRESENTED", TEMP_BAN, dlsBanCallback, "0", "0", "0");
        }
        var _local_4 = window_size[WINDOW_SMALL];
        var _local_2 = getLocalizedErrorStringById(BAN_AN_HOUR);
        var _local_5 = getLocalizedString("Okay");
        var _local_6 = buildErrorCodeString(obj.type, BAN_AN_HOUR);
        AIRTOWER.disconnect();
        var _local_3 = function () {
            getURL (getPath("main_web"), "_self");
        };
        hideLoading();
        showErrorPrompt(_local_4, _local_2, _local_5, _local_3, _local_6);
    }
    function e_banForever(obj) {
        $d(("[" + obj.type) + "] e_banForever() -> Player is banned forever");
        var _local_1 = getMyPlayerId();
        if ((_local_1 != undefined) && (_local_1 != -1)) {
            com.disney.dlearning.managers.DLSManager.instance.pushOpcodeToHost("account.banned.k.api.dlsnetwork.com", "PRESENTED", PERMANENT_BAN, dlsBanCallback, "0", "0", "0");
        }
        var _local_4 = window_size[WINDOW_SMALL];
        var _local_2 = getLocalizedErrorStringById(BAN_FOREVER);
        var _local_5 = getLocalizedString("Okay");
        var _local_6 = buildErrorCodeString(obj.type, BAN_FOREVER);
        AIRTOWER.disconnect();
        var _local_3 = function () {
            getURL (getPath("main_web"), "_self");
        };
        hideLoading();
        showErrorPrompt(_local_4, _local_2, _local_5, _local_3, _local_6);
    }
    function e_autoBan(obj) {
        $d(("[" + obj.type) + "] e_autoBan() -> Auto banned");
        var _local_1 = getMyPlayerId();
        if ((_local_1 != undefined) && (_local_1 != -1)) {
            com.disney.dlearning.managers.DLSManager.instance.pushOpcodeToHost("account.banned.k.api.dlsnetwork.com", "PRESENTED", TEMP_BAN, dlsBanCallback, "0", "0", "0");
        }
        var _local_2 = getLocalizedErrorStringById(AUTO_BAN);
        var _local_4 = window_size[WINDOW_LARGE];
        var _local_5 = getLocalizedString("Okay");
        var _local_6 = buildErrorCodeString(obj.type, AUTO_BAN);
        AIRTOWER.disconnect();
        var _local_3 = function () {
            getURL (getPath("main_web"), "_self");
        };
        hideLoading();
        showErrorPrompt(_local_4, _local_2, _local_5, _local_3, _local_6);
    }
    function e_hackingAutoBan(obj) {
        $d(("[" + obj.type) + "] e_hackingAutoBan() -> Hacking Auto banned");
        var _local_3 = getMyPlayerId();
        if ((_local_3 != undefined) && (_local_3 != -1)) {
            com.disney.dlearning.managers.DLSManager.instance.pushOpcodeToHost("account.banned.k.api.dlsnetwork.com", "PRESENTED", TEMP_BAN, dlsBanCallback, "0", "0", "0");
        }
        var _local_4 = getLanguageObject()[obj[1]] || (obj[1]);
        var _local_1 = getLocalizedErrorStringById(HACKING_AUTO_BAN);
        _local_1 = replace("%reason%", _local_4, _local_1);
        var _local_6 = window_size[WINDOW_LARGE];
        var _local_7 = getLocalizedString("Okay");
        var _local_8 = buildErrorCodeString(obj.type, HACKING_AUTO_BAN);
        AIRTOWER.disconnect();
        var _local_5 = function () {
            getURL (getPath("main_web"), "_self");
        };
        hideLoading();
        showErrorPrompt(_local_6, _local_1, _local_7, _local_5, _local_8);
    }
    function e_gameCheat(obj) {
        $d(("[" + obj.type) + "] e_gameCheat() -> Game cheating detected");
        var _local_3 = window_size[WINDOW_LARGE];
        var _local_1 = getLocalizedErrorStringById(GAME_CHEAT);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, GAME_CHEAT);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            getURL (getPath("client_web"), "_self");
        };
        hideLoading();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_accountNotActive(obj) {
        $d(("[" + obj.type) + "] e_accountNotActive() -> Account is not active");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(ACCOUNT_NOT_ACTIVATE);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, ACCOUNT_NOT_ACTIVATE);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            if (getMyPlayerObject().remaining_hours == undefined) {
                LOGIN_HOLDER.gotoNewPlayer();
                closeErrorPrompt();
            } else {
                flash.external.ExternalInterface.call("document.location.reload");
            }
        };
        hideLoading();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_buddyLimit(obj) {
        $d(("[" + obj.type) + "] e_buddy_limit() -> Buddy limit reached");
        var _local_2 = MAX_BUDDY_COUNT;
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(BUDDY_LIMIT);
        _local_1 = replace("%number%", String(_local_2), _local_1);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, BUDDY_LIMIT);
        showErrorPrompt(_local_3, _local_1, _local_4, button_action, _local_5);
    }
    function formatMilitaryTime(militaryTime) {
        if (getLanguageAbbreviation() == DE_ABBR) {
            var _local_1 = militaryTime.split(":");
            _local_1.splice(2);
            return(_local_1.join(":"));
        }
        return(convertToStandardTime(militaryTime, ":", true));
    }
    function e_playTimeUp(obj) {
        var _local_1 = String(obj[1]).split(":");
        var _local_2 = Number(_local_1[0]);
        var _local_3 = Number(_local_1[1]);
        var _local_5 = ((_local_2 <= 1) ? (getLocalizedString("w.app.hour")) : (getLocalizedString("w.app.hours")));
        var _local_6 = ((_local_3 <= 1) ? (getLocalizedString("w.app.minute")) : (getLocalizedString("w.app.minutes")));
        var _local_4 = Object();
        _local_4.errorMessageTextArgsArray = [_local_2, _local_5, _local_3, _local_6];
        AIRTOWER.disconnect();
        sendShowError(_local_4, PLAY_TIME_UP);
    }
    function e_playTimeEnding(obj) {
        var _local_4 = Number(obj[1]);
        var _local_1 = String(obj[2]).split(":");
        var _local_2 = Number(_local_1[0]);
        var _local_3 = Number(_local_1[1]);
        var _local_7 = ((_local_4 <= 1) ? (getLocalizedString("w.app.minute")) : (getLocalizedString("w.app.minutes")));
        var _local_6 = ((_local_2 <= 1) ? (getLocalizedString("w.app.hour")) : (getLocalizedString("w.app.hours")));
        var _local_8 = ((_local_3 <= 1) ? (getLocalizedString("w.app.minute")) : (getLocalizedString("w.app.minutes")));
        var _local_5 = Object();
        _local_5.errorMessageTextArgsArray = [_local_4, _local_7, _local_2, _local_6, _local_3, _local_8];
        sendShowError(_local_5, PLAY_TIME_ENDING);
    }
    function e_playHoursEnding(obj) {
        var _local_1 = Number(obj[1]);
        var _local_5 = formatMilitaryTime(obj[2]);
        var _local_6 = formatMilitaryTime(obj[3]);
        var _local_3 = ((_local_1 <= 1) ? (getLocalizedString("w.app.minute")) : (getLocalizedString("w.app.minutes")));
        var _local_2 = Object();
        _local_2.errorMessageTextArgsArray = [_local_1, _local_3, _local_5, _local_6];
        sendShowError(_local_2, PLAY_HOURS_ENDING);
    }
    function e_playHoursUp(obj) {
        var _local_2 = formatMilitaryTime(obj[1]);
        var _local_3 = formatMilitaryTime(obj[2]);
        var _local_1 = Object();
        _local_1.errorMessageTextArgsArray = [_local_2, _local_3];
        AIRTOWER.disconnect();
        sendShowError(_local_1, PLAY_HOURS_UP);
    }
    function e_playHoursHasntStart(obj) {
        var _local_2 = formatMilitaryTime(obj[1]);
        var _local_3 = formatMilitaryTime(obj[2]);
        var _local_1 = Object();
        _local_1.errorMessageTextArgsArray = [_local_2, _local_3];
        AIRTOWER.disconnect();
        sendShowError(_local_1, PLAY_HOURS_HASNT_START);
    }
    function e_playHoursUpdate(obj) {
        var _local_2 = formatMilitaryTime(obj[1]);
        var _local_3 = formatMilitaryTime(obj[2]);
        var _local_1 = Object();
        _local_1.errorMessageTextArgsArray = [_local_2, _local_3];
        sendShowError(_local_1, PLAY_HOURS_UPDATE);
    }
    function e_outPlayTime(obj) {
        $d(("[" + obj.type) + "] e_outPlayTime() -> Trying to play outside allowed hours");
        var _local_3 = formatMilitaryTime(obj[1]);
        var _local_4 = formatMilitaryTime(obj[2]);
        if (getLanguageAbbreviation() == DE_ABBR) {
            var _local_1 = _local_3.split(":");
            _local_1.splice(2);
            _local_3 = _local_1.join(":");
            _local_1 = _local_4.split(":");
            _local_1.splice(2);
            _local_4 = _local_1.join(":");
        } else {
            _local_3 = convertToStandardTime(obj[1], ":", true);
            _local_4 = convertToStandardTime(obj[2], ":", true);
        }
        var _local_5 = getLocalizedErrorStringById(OUT_PLAY_TIME);
        _local_5 = replace_m(_local_5, [_local_3, _local_4]);
        var _local_7 = window_size[WINDOW_SMALL];
        var _local_8 = getLocalizedString("Okay");
        var _local_9 = buildErrorCodeString(obj.type, OUT_PLAY_TIME);
        AIRTOWER.disconnect();
        var _local_6 = function () {
            getURL (getPath("community_web"), "_self");
        };
        hideLoading();
        showErrorPrompt(_local_7, _local_5, _local_8, _local_6, _local_9);
    }
    function e_grounded(obj) {
        $d(("[" + obj.type) + "] e_grounded() -> Trying to play while grounded");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(GROUNDED);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, GROUNDED);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            getURL (getPath("guide_web"), "_self");
        };
        hideLoading();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_systemReboot(obj) {
        $d(("[" + obj.type) + "] e_systemReboot() -> System is going to reboot in five minutes");
        var _local_2 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(SYSTEM_REBOOT);
        var _local_3 = getLocalizedString("Okay");
        var _local_4 = buildErrorCodeString(obj.type, SYSTEM_REBOOT);
        showErrorPrompt(_local_2, _local_1, _local_3, button_action, _local_4);
    }
    function e_notMember(obj) {
        $d(("[" + obj.type) + "] e_notMember() -> You must be a member to complete this action");
        var _local_2 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(NOT_MEMBER);
        var _local_3 = getLocalizedString("Okay");
        var _local_4 = buildErrorCodeString(obj.type, NOT_MEMBER);
        showErrorPrompt(_local_2, _local_1, _local_3, button_action, _local_4);
    }
    function e_noDatabaseConnection(obj) {
        $d(("[" + obj.type) + "] e_noDatabaseConnection() -> Could not establish a database connection");
        var _local_3 = window_size[WINDOW_SMALL];
        var _local_1 = getLocalizedErrorStringById(NO_DB_CONNECTION);
        var _local_4 = getLocalizedString("Okay");
        var _local_5 = buildErrorCodeString(obj.type, NO_DB_CONNECTION);
        AIRTOWER.disconnect();
        var _local_2 = function () {
            LOGIN_HOLDER.gotoStart();
            closeErrorPrompt();
        };
        hideLoading();
        showErrorPrompt(_local_3, _local_1, _local_4, _local_2, _local_5);
    }
    function e_passwordSavePrompt(obj) {
        $d(("[" + obj.type) + "] e_passwordSavePrompt() -> Telling the user about the problems with saving their password");
        var _local_1 = getLocalizedErrorStringById(PASSWORD_SAVE_PROMPT);
        var _local_2 = window_size[WINDOW_EXTRA_LARGE];
        var _local_3 = getLocalizedString("Okay");
        var _local_4 = buildErrorCodeString(obj.type, PASSWORD_SAVE_PROMPT);
        showErrorPrompt(_local_2, _local_1, _local_3, button_action, _local_4);
    }
    function e_loadError(obj) {
        $d(("[" + obj.type) + "] e_loadError() -> Can not load file!");
        var _local_1 = obj.file_path;
        var _local_9 = _local_1.lastIndexOf("/");
        _local_1 = _local_1.substring(_local_9 + 1, _local_1.length);
        var _local_2 = _local_1.lastIndexOf(".swf");
        _local_1 = "-" + _local_1.substring(0, _local_2);
        var _local_3 = getLocalizedErrorStringById(LOAD_ERROR);
        var _local_6 = window_size[WINDOW_SMALL];
        var _local_7 = getLocalizedString("Okay");
        var _local_8 = buildErrorCodeString(obj.type, LOAD_ERROR, _local_1);
        AIRTOWER.disconnect();
        var _local_4 = function () {
            getURL (getPath("client_web"), "_self");
        };
        hideLoading();
        showErrorPrompt(_local_6, _local_3, _local_7, _local_4, _local_8);
    }
    function e_maxFurniture(obj) {
        $d(("[" + obj.type) + "] e_maxFurniture() -> Max furniture!");
        var _local_1 = obj.file_path;
        var _local_8 = _local_1.lastIndexOf("/");
        _local_1 = _local_1.substring(_local_8 + 1, _local_1.length);
        var _local_3 = _local_1.lastIndexOf(".swf");
        _local_1 = "-" + _local_1.substring(0, _local_3);
        var _local_2 = getLocalizedErrorStringById(MAX_IGLOO_FURNITURE_ERROR);
        _local_2 = replace("%number%", MAX_IGLOO_ITEMS.toString(), _local_2);
        var _local_5 = window_size[WINDOW_SMALL];
        var _local_6 = getLocalizedString("Okay");
        var _local_7 = buildErrorCodeString(obj.type, MAX_IGLOO_FURNITURE_ERROR);
        showErrorPrompt(_local_5, _local_2, _local_6, button_action, _local_7);
    }
    function e_maxStampBookCoverItems(obj) {
        $d(("[" + obj.type) + "] e_maxStampBookCoverItems() -> Max Stamp Book Cover Items!");
        var _local_1 = obj.file_path;
        var _local_8 = _local_1.lastIndexOf("/");
        _local_1 = _local_1.substring(_local_8 + 1, _local_1.length);
        var _local_3 = _local_1.lastIndexOf(".swf");
        _local_1 = "-" + _local_1.substring(0, _local_3);
        var _local_2 = getLocalizedErrorStringById(MAX_STAMPBOOK_COVER_ITEMS);
        _local_2 = replace("%number%", com.clubpenguin.stamps.StampManager.MAX_STAMPBOOK_COVER_ITEMS.toString(), _local_2);
        var _local_5 = window_size[WINDOW_SMALL];
        var _local_6 = getLocalizedString("Okay");
        var _local_7 = buildErrorCodeString(obj.type, MAX_STAMPBOOK_COVER_ITEMS);
        showErrorPrompt(_local_5, _local_2, _local_6, button_action, _local_7);
    }
    function getErrorActionById(id) {
        if (e_actions[id] != undefined) {
            return(e_actions[id]);
        }
        return(e_actions[DEFAULT_ERROR]);
    }
    function getErrorFunctionByErrorCode(error_code) {
        var _local_2 = getErrorFunctionObject();
        if (!isNaN(error_code)) {
            var _local_1 = _local_2[error_code];
            if (_local_1 != undefined) {
                return(_local_1);
            }
            return(_local_2[DEFAULT_ERROR]);
        }
        $d(("[shell] getErrorFunctionByErrorCode() -> Error Code is not a real number. error_code: " + error_code) + " returning default error");
        return(_local_2[DEFAULT_ERROR]);
    }
    function dlsBanCallback(returnString) {
    }
    function getErrorFunctionObject() {
        return(e_func);
    }
    function buildErrorCodeString(type, error_code, message) {
        if (isValidString(type)) {
            if (!isNaN(error_code)) {
                _trackerAS2.sendToAS3LogError(String(error_code), "General Error", message);
                var _local_1;
                switch (type) {
                    case SOCKET_ERROR : 
                        _local_1 = SOCKET_ERROR.substr(0, 1).toLowerCase();
                        break;
                    case CLIENT_ERROR : 
                        _local_1 = CLIENT_ERROR.substr(0, 1).toLowerCase();
                        break;
                    default : 
                        _local_1 = DEFAULT_ERROR_TYPE;
                        break;
                }
                return((_local_1 + "") + error_code);
            }
            $e(("buildErrorCodeString() -> Error code is not a valid number! error_code: " + error_code) + " Defaulting to default error");
            return((DEFAULT_ERROR_TYPE + "") + DEFAULT_ERROR_CODE);
        }
        $e(("buildErrorCodeString() -> Error type is not a valid string! error_type: " + _local_1) + " Defaulting to default error");
        return((DEFAULT_ERROR_TYPE + "") + DEFAULT_ERROR_CODE);
    }
    function setupErrorScreen(mc) {
        error_cover = mc.attachMovie("errorCover", "errorCover", mc.getNextHighestDepth());
        error_cover._alpha = 40;
        error_window = mc.attachMovie("errorWindow", "errorWindow", mc.getNextHighestDepth());
        hideErrorPrompt();
    }
    function $e(message, error_obj) {
        if (error_obj != undefined) {
            error_obj.type = CLIENT_ERROR;
            initError(error_obj);
        }
    }
    function handleServerError(errorResponse) {
        var _local_1 = errorResponse.concat();
        _local_1.type = SOCKET_ERROR;
        _local_1.room_id = _local_1.shift();
        _local_1.error_code = _local_1[0];
        initError(_local_1);
    }
    function handleConnectionLost() {
        var _local_1 = new Object();
        _local_1.type = SOCKET_ERROR;
        _local_1.error_code = SOCKET_LOST_CONNECTION;
        _local_1.buttonURL = getPath("client_web") + "#/login/";
        initError(_local_1);
    }
    function initError(errorObj) {
        if (getShellErrorsActive() || (errorObj.error_code == ACCOUNT_NOT_ACTIVATE)) {
            if (!isNaN(errorObj.error_code)) {
                var _local_2 = getErrorFunctionByErrorCode(errorObj.error_code);
                _local_2(errorObj);
            } else {
                $e("[shell] initError() -> Not a real number passed for error code. error_code: " + errorObj.errorCode);
            }
        }
    }
    function showErrorPrompt(window_size, message, button_lable, button_action, error_code) {
        INTERFACE.closePrompt();
        var _local_1 = error_window;
        _local_1._visible = false;
        _local_1.bg._height = window_size.h;
        _local_1.bg._width = window_size.w;
        _local_1._x = 380 - (_local_1.bg._width / 2);
        _local_1._y = 240 - (_local_1.bg._height / 2);
        var _local_2 = 25;
        _local_1.message_txt._height = _local_2;
        _local_1.message_txt.htmlText = message;
        var _local_3 = _local_1.message_txt.maxscroll;
        _local_1.message_txt._height = _local_2 * _local_3;
        _local_1.message_txt._width = _local_1.bg._width - 40;
        _local_1.message_txt._x = (_local_1.bg._width / 2) - (_local_1.message_txt._width / 2);
        _local_1.message_txt._y = ((_local_1.bg._height - _local_1.error_btn._height) / 2) - (_local_1.message_txt._height / 2);
        _local_1.error_txt.text = error_code;
        _local_1.error_txt._x = (_local_1.bg._width - 12) - _local_1.error_txt._width;
        _local_1.error_txt._y = _local_1.bg._height - 38;
        MovieClip.prototype.tabEnabled = false;
        Button.prototype.tabEnabled = false;
        _local_1.error_btn.tabEnabled = true;
        _local_1.error_btn.label_txt.text = button_lable;
        var keyListener = new Object();
        keyListener.onKeyDown = function () {
            if (Key.getCode() == 13) {
                closeErrorPrompt();
                Key.removeListener(keyListener);
            }
        };
        Key.addListener(keyListener);
        if (button_action != undefined) {
            _local_1.error_btn.onRelease = function () {
                delete MovieClip.prototype.tabEnabled;
                delete Button.prototype.tabEnabled;
                button_action();
            };
        } else {
            _local_1.error_btn.onRelease = function () {
                delete MovieClip.prototype.tabEnabled;
                delete Button.prototype.tabEnabled;
                closeErrorPrompt();
            };
        }
        _local_1.error_btn._x = (_local_1.bg._width / 2) - (_local_1.error_btn._width / 2);
        _local_1.error_btn._y = _local_1.bg._height - 80;
        error_cover._visible = true;
        error_cover.onRelease = function () {
        };
        error_cover.useHandCursor = false;
        _local_1._visible = true;
    }
    function closeErrorPrompt() {
        hideErrorPrompt();
        updateListeners(ERROR_PROMPT_CLOSED);
    }
    function hideErrorPrompt() {
        error_window._visible = false;
        error_cover._visible = false;
        error_cover.onRelease = null;
        delete error_cover.onRelease;
        hideLightbox();
    }
    function getLocalizedErrorStringById(id) {
        var _local_1 = getLocalizedErrorObject();
        if (!isNaN(id)) {
            var _local_2 = _local_1[id];
            if (isValidString(_local_2)) {
                return(_local_2);
            }
            $e(("[shell] getLocalizedErrorStringById() -> Was not able to find a valid string for error id \"" + id) + "\" returning default error string instead.");
            return(_local_1[DEFAULT_ERROR]);
        }
        $e(("[shell] getLocalizedErrorStringById() -> Not a real number passed for id! id: " + id) + " Returning default error string.");
        return(_local_1[DEFAULT_ERROR]);
    }
    function getLocalizedErrorObject() {
        return(local_error_obj);
    }
    function setLocalizedErrorObject(obj) {
        var _local_5 = {};
        for (s in obj) {
            var _local_2 = s.split(".")[1];
            var _local_3 = this[_local_2];
            _local_5[_local_3] = obj[s];
        }
        local_error_obj = _local_5;
    }
    function setShellErrorsActive(active) {
        shell_errors_active = active;
    }
    function getShellErrorsActive() {
        return(shell_errors_active);
    }
    function checkIfPlayerIsIdle() {
        if (last_update == NaN) {
            last_update = getLocalEpoch();
        }
        if ((getLocalEpoch() - last_update) >= idle_timeout) {
            idleDisconnect();
        }
    }
    function idleDisconnect() {
        $e(("[shell] checkIfPlayerIsIdle() -> Penguin has been idle for " + idle_timeout) + "ms", {error_code:TIME_OUT});
        heartbeat.stopHeartbeat();
        stopPlayerIdleCheck();
        sendIdlePlayerTimeout();
    }
    function startPlayerIdleCheck() {
        last_update = getLocalEpoch();
        attachIdleListeners();
        idle_interval = setInterval(checkIfPlayerIsIdle, idle_timeout_freq);
    }
    function stopPlayerIdleCheck() {
        removeIdleListeners();
        clearInterval(idle_interval);
    }
    function attachIdleListeners() {
        key_listener = new Object();
        key_listener.onKeyDown = setLastUpdate;
        Key.addListener(key_listener);
        mouse_listener = new Object();
        mouse_listener.onMouseDown = mouseClicked;
        Mouse.addListener(mouse_listener);
    }
    function removeIdleListeners() {
        Key.removeListener(key_listener);
        Mouse.removeListener(mouse_listener);
    }
    function mouseClicked() {
        if (SHELL.bg_mc.hitTest(_xmouse, _ymouse, false)) {
            setLastUpdate();
        }
    }
    function setLastUpdate() {
        last_update = getLocalEpoch();
    }
    function $d(message) {
        if (DEBUG_MODE) {
        }
    }
    function debugObject(obj, verbose) {
        if (DEBUG_MODE) {
            dumpObject(obj);
        }
        return("");
    }
    function dumpObject(obj, depth, out) {
        if (DEBUG_MODE) {
            if (depth == undefined) {
                depth = 0;
            }
            if (depth == 0) {
            }
            var _local_8 = "";
            if (out != undefined) {
                _local_8 = out + ": ";
            }
            var _local_1;
            var _local_5 = "";
            var _local_7 = "\t";
            var _local_4;
            var _local_3 = 0;
            while (_local_3 < depth) {
                _local_5 = _local_5 + _local_7;
                _local_3++;
            }
            for (_local_1 in obj) {
                _local_4 = typeof(obj[_local_1]);
                if (_local_4 != "object") {
                } else {
                    dumpObject(obj[_local_1], depth + 1, _local_1);
                }
            }
            if (obj == undefined) {
            }
        }
    }
    function setupLoading(container) {
        loading = container.attachMovie("AS2loadingScreen", "AS2loadingScreen", container.getNextHighestDepth());
    }
    function showJumpLoading(message, listener) {
        sendAS3LeavingRoom();
        isJumpLoadingScreen = true;
        showLoading(message, listener);
    }
    function hideJumpLoading() {
        isJumpLoadingScreen = false;
        loading.gotoAndStop(1);
        if (getRoomObject().room_id != 898) {
            hideLoading();
        }
    }
    function showLoading(message, listener) {
        if (loadingScreenEnabled) {
            loading._visible = true;
            showLoadingScreen(message);
        }
    }
    function hideLoading() {
        loading._visible = false;
        hideLoadingScreen();
    }
    function loadingScreenLoadProgress(bytesLoaded, bytesTotal) {
        if (loadingScreenEnabled) {
            updateThrottleTime = getTimer();
            updateLoadingScreen(bytesLoaded / bytesTotal);
        }
    }
    function enableLoadingScreens() {
        loadingScreenEnabled = true;
    }
    function disableLoadingScreens() {
        loadingScreenEnabled = false;
    }
    function setupLightbox(mc) {
        lightbox = mc.attachMovie("lightbox", "lightbox", mc.getNextHighestDepth());
    }
    function showLightbox() {
        lightbox._visible = true;
        lightbox.onRelease = function () {
        };
        lightbox.useHandCursor = false;
    }
    function hideLightbox() {
        lightbox._visible = false;
        delete lightbox.onRelease;
    }
    function closeGridView() {
        close_func_holder();
    }
    function startGridview(in_array, file_path, on_release, user_options) {
        close_func_holder = user_options.on_close;
        user_options.on_close = closeGridView;
        GRIDVIEW.startGridview(in_array, file_path, on_release, user_options);
    }
    function addListener(type, func, scope) {
        if ((type == undefined) || (func == undefined)) {
            $e((("[shell] addListener() -> You must pass a valid listener type and function! type: " + type) + " func: ") + func);
            return(false);
        }
        var _local_2;
        if (isCurrentlyDispatchingEvent()) {
            if (listenersToAddMap[type] == undefined) {
                listenersToAddMap[type] = new Array();
            }
            _local_2 = listenersToAddMap[type];
        } else {
            _local_2 = getListenersArray(type);
        }
        var _local_3 = getListenerIndex(_local_2, func);
        if (_local_3 == -1) {
            $d(((("[shell] " + (isCurrentlyDispatchingEvent() ? "deferred" : "immediate")) + " Successfully added listener to: \"") + type) + "\"");
            _local_2.push({func:func, scope:scope});
            return(true);
        }
        $d(("[shell] Failed to add listener. Tried to add a duplicate listener to: \"" + type) + "\"");
        return(false);
    }
    function removeListener(type, func) {
        var _local_2 = getListenersArray(type);
        var _local_3 = getListenerIndex(_local_2, func);
        if (_local_3 != -1) {
            $d(((("[shell] " + (isCurrentlyDispatchingEvent() ? "deferred" : "immediate")) + " Successfully removed listener from: \"") + type) + "\"");
            if (isCurrentlyDispatchingEvent()) {
                if (listenersToRemoveMap[type] == undefined) {
                    listenersToRemoveMap[type] = new Array();
                }
                listenersToRemoveMap[type].push(func);
            } else {
                _local_2.splice(_local_3, 1);
            }
            return(true);
        }
        $d(("[shell] Failed to remove listener which did not exist from: \"" + type) + "\"");
        return(false);
    }
    function getListenerIndex(array, func) {
        var _local_2 = array.length;
        var _local_1 = 0;
        while (_local_1 < _local_2) {
            if (array[_local_1].func == func) {
                return(_local_1);
            }
            _local_1++;
        }
        return(-1);
    }
    function updateListeners(type, obj) {
        currentDispatchingCount++;
        var _local_5 = true;
        var _local_4 = false;
        if (obj.type == null) {
            obj.type = type;
            _local_4 = true;
        }
        var _local_2 = getListenersArray(type);
        if (_local_2.length < 1) {
            $d(("event_listeners.as --> [airtower] No listeners currently attached to: \"" + type) + "\"");
            _local_5 = false;
        } else {
            var _local_1 = 0;
            while (_local_1 < _local_2.length) {
                (_local_2[_local_1].scope ? (_local_2[_local_1].func.call(_local_2[_local_1].scope, obj)) : (_local_2[_local_1].func(obj)));
                _local_1++;
            }
            if (_local_4) {
                obj.type = null;
                delete object.type;
            }
        }
        currentDispatchingCount--;
        if (currentDispatchingCount == 0) {
            flushListenerCache();
        }
        return(_local_5);
    }
    function isCurrentlyDispatchingEvent() {
        return(currentDispatchingCount > 0);
    }
    function flushListenerCache() {
        var _local_1;
        var _local_4;
        for (_local_4 in listenersToAddMap) {
            _local_1 = listenersToAddMap[_local_4];
            var _local_2 = 0;
            while (_local_2 < _local_1.length) {
                addListener(_local_4, _local_1[_local_2].func, _local_1[_local_2].scope);
                _local_2++;
            }
            _local_1.length = 0;
        }
        for (_local_4 in listenersToRemoveMap) {
            _local_1 = listenersToRemoveMap[_local_4];
            var _local_3 = 0;
            while (_local_3 < _local_1.length) {
                removeListener(_local_4, _local_1[_local_3]);
                _local_3++;
            }
            _local_1.length = 0;
        }
    }
    function getListenersArray(type) {
        if (shell_listener_container[type] == undefined) {
            shell_listener_container[type] = new Array();
        }
        return(shell_listener_container[type]);
    }
    function fetchFileContents(path, on_response) {
        $d("fetchFileContents() -> path: " + path);
        var _local_1 = new LoadVars();
        _local_1.onLoad = on_response;
        _local_1.load(path);
    }
    function loadSWF(mc, path, initFunction, startFunction, errorFunction, progressFunction, options) {
        __holder = mc;
        __initFunction = initFunction;
        __path = path;
        __options = ((options != undefined) ? (options) : ({}));
        currently_loading_path = path;
        var _local_6 = new MovieClipLoader();
        var _local_2 = {};
        _local_2.onLoadStart = startFunction;
        _local_2.onLoadProgress = progressFunction;
        _local_2.onLoadInit = initFunction;
        _local_2.onLoadError = errorFunction;
        if (startFunction == undefined) {
            _local_2.onLoadStart = defaultLoadStart;
        }
        if (progressFunction == undefined) {
            _local_2.onLoadProgress = defaultLoadProgress;
        }
        if (initFunction == undefined) {
            _local_2.onLoadInit = defaultLoadInit;
        }
        if (errorFunction == undefined) {
            _local_2.onLoadError = defaultLoadError;
        }
        if (!isValidString(path)) {
            _local_2.onLoadError(mc, "URLNotFound:" + path, 0);
            return(_local_2);
        }
        if (mc == undefined) {
            _local_2.onLoadError(mc, "INVALID MOVIECLIP", 0);
            return(_local_2);
        }
        _local_6.addListener(_local_2);
        var _local_5 = com.clubpenguin.util.URLUtils.getCacheResetURL(path);
        if (com.clubpenguin.hybrid.AS3Manager.isUnderAS3()) {
            var _local_10 = __options.skipLoadChecking;
            var _local_8 = {skipLoadChecking:_local_10};
            var _local_14 = new com.clubpenguin.hybrid.AS3MovieClipLoader(this, mc, _local_5, _local_2.onLoadInit, _local_2.onLoadStart, _local_2.onLoadProgress, _local_2.onLoadError, _local_8);
        } else {
            _local_6.loadClip(_local_5, mc);
        }
        return(_local_2);
    }
    function defaultLoadProgress(targetMC, bytesLoaded, bytesTotal) {
        loadingScreenLoadProgress(bytesLoaded, bytesTotal);
    }
    function defaultLoadError(target_mc, errorCode, httpStatus) {
        $e((((("[shell] defaultLoadError() -> \n\terror code: " + error_code) + " \n\thttp_status: ") + http_status) + " \n\tpath: ") + currently_loading_path, {error_code:LOAD_ERROR, file_path:currently_loading_path});
    }
    function addToQueue(mc, id) {
        load_queue.push(Array(mc, id));
    }
    function startLoadQueue(on_init, on_error) {
        var _local_1 = 0;
        var _local_2 = load_queue.length;
        while (_local_1 < _local_2) {
            loadSWF(load_queue[_local_1][0], load_queue[_local_1][1] + ".swf", on_init, null, on_error);
            _local_1++;
        }
        clearLoadQueue();
    }
    function clearLoadQueue() {
        load_queue = new Array();
    }
    function setColourFromHex(mc, hex) {
        var _local_1 = mc.transform.colorTransform;
        _local_1.rgb = Number(hex);
        mc.transform.colorTransform = _local_1;
    }
    function fadeIn(mc, start_alpha, end_alpha, step, on_finish) {
        mc._alpha = start_alpha;
        mc.onEnterFrame = function () {
            mc._alpha = mc._alpha + step;
            if (mc._alpha >= end_alpha) {
                delete mc.onEnterFrame;
                if (on_finish != undefined) {
                    on_finish(mc);
                }
            }
        };
    }
    function isValidString(txt) {
        if (txt.length < 1) {
            return(false);
        }
        if (txt == "") {
            return(false);
        }
        if (txt == undefined) {
            return(false);
        }
        if (txt == null) {
            return(false);
        }
        if (txt == "undefined") {
            return(false);
        }
        return(true);
    }
    function getRandomFromArray(how_many, in_array) {
        var _local_4 = new Array();
        var _local_6 = in_array.length;
        var _local_1 = in_array.slice();
        if (how_many > _local_6) {
            how_many = _local_6;
            $d("getRandomFromArray() - Asking for more elements than what exist! how_many reset to the length of the array");
        }
        var _local_3 = 0;
        var _local_2 = 0;
        while (_local_3 < how_many) {
            _local_2 = randBetween(0, _local_1.length - 1);
            _local_4.push(_local_1[_local_2]);
            _local_1.splice(_local_2, 1);
            _local_1.reverse();
            _local_3++;
        }
        return(_local_4);
    }
    function randBetween(from, to) {
        return(Math.round(Math.random() * (to - from)) + from);
    }
    function ucFirst(str) {
        return(str.substr(0, 1).toUpperCase() + str.substr(1, str.length));
    }
    function toTitleCase(str) {
        var _local_2 = str.split(" ");
        var _local_3 = _local_2.length;
        var _local_1 = 0;
        while (_local_1 < _local_3) {
            _local_2[_local_1] = ucFirst(_local_2[_local_1]);
            _local_1++;
        }
        return(_local_2.join(" "));
    }
    function paginateArray(in_array, page, items_on_page) {
        var _local_2 = page * items_on_page;
        var _local_1 = _local_2 + items_on_page;
        if (_local_1 > in_array.length) {
            _local_1 = in_array.length;
        }
        return(in_array.slice(_local_2, _local_1));
    }
    function getCleanURL(url, target, disconnect) {
        if (isValidString(url)) {
            if ((disconnect == undefined) || (disconnect == true)) {
                AIRTOWER.disconnect();
            }
            getURL (url, target);
        } else {
            $d("getCleanURL() - The URL passed was invalid: " + url);
        }
    }
    function freezeCode(username, password) {
        username = username + FREEZE_CODE_HASH;
        var _local_2 = [];
        var _local_3 = password.length;
        var _local_1 = 0;
        while (_local_1 < _local_3) {
            _local_2[_local_1] = password.charCodeAt(_local_1) + username.charCodeAt(_local_1);
            _local_1++;
        }
        return(_local_2);
    }
    function meltCode(username, password) {
        username = username + FREEZE_CODE_HASH;
        var _local_2 = "";
        var _local_1 = 0;
        while (_local_1 < password.length) {
            _local_2 = _local_2 + String.fromCharCode(password[_local_1] - username.charCodeAt(_local_1));
            _local_1++;
        }
        return(_local_2);
    }
    function duplicateObject(object) {
        var _local_2 = {};
        for (var _local_3 in object) {
            _local_2[_local_3] = object[_local_3];
        }
        return(_local_2);
    }
    function getPenguinStandardTime(epoch) {
        if (isNaN(epoch)) {
            local_time = new Date();
        } else {
            local_time = new Date(epoch);
        }
        local_time.setHours(local_time.getHours() - calculated_timezone_offset);
        local_time.setTime(local_time.valueOf() - calculated_time_difference);
        return(local_time);
    }
    function getCurrentServerEpochFromLocalTime() {
        var _local_1 = new Date();
        _local_1.setTime(_local_1.valueOf() - calculated_time_difference);
        return(_local_1.getTime());
    }
    function setupPenguinStandardTime(server_epoch) {
        server_time = new Date(server_epoch);
        local_time = new Date();
        calculated_time_difference = local_time.valueOf() - server_time.valueOf();
        var _local_1 = local_time.getTimezoneOffset() / 60;
        calculated_timezone_offset = serverTimezoneOffset - _local_1;
    }
    function getLocalEpoch() {
        var _local_1 = new Date();
        return(_local_1.valueOf());
    }
    function convertToStandardTime(military_time, delimiter, with_am_pm) {
        if (isValidString(military_time)) {
            if (isValidString(delimiter)) {
                var _local_2 = military_time.split(delimiter);
                var _local_1 = Number(_local_2[0]);
                var _local_6 = String(_local_2[1]);
                var _local_3 = "";
                if (with_am_pm) {
                    _local_3 = getLocalizedString("am");
                    if (_local_1 >= 12) {
                        _local_3 = getLocalizedString("pm");
                    }
                }
                if (_local_1 > 12) {
                    _local_1 = _local_1 - 12;
                }
                if (_local_1 != 0) {
                    if (String(_local_1).indexOf("0") == 0) {
                        _local_1 = Number(String(_local_1).substr(1, 1));
                    }
                } else {
                    _local_1 = 12;
                }
                _local_2[0] = _local_1;
                _local_2[1] = _local_6;
                _local_2.splice(2);
                return(_local_2.join(delimiter) + _local_3);
            }
            $d("[shell] convertToStandardTime() -> Not a valid string passed for delimiter! delimeter: " + delimiter);
        } else {
            $d("[shell] convertToStandardTime() -> Not a valid string passed for time! time: " + military_time);
        }
        return(military_time);
    }
    function convertMinutesToMilliseconds(min) {
        return(Math.round(min * ONE_MINUTE_IN_MILLISECONDS));
    }
    function convertMillisecondsToMinutes(mill) {
        return(Math.round(mill / ONE_MINUTE_IN_MILLISECONDS));
    }
    function convertMillisecondsToSeconds(mill) {
        return(Math.round(mill * ONE_SECOND_IN_MILLISECONDS));
    }
    function convertMillisecondsToDays(mill) {
        return(Math.round(mill / ONE_DAY_IN_MILLISECONDS));
    }
    function checkDelay(delay_obj) {
        var _local_1 = delay_obj.last_timestamp;
        var _local_2 = delay_obj.interval;
        if (!isNaN(_local_1)) {
            if (!isNaN(_local_2)) {
                var _local_3 = getLocalEpoch();
                var _local_4 = _local_3 - _local_1;
                if (_local_4 > _local_2) {
                    delay_obj.last_timestamp = _local_3;
                    return(true);
                }
                return(false);
            }
            $e("[shell] checkDelay() -> wait time is not a real number! wait_time: " + _local_2);
        } else {
            $e("[shell] checkDelay() -> last timestamp is not a real number! last_timestamp: " + _local_1);
        }
    }
    function handleUpdateEggTimer(event) {
        var _local_3 = Number(event[0]);
        var _local_1 = Number(event[1]);
        setEggTimerMinutesRemaining(_local_1);
    }
    function setEggTimerMinutesRemaining(minutesLeft) {
        if (minutesLeft == MINUTES_IN_DAY) {
            minutesLeft = -1;
        }
        var _local_1 = Object();
        _local_1.minutes_remaining = minutesLeft;
        updateListeners(EGG_TIMER_UPDATE, _local_1);
    }
    function sendJoinGame(game_name) {
        var _local_7 = game_name;
        if (getCurrentGameRoomId() == undefined) {
            loadGameStartTime = getTimer();
            var _local_1 = getGameCrumbsByName(game_name);
            for (var _local_2 in _local_1) {
            }
            last_known_xpos = getMyPlayerObject().x;
            last_known_ypos = getMyPlayerObject().y;
            var _local_5 = 0;
            var _local_4 = 0;
            if (_local_1 != undefined) {
                AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.NAVIGATION + "#") + AIRTOWER.JOIN_ROOM, [_local_1.room_id, _local_5, _local_4], "str", getCurrentServerRoomId());
            } else {
                $e("[shell] sendJoinGame() -> Tried to join a game which did not exist. game_name: " + game_name);
            }
        } else {
            $e("[shell] sendJoinGame() -> Tried to join a room while in a game room!", {error_code:PLAYER_IN_ROOM});
        }
    }
    function parseGameData(rawData) {
        var _local_3 = String(rawData).slice(0, -2);
        var _local_1 = cinqetdemi.JSON.parse(_local_3);
        for (var _local_2 in _local_1) {
        }
        return(_local_1);
    }
    function handleMPInstanceClose(cmdString) {
        if (cmdString != null) {
            runCommandsFromMP(cmdString);
        }
        if (_disconnecting == false) {
            startPlayerIdleCheck();
            var _local_2 = "st";
            var _local_1 = "ngps";
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (_local_2 + "#") + _local_1, [getMyPlayerId()], "str", getCurrentServerRoomId());
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.ROOM_HANDLER + "#") + AIRTOWER.GET_CURRENT_TOTAL_COIN, [], "str", getCurrentServerRoomId());
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.ITEM_HANDLER + "#") + AIRTOWER.NINJA_GET_INVENTORY_LIST, [], "str", getCurrentServerRoomId());
        }
    }
    function handleNameResubmit(msgData) {
        var _local_3 = playerModel.getMyPlayerObject();
        var _local_5 = _local_3.username;
        playerModel.changeMyUsername(msgData);
        var _local_2 = {};
        _local_2.Username = msgData.newName.toLowerCase();
        sendMyPlayerData(getMyPlayerObject());
        _local_3.username = _local_2.Username;
        getMyPlayerObject().loginDataRaw = msgData.loginDataRaw;
        getMyPlayerObject().confirmationHash = msgData.token;
        var _local_4 = com.clubpenguin.login.LocalData.getLoginPlayerObjectToSave();
        _local_4.Username = _local_2.Username;
        com.clubpenguin.login.LocalData.removeFromSavedPlayersByUsername(_local_5);
    }
    function runCommandsFromMP(cmdString) {
        var _local_4 = cmdString.split(",");
        for (var _local_5 in _local_4) {
            var _local_2 = _local_4[_local_5].split(":");
            var _local_3 = _local_2[0];
            var _local_1 = _local_2[1];
            switch (_local_3) {
                case MP_COMMAND_PLAY_VIDEO : 
                    handlePlayVideoFromMP(_local_1);
                    break;
                case MP_COMMAND_SHOW_STORY_VIEWER : 
                    handleShowStoryViewerFromMP();
                    break;
                case MP_COMMAND_BUY_POWER_CARDS : 
                    handleBuyPowerCardsFromMP();
                    break;
                case MP_COMMAND_IDLE_DISCONNECT : 
                    handleIdleDisconnectFromMP();
                    break;
            }
        }
    }
    function handlePlayVideoFromMP(videoToken) {
        var _local_1 = SHELL.getPath(videoToken);
        var _local_2 = {source:_local_1, autoPlay:true};
        INTERFACE.showContentOnRoomInitiated("videoPlayer", null, undefined, _local_2, true);
    }
    function handleShowStoryViewerFromMP() {
        var _local_1 = {playerHasTuskCape:SHELL.isItemInMyInventory(INTERFACE.TUSK_CAPE_ITEM), initialState:"snowPanel"};
        INTERFACE.showContentOnRoomInitiated("ninjaProgress", null, undefined, _local_1, true);
    }
    function handleBuyPowerCardsFromMP() {
        INTERFACE.catalogOpeningPage = NINJA_CATALOGUE_POWERCARDS_PAGE;
        INTERFACE.showContentOnRoomInitiated("ninja_catalogue", null, undefined, null, true);
    }
    function handleIdleDisconnectFromMP() {
        idleDisconnect();
        _disconnecting = true;
    }
    function handleJoinGame(obj) {
        if (getCurrentGameRoomId() == undefined) {
            var _local_2 = Number(obj.shift());
            var _local_1 = Number(obj.shift());
            if (getCurrentRoomId() != _local_1) {
                clearPlayerJumpingMap();
                setLastServerRoomId(getCurrentServerRoomId());
                setCurrentServerRoomId(_local_2);
                my_game = getGameCrumbsById(_local_1);
                my_game.smart_room_id = _local_2;
                if (my_game == undefined) {
                    $e("[shell] handleJoinGame() -> Tried to join an invalid game: " + obj);
                    return(undefined);
                }
                setLastRoomId(getCurrentRoomId());
                setLastWorldRoomId(getCurrentRoomId());
                setCurrentRoomId(_local_1);
                setIsRoomIgloo(false);
                updateListeners(JOIN_GAME, null);
                trackMiniGame(my_game.name);
                playerJoinedGame.dispatch();
            } else {
                $e("[shell] handleJoinGame() -> Tried to join a room while your already in it! room_id: " + _local_1);
            }
        } else {
            $e("[shell] handleJoinGame() -> Tried to join a room while in a game room!", {error_code:PLAYER_IN_ROOM});
        }
    }
    function sendLeaveNonBlackHoleGame() {
        AIRTOWER.send(AIRTOWER.PLAY_EXT, "bh#" + AIRTOWER.LEAVE_NON_BLACK_HOLE_GAME, [getCurrentRoomId()], "str", getCurrentServerRoomId());
    }
    function getGameCrumbsById(id) {
        var _local_1 = getGameCrumbs();
        for (var _local_3 in _local_1) {
            if (_local_1[_local_3].room_id == id) {
                return(_local_1[_local_3]);
            }
        }
        $e("[shell] getGameCrumbsById() -> Could not find the game in the crumbs. id: " + id);
        return(undefined);
    }
    function getGameCrumbsKeyById(id) {
        var _local_1 = getGameCrumbs();
        for (var _local_3 in _local_1) {
            if (_local_1[_local_3].room_id == id) {
                return(String(_local_3));
            }
        }
        $e("[shell] getGameCrumbsById() -> Could not find the game in the crumbs. id: " + id);
        return(undefined);
    }
    function getGameCrumbsByName(name) {
        var _local_1 = getGameCrumbs()[name];
        if (_local_1 == undefined) {
            $e("[shell] getGameCrumbsByName() -> Could not find the game in the crumbs. name: " + name);
        }
        return(_local_1);
    }
    function sendGameOver(score) {
        if (!isNaN(score)) {
            if ((score >= 0) && (score < MAX_GAME_SCORE)) {
                AIRTOWER.send(AIRTOWER.GAME_EXT, AIRTOWER.GAME_OVER, [score], "str", getCurrentServerRoomId());
            } else {
                var _local_3 = getMyPlayerTotalCoins();
                var _local_1 = new Object();
                _local_1.total = _local_3;
                _local_1.earned = 0;
                _local_1.is_table = false;
                updateListeners(GAME_OVER, _local_1);
            }
        } else {
            $e("[game] sendGameOver() -> Score is not a valid number");
        }
    }
    function handleGameOver(params) {
        var _local_13 = Number(params.shift());
        var _local_7 = Number(params.shift());
        var _local_8 = getMyPlayerTotalCoins();
        var _local_5 = Number(_local_7 - _local_8);
        if (_local_5 < 0) {
            _local_5 = 0;
        }
        var _local_9 = params.shift();
        var _local_3 = _local_9.split("|");
        var _local_4 = new Array();
        if (_local_9.length > 0) {
            var _local_1 = 0;
            while (_local_1 < _local_3.length) {
                _local_4.push(Number(_local_3[_local_1]));
                _local_1++;
            }
        }
        var _local_11 = Number(params.shift());
        var _local_10 = Number(params.shift());
        var _local_12 = Number(params.shift());
        var _local_2 = new Object();
        _local_2.total = _local_7;
        _local_2.earned = _local_5;
        _local_2.is_table = false;
        _local_2.totalNumberOfStamps = _local_12;
        _local_2.gameName = getGameObject().name;
        _local_2.isCardJitsu = isCardJitsuEndGameScreen;
        _local_2.room_id = getGameObject().room_id;
        _local_2.gameKey = getGameObject()["key"];
        if (!isCardJitsuEndGameScreen) {
            _local_2.stampIds = _local_4;
            _local_2.numberOfGameStamps = _local_10;
            _local_2.totalNumberOfGameStampsEarned = _local_11;
        } else {
            _local_2.stampIds = cardJitsuEndGameScreenVars.stampIds;
            _local_2.numberOfGameStamps = cardJitsuEndGameScreenVars.numberOfGameStamps;
            _local_2.totalNumberOfGameStampsEarned = cardJitsuEndGameScreenVars.totalNumberOfGameStampsEarned;
            isCardJitsuEndGameScreen = false;
        }
        if ((((((_local_2.room_id == "900") || (_local_2.room_id == "909")) || (_local_2.room_id == "956")) || (_local_2.room_id == "950")) || (_local_2.room_id == "963")) || (_local_2.room_id == "121")) {
            _local_2.isBlackHoleGame = false;
        } else {
            _local_2.isBlackHoleGame = true;
        }
        if (getCurrentGameRoomId() != undefined) {
            _local_2.is_table = true;
        }
        setMyPlayerTotalCoins(_local_7);
        endGameParams = _local_2;
        createEndGameParams();
        openAS3MinigameEndScreens();
    }
    function isTreasureHuntGameRoomId(roomId) {
        var _local_1 = 1;
        while (_local_1 <= 8) {
            if (roomId == ("12" + _local_1)) {
                return(true);
            }
            _local_1++;
        }
        return(false);
    }
    function createEndGameParams() {
        if (endGameParams == null) {
            return(undefined);
        }
        var _local_5 = _global.getCurrentEngine();
        var _local_2 = new Object();
        _local_2.roomName = _local_5.getGameOverRoom();
        if (_local_2.roomName == undefined) {
            var _local_3 = getRoomNameById(getLastWorldRoomId());
            if (_local_3 != undefined) {
                _local_2.roomName = _local_3;
            } else {
                _local_2.roomName = "igloo";
            }
        }
        _local_2.xPos = 0;
        _local_2.yPos = 0;
        if (endGameParams.is_table) {
            endGameParams.gameName = _local_5.getActiveTable().name;
            var _local_4 = _global.getCurrentShell();
            var _local_8 = _local_4.getCurrentRoomId();
            var _local_6 = _local_4.getRoomNameById(_local_8);
            _local_2.roomName = _local_6;
        }
        endGameParams.gameOverRoomData = _local_2;
        var _local_7 = getStampManager().myStampsByIds;
        endGameParams.ownedStampIds = _local_7;
    }
    function openAS3MinigameEndScreens() {
        var _local_2 = new Object();
        _global.getCurrentShell().sendOpenAS3Module("minigame_end_screens", _local_2, {modalBackgroundEnabled:false, hideLoadingDialog:true});
    }
    function sendEndGameDataToAS3() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_SEND_AS2_END_GAME_DATA, endGameParams:endGameParams});
        endGameParams = null;
    }
    function startGameMusic() {
        var _local_2 = getCurrentRoomId();
        var _local_1 = getGameCrumbsById(_local_2);
        if (_local_1.music_id != undefined) {
            startMusicById(_local_1.music_id);
        } else {
            $e("[shell] startGameMusic() -> Could not find the music ID in the game crumbs. music_id: " + room.music_id);
        }
    }
    function stopGameMusic() {
        stopMusic();
    }
    function getGameObject() {
        return(my_game);
    }
    function getGameCrumbs() {
        return(game_crumbs);
    }
    function setGameCrumbs(obj) {
        var _local_1;
        for (_local_1 in obj) {
            obj[_local_1].path = getGamesPath() + obj[_local_1].path;
            obj[_local_1]["key"] = _local_1;
        }
        game_crumbs = obj;
    }
    function setPhoneGameCrumbs(crumbs) {
        phoneGameCrumbs = crumbs;
    }
    function getPhoneGameCrumbs() {
        return(phoneGameCrumbs);
    }
    function logLoadGameTime(loadGameEndTime) {
        var _local_6 = _global.getCurrentEngine();
        var _local_4 = (loadGameEndTime - loadGameStartTime) / 1000;
        var _local_5 = "load.game." + my_game.room_id;
        if (my_game.room_id == undefined) {
            var _local_2;
            var _local_3 = SHELL.getCurrentGameName();
            switch (_local_3) {
                case "four" : 
                    _local_2 = 9991;
                    break;
                case "mancala" : 
                    _local_2 = 9992;
                    break;
                case "treasurehunt" : 
                    _local_2 = 9993;
                    break;
            }
        }
    }
    function handleUpdateTableById(obj) {
        var _local_3 = obj.shift();
        var _local_1 = new Object();
        _local_1.table_id = Number(obj[0]);
        _local_1.num_players = Number(obj[1]);
        updateListeners(UPDATE_TABLE, _local_1);
    }
    function getTablesPopulationById(arr) {
        if (arr.length > 0) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.TABLE_HANDLER + "#") + AIRTOWER.GET_TABLE_POPULATION, arr, "str", getCurrentServerRoomId());
        } else {
            $e("[shell] getTablesPopulationById()");
        }
    }
    function handleGetTablesPopulationById(obj) {
        var _local_7 = obj.shift();
        var _local_3;
        var _local_1;
        for (_local_3 in obj) {
            _local_1 = obj[_local_3].split("|");
            handleUpdateTableById({smart_id:_local_7, table_id:_local_1[0], num_players:_local_1[1]});
        }
    }
    function sendJoinTableById(id, name) {
        if (!isNaN(id)) {
            loadGameStartTime = getTimer();
            var _local_2;
            switch (name) {
                case "four" : 
                    _local_2 = 9991;
                    current_game_name = name;
                    break;
                case "mancala" : 
                    _local_2 = 9992;
                    current_game_name = name;
                    break;
                case "treasurehunt" : 
                    _local_2 = 9993;
                    current_game_name = name;
                    break;
            }
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.TABLE_HANDLER + "#") + AIRTOWER.JOIN_TABLE, [id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] joinTableById() -> Id was not a real number: " + id);
        }
    }
    function getCurrentGameName() {
        return(current_game_name);
    }
    function handleSendJoinTableById(obj) {
        var _local_3 = obj.shift();
        setCurrentGameRoomId(_local_3);
        var _local_1 = new Object();
        _local_1.table_id = Number(obj[0]);
        _local_1.seat_id = Number(obj[1]);
        updateListeners(JOIN_TABLE, _local_1);
    }
    function sendLeaveTable() {
        if (getCurrentGameRoomId() != undefined) {
            setCurrentGameRoomId(undefined);
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.TABLE_HANDLER + "#") + AIRTOWER.LEAVE_TABLE, [], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] joinTableById() -> Id was not a real number: " + id);
        }
    }
    function handleLeaveTable() {
        updateListeners(LEAVE_TABLE, undefined);
    }
    function setCurrentGameRoomId(id) {
        game_room_smart_id = id;
    }
    function getCurrentGameRoomId() {
        return(game_room_smart_id);
    }
    function updateWaddleList(waddle_id, seat, nickname) {
        if (!isNaN(waddle_id)) {
            if (!isValidString(nickname)) {
                nickname = undefined;
            }
            var _local_2 = getWaddleById(waddle_id);
            if (_local_2 == undefined) {
                var _local_6 = getWaddleList();
                _local_6[waddle_id] = new Object();
                _local_2 = getWaddleById(waddle_id);
                _local_2.player_list = new Array();
            }
            if (_local_2 != undefined) {
                _local_2.waddle_id = Number(waddle_id);
                if (!isNaN(seat)) {
                    _local_2.player_list[seat] = nickname;
                } else {
                    var _local_3 = _local_2.player_list.length;
                    var _local_1 = 0;
                    while (_local_1 < _local_3) {
                        _local_2.player_list[_local_1] = undefined;
                        _local_1++;
                    }
                }
            } else {
                $e("[shell] updateWaddleList() -> Could not get Waddle. It is undefined! waddle_id: " + waddle_id);
            }
        } else {
            $e("[shell] updateWaddleList() -> Waddle id is not a real number! waddle_id: " + waddle_id);
        }
    }
    function startWaddle(obj) {
        loadGameStartTime = getTimer();
        var _local_3 = obj.slice(0, 9);
        var _local_4 = obj.shift();
        var _local_1 = new Array();
        _local_1.push(Number(obj[0]));
        _local_1.push(Number(obj[1]));
        _local_1.push(Number(obj[2]));
        AIRTOWER.sendAck("sw", _local_1);
        if ((((_local_1[0] == CARD_JITSU_SERVER_ROOM_ID) || (_local_1[0] == CARD_JITSU_FIRE_SERVER_ROOM_ID)) || (_local_1[0] == CARD_JITSU_WATER_SERVER_ROOM_ID)) || (_local_1[0] == IGLOO_SERVER_ROOM_ID)) {
            if (Number(obj[obj.length - 1]) == 1) {
                AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.WADDLE + "#") + AIRTOWER.SEND_WADDLE, _local_1, "str", getCurrentServerRoomId());
            }
            return(undefined);
        }
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.WADDLE + "#") + AIRTOWER.SEND_WADDLE, _local_1, "str", getCurrentServerRoomId());
    }
    function startWaddleFromWidget(obj) {
        loadGameStartTime = getTimer();
        var _local_3 = obj.slice(0, 12);
        var _local_4 = obj.shift();
        var _local_1 = new Array();
        _local_1.push(Number(obj[0]));
        _local_1.push(Number(obj[1]));
        _local_1.push(Number(obj[2]));
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.WADDLE + "#") + AIRTOWER.SEND_WADDLE, _local_1, "str", getCurrentServerRoomId());
    }
    function handleJoinWaddle(obj) {
        handleJoinGame(obj);
    }
    function getWaddlePopulationById(arr) {
        if (arr.length > 0) {
            AIRTOWER.send(AIRTOWER.GAME_EXT, AIRTOWER.GET_WADDLE_POPULATION, arr, "str", getCurrentServerRoomId());
        } else {
            $e("[shell] getWaddlePopulationById()");
        }
    }
    function handleGetWaddlesPopulationById(obj) {
        var _local_8 = obj.shift();
        var _local_5;
        var _local_3;
        var _local_6;
        var _local_1;
        var _local_2;
        for (_local_5 in obj) {
            _local_1 = 0;
            _local_3 = obj[_local_5].split("|");
            _local_6 = _local_3[1].split(",");
            _local_2 = _local_6.length;
            while (_local_1 < _local_2) {
                if (!isValidString(_local_6[_local_1])) {
                    _local_6[_local_1] = undefined;
                }
                _local_1++;
            }
            handleUpdateWaddlePopulationById({waddle_id:_local_3[0], player_list:_local_6});
        }
    }
    function handleUpdateWaddlePopulationById(obj) {
        var _local_3 = obj.player_list.length;
        var _local_1 = 0;
        while (_local_1 < _local_3) {
            updateWaddleList(obj.waddle_id, _local_1, obj.player_list[_local_1]);
            _local_1++;
        }
        updateListeners(UPDATE_WADDLE, obj);
    }
    function handleUpdateWaddle(obj) {
        var _local_6 = obj.shift();
        var _local_2 = Number(obj[0]);
        var _local_5 = Number(obj[1]);
        var _local_4 = obj[2];
        updateWaddleList(_local_2, _local_5, _local_4);
        var _local_3 = getWaddleById(_local_2);
        updateListeners(UPDATE_WADDLE, _local_3);
    }
    function sendJoinWaddleById(id) {
        if (!isNaN(id)) {
            AIRTOWER.send(AIRTOWER.GAME_EXT, AIRTOWER.JOIN_WADDLE, [id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] sendJoinWaddleById() -> Id was not a real number: " + id);
        }
    }
    function handleSendJoinWaddleById(obj) {
        var _local_2 = obj.shift();
        var _local_1 = Number(obj[0]);
        AIRTOWER.sendAck("jx", ["seat_id=" + _local_1]);
        updateListeners(JOIN_WADDLE, {seat_id:_local_1});
    }
    function sendLeaveWaddle() {
        AIRTOWER.send(AIRTOWER.GAME_EXT, AIRTOWER.LEAVE_WADDLE, ["manual_leave"], "str", getCurrentServerRoomId());
    }
    function handleLeaveWaddle() {
        updateListeners(LEAVE_WADDLE, undefined);
    }
    function getWaddleList() {
        return(waddle_list);
    }
    function setWaddleList(arr) {
        waddle_list = arr;
    }
    function getWaddleById(id) {
        if (!isNaN(id)) {
            var _local_2 = getWaddleList();
            if (_local_2[id] != undefined) {
                return(_local_2[id]);
            }
            $e("[shell] getWaddleById() -> Waddle is undefined: waddle_id: " + id);
            return(undefined);
        }
        $e("[shell] getWaddleById() -> Id was not a real number: " + id);
        return(undefined);
    }
    function setLastServerRoomId(id) {
        last_server_room_id = id;
    }
    function getLastServerRoomId() {
        return(last_server_room_id);
    }
    function setCurrentServerRoomId(id) {
        current_server_room_id = id;
        if (!visitedThisRoom(id)) {
            roomIds_visited.push(id);
        }
    }
    function visitedThisRoom(rommId) {
        var _local_1 = 0;
        while (_local_1 < roomIds_visited.length) {
            if (roomIds_visited[_local_1] == rommId) {
                return(true);
            }
            _local_1++;
        }
        return(false);
    }
    function getCurrentServerRoomId() {
        if (current_server_room_id != undefined) {
            return(current_server_room_id);
        }
        return(-1);
    }
    function setCurrentCrumbRoomId(id) {
        current_crumb_room_id = id;
    }
    function getCurrentCrumbRoomId() {
        if (current_crumb_room_id != undefined) {
            return(current_crumb_room_id);
        }
        return(-1);
    }
    function getRoomCrumbsById(id) {
        var _local_1 = getRoomCrumbs();
        for (var _local_3 in _local_1) {
            if (_local_1[_local_3].room_id == id) {
                return(_local_1[_local_3]);
            }
        }
        $e("[shell] getRoomCrumbsById() -> Could not find the room in the crumbs. id: " + id);
        return(undefined);
    }
    function isPlayerMemberById(id) {
        var _local_2 = getPlayerList();
        var _local_3 = _local_2.length;
        var _local_1 = 0;
        while (_local_1 < _local_3) {
            if (_local_2[_local_1].player_id == id) {
                return(_local_2[_local_1].is_member);
            }
            _local_1++;
        }
        $e("[shell] isPlayerMemberById() -> Player id not found in room. player_id: " + player_id);
        return(undefined);
    }
    function getNicknameById(player_id) {
        var _local_2;
        if (playerModel.playerExists(player_id)) {
            return(com.clubpenguin.model.vo.PlayerVO(playerModel.getPlayerObjectById(player_id)).nickname);
        }
        $e("[shell] getPlayerNameFromId() -> Player id not found in room. player_id: " + player_id);
        return(_local_2);
    }
    function getRoomCrumbsByName(name) {
        var _local_2 = getRoomCrumbs();
        var _local_1 = _local_2[name];
        if (_local_1 == undefined) {
            $e("[shell] getRoomCrumbsByName() -> Could not find the room in the crumbs. name: " + name);
        }
        return(_local_1);
    }
    function getRoomNameById(id) {
        var _local_1 = getRoomCrumbs();
        for (var _local_3 in _local_1) {
            if (_local_1[_local_3].room_id == id) {
                return(_local_3);
            }
        }
        $e("[shell] getRoomNameById() -> Could not find the room in the crumbs. id: " + id);
        return(undefined);
    }
    function sendJoinRoom(room_name, xpos, ypos, startTime) {
        var _local_2 = getRoomCrumbsByName(room_name);
        isLastJoinedRoomIgloo = false;
        if (getCurrentRoomId() == _local_2.room_id) {
            SHELL.currentRoomService.unpauseRoomView(false);
            return(undefined);
        }
        SHELL.currentRoomService.unpauseRoomView(true);
        loadRoomStartTime = (startTime ? (startTime) : (getTimer()));
        if (SHELL.getIsGameQueWidgetOpen() == true) {
            ENGINE.__cardJitsuWidget.cleanUp();
        }
        if (getCurrentGameRoomId() == undefined) {
            if ((getLastRoomId() == 320) || (getLastRoomId() == 321)) {
                if (((((!isItemInMyInventory(AMULET_ITEM_ID)) || (!isItemInMyInventory(STARTER_DECK_ITEM_ID))) || (!isItemInMyInventory(FIRE_DECK_ITEM_ID))) || (!isItemInMyInventory(WATER_DECK_ITEM_ID))) || (!isItemInMyInventory(SNOW_DECK_ITEM_ID))) {
                    room_name = DOJO_EXT_SOLO_ROOM_NAME;
                    xpos = DOJO_EXT_SOLO_START_X;
                    ypos = DOJO_EXT_SOLO_START_Y;
                    _local_2 = getRoomCrumbsByName(room_name);
                }
                isDojo = true;
            }
            var _local_10 = room_name.indexOf("party") == 0;
            if (_local_2.is_member && (!isMyPlayerMember())) {
                var _local_7 = _global.getCurrentInterface();
                _local_7.showContent(("oops_" + _local_2.room_key) + "_room", null, null, {oopsTag:_local_2.room_key + "_room"});
                return(undefined);
            }
            if (_local_2.is_member && (isMyPlayerMember())) {
                SHELL.updateListeners(com.clubpenguin.shell.events.MembershipEvent.MEMBER_ONLY_ACTIVITY, new com.clubpenguin.shell.events.MembershipEvent(com.clubpenguin.shell.events.MembershipEvent.MEMBER_ONLY_ACTIVITY, "joinedMemberOnlyRoom", room_name));
            }
            if ((room_name != undefined) && (getCurrentRoomId() != _local_2.room_id)) {
                if (_local_2 != undefined) {
                    if (ENGINE.playerHostedRoomType == com.clubpenguin.world.rooms.common.RoomConstants.PLAYER_HOSTED_ROOM_IGLOO) {
                        getGlobalIgloo().destroy();
                    } else if (ENGINE.playerHostedRoomType == com.clubpenguin.world.rooms.common.RoomConstants.PLAYER_HOSTED_ROOM_BACKYARD) {
                        backyardMovieClip.backyard.backyardContext.destroy();
                        backyardMovieClip = null;
                    }
                    var _local_6 = getMyPlayerObject();
                    last_known_xpos = _local_6.x;
                    last_known_ypos = _local_6.y;
                    if (isNaN(xpos)) {
                        xpos = 0;
                    }
                    if (isNaN(ypos)) {
                        ypos = 0;
                    }
                    _local_6.x = xpos;
                    _local_6.y = ypos;
                    showLoading();
                    _categoryId = null;
                    _mapId = null;
                    _triggerId = null;
                    clearTriggers();
                    SHELL.sendMapTracking(room_name);
                    sendAS3LeavingRoom();
                    ENGINE.avatarManager.delayTransformations();
                    ENGINE.playerHostedRoomType = "";
                    AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.NAVIGATION + "#") + AIRTOWER.JOIN_ROOM, [_local_2.room_id, xpos, ypos], "str", getCurrentServerRoomId());
                } else {
                    $e("[shell] sendJoinRoom() -> Tried to join a room which did not exist in crumbs. room_name: " + room_name);
                }
            } else {
                $e("[shell] sendJoinRoom() -> Tried to join a room which your already in!: room_id: " + _local_2.room_id);
            }
        } else {
            $e("[shell] sendJoinRoom() -> Tried to join a room while in a game room!", {error_code:PLAYER_IN_ROOM});
        }
    }
    function sendJoinRoomFromMap(room_name, xpos, ypos, categoryId, mapId, triggerId) {
        var _local_2 = getTimer();
        if (SHELL.getIsGameQueWidgetOpen() == true) {
            SHELL.setJoinGameFromIgloo(false, "");
            ENGINE.getCardJitsuGameQueWidget().cleanUp();
        }
        var _local_1 = getRoomCrumbsByName(room_name);
        if (getCurrentRoomId() == _local_1.room_id) {
            resetTriggerHideCount();
            sendMapAction(categoryId, mapId, triggerId, true);
        } else {
            sendJoinRoom(room_name, xpos, ypos, _local_2);
        }
        _categoryId = categoryId;
        _mapId = mapId;
        _triggerId = triggerId;
    }
    function sendJoinRoomFromPostcard(postCardID) {
        switch (postCardID) {
            case 47 : 
            case 112 : 
                sendJoinRoom("agentlobbymulti", 0, 0);
                break;
            default : 
                Log.error("[SHELL - room] sendJoinRoomFromPostcard unknown postcard ID: " + postCardID);
        }
        closeMail();
    }
    function handleJoinRoom(obj) {
        if (SHELL.getIsGameQueWidgetOpen()) {
            SHELL.setJoinGameFromIgloo(false, "");
        }
        for (var _local_3 in obj) {
        }
        if (getCurrentGameRoomId() == undefined) {
            var _local_8 = obj[1];
            if (_local_8 < 1000) {
                ENGINE.playerHostedRoomType = "";
                igloo_player_id = null;
            }
            clearPlayerJumpingMap();
            if (_local_8 == 112) {
                _localLoginServerData.autoLogin = true;
            }
            if (ENGINE.playerHostedRoomType == "") {
                loadRoomStartTime = getTimer();
                playerModel.clear(true);
                handleJoinWorldRoom(obj);
                playerJoinedRoom.dispatch();
                resetTriggerHideCount();
                sendMapAction(_categoryId, _mapId, _triggerId, false);
            } else if (ENGINE.playerHostedRoomType == com.clubpenguin.world.rooms.common.RoomConstants.PLAYER_HOSTED_ROOM_IGLOO) {
                clearTriggers();
                checkForFriendsInteractionPoint();
                var _local_11 = Number(obj.shift());
                var _local_12 = Number(obj.shift());
                lastJoinedIglooPlayerId = getIglooPlayerID();
                SHELL.setJoinGameFromIgloo(false, _local_12);
                if (!getGlobalIgloo().iglooContext.isInitialized()) {
                    var _local_5 = new Object();
                    _local_5.name = "igloo";
                    _local_5.path = (getClientPath() + IGLOO_PATH) + ".swf";
                    var _local_10 = [];
                    for (var _local_4 in obj) {
                        var _local_2 = com.clubpenguin.model.vo.PlayerVO(makePlayerObjectFromString(obj[_local_4]));
                        _local_2.is_in_room = true;
                        _local_10.push(_local_2);
                    }
                    var _local_7 = getMyPlayerObject();
                    lastJoinedIglooPlayerId = _local_7.player_id;
                    setIglooPlayerID(_local_7.player_id);
                    ENGINE.loadRoom(_local_5, com.clubpenguin.world.rooms.common.RoomConstants.PLAYER_HOSTED_ROOM_IGLOO, {smartID:_local_11, roomID:_local_12, players:_local_10});
                }
                updateListeners(JOIN_PLAYER_IGLOO, null);
                _trackerAS2.sendToAS3StartAssetLoad("load.igloo");
            } else if (ENGINE.playerHostedRoomType == com.clubpenguin.world.rooms.common.RoomConstants.PLAYER_HOSTED_ROOM_BACKYARD) {
                clearTriggers();
                checkForFriendsInteractionPoint();
                var _local_6 = new Object();
                _local_6.name = "yard";
                _local_6.path = (getClientPath() + BACKYARD_PATH) + ".swf";
                var _local_11 = Number(obj.shift());
                var _local_12 = Number(obj.shift());
                var _local_10 = [];
                for (var _local_4 in obj) {
                    var _local_2 = com.clubpenguin.model.vo.PlayerVO(makePlayerObjectFromString(obj[_local_4]));
                    _local_2.is_in_room = true;
                    _local_10.push(_local_2);
                }
                previousIglooOwnerID = 0;
                ENGINE.loadRoom(_local_6, com.clubpenguin.world.rooms.common.RoomConstants.PLAYER_HOSTED_ROOM_BACKYARD, {smartID:_local_11, roomID:_local_12, players:_local_10});
            }
        } else {
            $e("[shell] sendJoinRoom() -> Tried to join a room while in a game room!", {error_code:PLAYER_IN_ROOM});
            ENGINE.avatarManager.expirationManager.doDelayedTransformations();
            loadRoomStartTime = 0;
        }
        AIRTOWER.getServer().enableCommands();
    }
    function checkForFriendsInteractionPoint() {
        var _local_2 = 0;
        while (_local_2 < ROSTER.buddies.length) {
            var _local_1 = ROSTER.buddies[_local_2];
            if (Number(_local_1.player_id) == getIglooPlayerID()) {
                sendInteraction(_local_1.swid, IGLOO_INTERACTION);
            }
            _local_2++;
        }
    }
    function handleRefreshRoom(obj) {
        handleRefreshWorldRoom(obj);
    }
    function handleJoinWorldRoom(obj) {
        if (getCurrentGameRoomId() == undefined) {
            var _local_6 = obj.shift();
            var _local_5 = obj.shift();
            setCurrentServerRoomId(_local_6);
            my_room = getRoomCrumbsById(_local_5);
            if (my_room != undefined) {
                if (!hasOpenedMap()) {
                    showMapDockArrow();
                } else {
                    hideMapDockArrow();
                }
                var _local_4 = new Array();
                var _local_3;
                setCurrentCrumbRoomId(my_room.room_id);
                var _local_1;
                for (_local_3 in obj) {
                    _local_1 = makePlayerObjectFromString(obj[_local_3]);
                    _local_1.is_in_room = true;
                    _local_4.push(_local_1);
                }
                if (getCurrentRoomId() == undefined) {
                    setCurrentRoomId(_local_5);
                }
                if (ENGINE.isPlayerLookingForFieldOp()) {
                    if (getFieldOp().roomID == _local_5) {
                        ENGINE.addEPFFieldOpCheckToPlayerMoved();
                    } else if (getFieldOp().roomID == getCurrentRoomId()) {
                        ENGINE.removeEPFFieldOpCheckToPlayerMoved();
                    }
                }
                setLastRoomId(getCurrentRoomId());
                setLastWorldRoomId(getCurrentRoomId());
                setCurrentRoomId(_local_5);
                playerModel.playerCollection.add(_local_4);
                startChatLog();
                setIsRoomIgloo(false);
                trackRoomJoin(getRoomObject().room_key);
                updateListeners(JOIN_ROOM, null);
            } else {
                ENGINE.avatarManager.expirationManager.doDelayedTransformations();
                $e("[shell] handleJoinRoom() -> Tried to join a room which did not exist in crumbs. Obj: " + obj);
            }
        } else {
            ENGINE.avatarManager.expirationManager.doDelayedTransformations();
            $e("[shell] sendJoinRoom() -> Tried to join a room while in a game room!", {error_code:PLAYER_IN_ROOM});
        }
    }
    function handleRefreshWorldRoom(obj) {
        var _local_8 = obj.shift();
        var _local_7 = obj.shift();
        my_room = getRoomCrumbsById(_local_7);
        var _local_6 = new Array();
        var _local_5;
        var _local_3;
        for (_local_5 in obj) {
            _local_3 = makePlayerObjectFromString(obj[_local_5]);
            _local_3.is_in_room = true;
            _local_6.push(_local_3);
        }
        var _local_2 = getPlayerList();
        var _local_1 = 0;
        while (_local_1 < _local_2.length) {
            if (_local_2[_local_1].puffle_id > 0) {
                ENGINE.puffleAvatarController.detachPuffle(_local_2[_local_1].puffle_id);
            }
            _local_1++;
        }
        playerModel.clear(true);
        playerModel.playerCollection.add(_local_6);
        updateListeners(REFRESH_ROOM, null);
    }
    function handleBattleRoomCoundown(obj) {
        var _local_3 = obj.shift();
        var _local_1 = {};
        _local_1.secondsUntilBattle = Number(obj[0]);
        _local_1.totalTime = Number(obj[1]);
        _local_1.battleEndTime = Number(obj[2]);
        battleInfo.secondsUntilBattle = _local_1.secondsUntilBattle;
        battleInfo.totalTime = _local_1.totalTime;
        battleInfo.battleEndTime = _local_1.battleEndTime;
        updateListeners(BATTLE_ROOM_COUNDOWN, _local_1);
    }
    function handleBattleRoomUpdate(obj) {
        var _local_4 = obj.shift();
        var _local_1 = {};
        _local_1.isBattleActive = Boolean(Number(obj[0]));
        var _local_2 = String(obj[1]).split("|");
        _local_1.battleObjectID = Number(_local_2[0]);
        _local_1.battleObjectHealth = Number(_local_2[1]);
        battleInfo.isBattleActive = _local_1.isBattleActive;
        battleInfo.battleObjectID = _local_1.battleObjectID;
        battleInfo.battleObjectHealth = _local_1.battleObjectHealth;
        updateListeners(BATTLE_ROOM_UPDATE, _local_1);
    }
    function handleBattleRoomSnowballHit(obj) {
    }
    function sendBattleRoomTargetHit(x, y) {
        if (isNaN(x) || (isNaN(y))) {
            return(undefined);
        }
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.BATTLE_ROOM_HIT_SNOWBALL + "#") + AIRTOWER.BATTLE_ROOM_THROW_SNOWBALL, [x, y], "str", getCurrentServerRoomId());
    }
    function startRoomMusic() {
        if (ENGINE.isRoomMyBackyard()) {
            return(undefined);
        }
        var _local_1;
        if (getIsRoomIgloo()) {
            _local_1 = getIglooMusicId();
        } else {
            var _local_3 = getCurrentCrumbRoomId();
            var _local_2 = getRoomCrumbsById(_local_3);
            _local_1 = _local_2.music_id;
        }
        if (_local_1 != undefined) {
            startMusicById(_local_1);
            updateListeners(UPDATE_MUSIC, null);
        } else {
            $e("[shell] startRoomMusic() -> Could not find the music ID in the room crumbs. musicId: " + _local_1);
        }
    }
    function getMusicURL(musicID) {
        musicID = Number(musicID);
        if (isNaN(musicID) || (musicID <= 0)) {
            return("");
        }
        return(((getPath("music") + musicID) + ".swf") + _localLoginServerData.getContentCacheVersion());
    }
    function startMusicById(musicID) {
        var _local_1 = getMusicURL(musicID);
        MUSIC.playMusicURL(_local_1);
    }
    function stopMusic() {
        MUSIC.stopMusic();
    }
    function toggleRoomMusic(musicOn) {
        if (musicOn) {
            startRoomMusic();
        } else {
            stopMusic();
        }
    }
    function setCurrentRoomId(room_id) {
        current_room_id = room_id;
        if (!visitedThisRoom(room_id)) {
            roomIds_visited.push(room_id);
        }
    }
    function getLastRoomId() {
        return(last_room_id);
    }
    function setLastRoomId(room_id) {
        last_room_id = room_id;
    }
    function getLastWorldRoomId() {
        return(last_world_room_id);
    }
    function setLastWorldRoomId(room_id) {
        if ((getRoomNameById(room_id) != undefined) || (getIsRoomIgloo() != false)) {
            last_world_room_id = room_id;
        }
    }
    function getCurrentRoomId() {
        return(current_room_id);
    }
    function sendJoinLastRoom() {
        if (getCurrentGameRoomId() == undefined) {
            var _local_3 = 0;
            var _local_2 = 0;
            if (getLastRoomId() != undefined) {
                if (!isNaN(last_known_xpos)) {
                    _local_3 = last_known_xpos;
                }
                if (!isNaN(last_known_ypos)) {
                    _local_2 = last_known_ypos;
                }
                var _local_4 = getLastRoomId();
                var _local_1 = getRoomNameById(_local_4);
                if (_local_1 != undefined) {
                    sendJoinRoom(_local_1, _local_3, _local_2);
                } else {
                    sendJoinPlayerIgloo(lastJoinedIglooPlayerId);
                }
            } else {
                $e("[shell] sendJoinLastRoom() -> Last room is undefined.");
            }
        } else {
            $e("[shell] sendJoinRoom() -> Tried to join a room while in a game room!", {error_code:PLAYER_IN_ROOM});
        }
    }
    function getRoomObject() {
        var _local_1 = getCurrentRoomId();
        return(getRoomCrumbsById(_local_1));
    }
    function getPlayerObjectFromRoomById(player_id) {
        return(playerModel.getPlayerObjectById(player_id));
    }
    function handleAddPlayerToRoom(serverResponse) {
        var _local_4 = getRoomObject();
        var _local_3 = serverResponse.shift();
        if (_local_3 == getCurrentServerRoomId()) {
            var _local_1 = makePlayerObjectFromString(serverResponse[0]);
            _local_1.isJumping = (serverResponse[1] != undefined) && (serverResponse[1] == "jmp");
            _local_1.is_in_room = true;
            if (isPlayerJumping(_local_1.player_id)) {
                ENGINE.onJumpToPlayerInAnimationComplete(null, _local_1.player_id);
            }
            _local_1.thrownSnowballInCurrentRoom = false;
            _local_1.emoteIDDisplayedInCurrentRoom = -1;
            playerModel.playerCollection.addItem(_local_1);
            if (add_more_players) {
                updateListeners(ADD_PLAYER, _local_1);
            }
        } else {
            $d("handleAddPlayerToRoom() -> Adding a player to the same room id we are currently in");
        }
    }
    function handleRemovePlayerFromRoom(serverResponse) {
        var _local_1 = com.clubpenguin.model.vo.PlayerVO(playerModel.getPlayerObjectById(serverResponse[1]));
        var _local_3 = getPlayerList();
        _local_1.isJumping = (serverResponse[1] != undefined) && (serverResponse[1] == "jmp");
        if (isPlayerJumping(_local_1.player_id)) {
            _local_1.isJumping = false;
        }
        if (_local_1.player_id != undefined) {
            if (!_local_1.equals(getMyPlayerObject())) {
                updateListeners(REMOVE_PLAYER, _local_1.player_id);
                playerModel.playerCollection.removeItem(_local_1, true, null);
            }
        }
    }
    function sendUpdatePlayerColour(id) {
        if (!isNaN(id)) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.SETTING_HANDLER + "#") + AIRTOWER.UPDATE_PLAYER_COLOUR, [id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] sendUpdatePlayerColour() -> Not a real number passed for id! id:" + id);
        }
    }
    function handleSendUpdatePlayerColour(obj) {
        var _local_6 = obj.shift();
        var _local_2 = Number(obj[0]);
        var _local_3 = Number(obj[1]);
        if (!isNaN(_local_2)) {
            if (isMyPlayer(_local_2)) {
                setMyPlayerHexById(_local_3);
            }
            var _local_1 = getPlayerObjectFromRoomById(_local_2);
            if (_local_1 != undefined) {
                _local_1.colour_id = _local_3;
                _local_1.frame_hack = buildFrameHacksString(_local_1);
                updateActionFrames(_local_1);
                var _local_5 = ENGINE.getPlayerMovieClip(_local_1.player_id);
                ENGINE.loadSpecialActionForPlayer(_local_1.dance_frame, _local_1);
                ENGINE.loadSpecialActionForPlayer(_local_1.wave_frame, _local_1);
                ENGINE.updatePlayerFrame(_local_2, 1, false);
                updateListeners(UPDATE_PLAYER, _local_1);
                if (isMyPlayer(_local_2)) {
                    com.clubpenguin.login.LocalData.saveRoomPlayerObject(_local_1);
                }
            } else {
                $e("[shell] handleSendUpdatePlayerColour() -> Could not find player in room! player_id:" + _local_2);
            }
        } else {
            $e("[shell] handleSendUpdatePlayerColour() -> Not a real number passed for player id! player_id:" + _local_2);
        }
    }
    function sendUpdatePlayerHead(id) {
        if (!isNaN(id)) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.SETTING_HANDLER + "#") + AIRTOWER.UPDATE_PLAYER_HEAD, [id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] sendUpdatePlayerHead() -> Not a real number passed for id! id:" + id);
        }
    }
    function handleSendUpdatePlayerHead(obj) {
        var _local_6 = obj.shift();
        var _local_2 = Number(obj[0]);
        var _local_3 = Number(obj[1]);
        if (!isNaN(_local_2)) {
            var _local_1 = getPlayerObjectFromRoomById(_local_2);
            if (_local_1 != undefined) {
                _local_1.head = _local_3;
                _local_1.frame_hack = buildFrameHacksString(_local_1);
                updateActionFrames(_local_1);
                var _local_5 = ENGINE.getPlayerMovieClip(_local_1.player_id);
                ENGINE.loadSpecialActionForPlayer(_local_1.dance_frame, _local_1);
                ENGINE.loadSpecialActionForPlayer(_local_1.wave_frame, _local_1);
                ENGINE.updatePlayerFrame(_local_2, 1, false);
                updateListeners(UPDATE_PLAYER, _local_1);
                if (isMyPlayer(_local_2)) {
                    com.clubpenguin.login.LocalData.saveRoomPlayerObject(_local_1);
                }
            } else {
                $e("[shell] handleSendUpdatePlayerHead() -> Could not find player in room! player_id:" + _local_2);
            }
        } else {
            $e("[shell] handleSendUpdatePlayerHead() -> Not a real number passed for player id! player_id:" + _local_2);
        }
    }
    function sendUpdatePlayerFace(id) {
        if (!isNaN(id)) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.SETTING_HANDLER + "#") + AIRTOWER.UPDATE_PLAYER_FACE, [id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] sendUpdatePlayerFace() -> Not a real number passed for id! id:" + id);
        }
    }
    function handleSendUpdatePlayerFace(obj) {
        var _local_6 = obj.shift();
        var _local_2 = Number(obj[0]);
        var _local_3 = Number(obj[1]);
        if (!isNaN(_local_2)) {
            var _local_1 = getPlayerObjectFromRoomById(_local_2);
            if (_local_1 != undefined) {
                _local_1.face = _local_3;
                _local_1.frame_hack = buildFrameHacksString(_local_1);
                updateActionFrames(_local_1);
                var _local_5 = ENGINE.getPlayerMovieClip(_local_1.player_id);
                ENGINE.loadSpecialActionForPlayer(_local_1.dance_frame, _local_1);
                ENGINE.loadSpecialActionForPlayer(_local_1.wave_frame, _local_1);
                ENGINE.updatePlayerFrame(_local_2, 1, false);
                updateListeners(UPDATE_PLAYER, _local_1);
                if (isMyPlayer(_local_2)) {
                    com.clubpenguin.login.LocalData.saveRoomPlayerObject(_local_1);
                }
            } else {
                $e("[shell] handleSendUpdatePlayerFace() -> Could not find player in room! player_id:" + _local_2);
            }
        } else {
            $e("[shell] handleSendUpdatePlayerFace() -> Not a real number passed for player id! player_id:" + _local_2);
        }
    }
    function sendUpdatePlayerNeck(id) {
        if (!isNaN(id)) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.SETTING_HANDLER + "#") + AIRTOWER.UPDATE_PLAYER_NECK, [id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] sendUpdatePlayerNeck() -> Not a real number passed for id! id:" + id);
        }
    }
    function handleSendUpdatePlayerNeck(obj) {
        var _local_6 = obj.shift();
        var _local_2 = Number(obj[0]);
        var _local_3 = Number(obj[1]);
        if (!isNaN(_local_2)) {
            var _local_1 = getPlayerObjectFromRoomById(_local_2);
            if (_local_1 != undefined) {
                _local_1.neck = _local_3;
                _local_1.frame_hack = buildFrameHacksString(_local_1);
                updateActionFrames(_local_1);
                var _local_5 = ENGINE.getPlayerMovieClip(_local_1.player_id);
                ENGINE.loadSpecialActionForPlayer(_local_1.dance_frame, _local_1);
                ENGINE.loadSpecialActionForPlayer(_local_1.wave_frame, _local_1);
                ENGINE.updatePlayerFrame(_local_2, 1, false);
                updateListeners(UPDATE_PLAYER, _local_1);
                if (isMyPlayer(_local_2)) {
                    com.clubpenguin.login.LocalData.saveRoomPlayerObject(_local_1);
                }
            } else {
                $e("[shell] handleSendUpdatePlayerNeck() -> Could not find player in room! player_id:" + _local_2);
            }
        } else {
            $e("[shell] handleSendUpdatePlayerBody() -> Not a real number passed for player id! player_id:" + _local_2);
        }
    }
    function sendUpdatePlayerBody(id) {
        if (!isNaN(id)) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.SETTING_HANDLER + "#") + AIRTOWER.UPDATE_PLAYER_BODY, [id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] sendUpdatePlayerBody() -> Not a real number passed for id! id:" + id);
        }
    }
    function handleSendUpdatePlayerBody(obj) {
        var _local_6 = obj.shift();
        var _local_2 = Number(obj[0]);
        var _local_3 = Number(obj[1]);
        if (!isNaN(_local_2)) {
            var _local_1 = getPlayerObjectById(_local_2);
            if (_local_1 != undefined) {
                _local_1.body = _local_3;
                _local_1.frame_hack = buildFrameHacksString(_local_1);
                updateActionFrames(_local_1);
                var _local_5 = ENGINE.getPlayerMovieClip(_local_1.player_id);
                ENGINE.loadSpecialActionForPlayer(_local_1.dance_frame, _local_1);
                ENGINE.loadSpecialActionForPlayer(_local_1.wave_frame, _local_1);
                ENGINE.updatePlayerFrame(_local_2, 1, false);
                updateListeners(UPDATE_PLAYER, _local_1);
                if (isMyPlayer(_local_2)) {
                    com.clubpenguin.login.LocalData.saveRoomPlayerObject(_local_1);
                }
            } else {
                $e("[shell] handleSendUpdatePlayerBody() -> Could not find player in room! player_id:" + _local_2);
            }
        } else {
            $e("[shell] handleSendUpdatePlayerBody() -> Not a real number passed for player id! player_id:" + _local_2);
        }
    }
    function sendUpdatePlayerHand(id) {
        $d("[shell] sendUpdatePlayerHand() -> id: " + id);
        if (!isNaN(id)) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.SETTING_HANDLER + "#") + AIRTOWER.UPDATE_PLAYER_HAND, [id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] sendUpdatePlayerHand() -> Not a real number passed for id! id:" + id);
        }
    }
    function handleSendUpdatePlayerHand(obj) {
        var _local_5 = Number(obj[3]);
        var _local_7 = obj.shift();
        var _local_2 = Number(obj[0]);
        var _local_3 = Number(obj[1]);
        if (!isNaN(_local_2)) {
            var _local_1 = getPlayerObjectFromRoomById(_local_2);
            if (_local_1 != undefined) {
                var _local_8 = getPlayerObjectById(_local_2);
                _local_1.hand = _local_3;
                _local_1.frame_hack = buildFrameHacksString(_local_1);
                _local_1.puffle_head_item_id = _local_5;
                updateActionFrames(_local_1);
                var _local_6 = ENGINE.getPlayerMovieClip(_local_1.player_id);
                ENGINE.loadSpecialActionForPlayer(_local_1.dance_frame, _local_1);
                ENGINE.loadSpecialActionForPlayer(_local_1.wave_frame, _local_1);
                ENGINE.updatePlayerFrame(_local_2, 1, false);
                updateListeners(UPDATE_PLAYER, _local_1);
                if (isMyPlayer(_local_2)) {
                    com.clubpenguin.login.LocalData.saveRoomPlayerObject(_local_1);
                }
            } else {
                $e("[shell] handleSendUpdatePlayerHand() -> Could not find player in room! player_id:" + _local_2);
            }
        } else {
            $e("[shell] handleSendUpdatePlayerHand() -> Not a real number passed for player id! player_id:" + _local_2);
        }
    }
    function sendUpdatePlayerFeet(id) {
        if (!isNaN(id)) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.SETTING_HANDLER + "#") + AIRTOWER.UPDATE_PLAYER_FEET, [id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] sendUpdatePlayerFeet() -> Not a real number passed for id! id:" + id);
        }
    }
    function handleSendUpdatePlayerFeet(obj) {
        var _local_6 = obj.shift();
        var _local_2 = Number(obj[0]);
        var _local_3 = Number(obj[1]);
        if (!isNaN(_local_2)) {
            var _local_1 = getPlayerObjectFromRoomById(_local_2);
            if (_local_1 != undefined) {
                _local_1.feet = _local_3;
                _local_1.frame_hack = buildFrameHacksString(_local_1);
                updateActionFrames(_local_1);
                var _local_5 = ENGINE.getPlayerMovieClip(_local_1.player_id);
                ENGINE.loadSpecialActionForPlayer(_local_1.dance_frame, _local_1);
                ENGINE.loadSpecialActionForPlayer(_local_1.wave_frame, _local_1);
                ENGINE.updatePlayerFrame(_local_2, 1, false);
                updateListeners(UPDATE_PLAYER, _local_1);
                if (isMyPlayer(_local_2)) {
                    com.clubpenguin.login.LocalData.saveRoomPlayerObject(_local_1);
                }
            } else {
                $e("[shell] handleSendUpdatePlayerHand() -> Could not find player in room! player_id:" + _local_2);
            }
        } else {
            $e("[shell] handleSendUpdatePlayerHand() -> Not a real number passed for player id! player_id:" + _local_2);
        }
    }
    function sendUpdatePlayerFlag(id) {
        if (!isNaN(id)) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.SETTING_HANDLER + "#") + AIRTOWER.UPDATE_PLAYER_FLAG, [id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] sendUpdatePlayerFlag() -> Not a real number passed for id! id:" + id);
        }
    }
    function handleSendUpdatePlayerFlag(obj) {
        var _local_6 = obj.shift();
        var _local_2 = Number(obj[0]);
        var _local_3 = Number(obj[1]);
        if (!isNaN(_local_2)) {
            var _local_1 = getPlayerObjectFromRoomById(_local_2);
            if (_local_1 != undefined) {
                _local_1.flag_id = _local_3;
                _local_1.frame_hack = buildFrameHacksString(_local_1);
                updateActionFrames(_local_1);
                var _local_5 = ENGINE.getPlayerMovieClip(_local_1.player_id);
                ENGINE.loadSpecialActionForPlayer(_local_1.dance_frame, _local_1);
                ENGINE.loadSpecialActionForPlayer(_local_1.wave_frame, _local_1);
                ENGINE.updatePlayerFrame(_local_2, 1, false);
                updateListeners(UPDATE_PLAYER, _local_1);
            } else {
                $e("[shell] handleSendUpdatePlayerHand() -> Could not find player in room! player_id:" + _local_2);
            }
        } else {
            $e("[shell] handleSendUpdatePlayerHand() -> Not a real number passed for player id! player_id:" + _local_2);
        }
    }
    function sendUpdatePlayerPhoto(id) {
        if (!isNaN(id)) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.SETTING_HANDLER + "#") + AIRTOWER.UPDATE_PLAYER_PHOTO, [id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] sendUpdatePlayerPhoto() -> Not a real number passed for id! id:" + id);
        }
    }
    function handleSendUpdatePlayerPhoto(obj) {
        var _local_6 = obj.shift();
        var _local_2 = Number(obj[0]);
        var _local_3 = Number(obj[1]);
        if (!isNaN(_local_2)) {
            var _local_1 = getPlayerObjectFromRoomById(_local_2);
            if (_local_1 != undefined) {
                _local_1.photo_id = _local_3;
                _local_1.frame_hack = buildFrameHacksString(_local_1);
                updateActionFrames(_local_1);
                var _local_5 = ENGINE.getPlayerMovieClip(_local_1.player_id);
                ENGINE.loadSpecialActionForPlayer(_local_1.dance_frame, _local_1);
                ENGINE.loadSpecialActionForPlayer(_local_1.wave_frame, _local_1);
                ENGINE.updatePlayerFrame(_local_2, 1, false);
                updateListeners(UPDATE_PLAYER, _local_1);
            } else {
                $e("[shell] handleSendUpdatePlayerHand() -> Could not find player in room! player_id:" + _local_2);
            }
        } else {
            $e("[shell] handleSendUpdatePlayerHand() -> Not a real number passed for player id! player_id:" + _local_2);
        }
    }
    function sendClearPaperdoll() {
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.SETTING_HANDLER + "#") + AIRTOWER.UPDATE_PLAYER_REMOVE, [], "str", getCurrentServerRoomId());
    }
    function handleSendClearPaperdoll(obj) {
        var _local_6 = obj.shift();
        var _local_2 = Number(obj[0]);
        var _local_3 = Boolean(Number(obj[1]));
        if (!isNaN(_local_2)) {
            if (_local_3) {
                var _local_1 = getPlayerObjectFromRoomById(_local_2);
                if (_local_1 != undefined) {
                    _local_1.photo_id = 0;
                    _local_1.flag_id = 0;
                    _local_1.feet = 0;
                    _local_1.head = 0;
                    _local_1.neck = 0;
                    _local_1.face = 0;
                    _local_1.hand = 0;
                    _local_1.body = 0;
                    _local_1.frame_hack = buildFrameHacksString(_local_1);
                    updateActionFrames(_local_1);
                    var _local_5 = ENGINE.getPlayerMovieClip(_local_1.player_id);
                    ENGINE.loadSpecialActionForPlayer(_local_1.dance_frame, _local_1);
                    ENGINE.loadSpecialActionForPlayer(_local_1.wave_frame, _local_1);
                    ENGINE.updatePlayerFrame(_local_2, 1, false);
                    updateListeners(UPDATE_PLAYER, _local_1);
                    if (isMyPlayer(_local_2)) {
                        com.clubpenguin.login.LocalData.saveRoomPlayerObject(_local_1);
                    }
                } else {
                    $e("[shell] handleSendClearPaperdoll() -> Could not find player in room! player_id:" + _local_2);
                }
            } else {
                $e("[shell] handleSendClearPaperdoll() -> Player was not successfully cleared!");
            }
        } else {
            $e("[shell] handleSendClearPaperdoll() -> Not a real number passed for player id! player_id:" + _local_2);
        }
    }
    function sendPlayerMove(xpos, ypos) {
        if ((!isNaN(xpos)) && (!isNaN(ypos))) {
            var _local_3 = getMyPlayerObject();
            _local_3.x = xpos;
            _local_3.y = ypos;
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_HANDLER + "#") + AIRTOWER.PLAYER_MOVE, [xpos, ypos], "str", getCurrentServerRoomId());
            updateListeners(LOCAL_PLAYER_MOVE, {player_id:_local_3.player_id, x:xpos, y:ypos});
        } else {
            $e((("[shell] sendPlayerMove() -> NaN - xpos: " + xpos) + " ypos: ") + ypos);
        }
    }
    function sendPlayerTeleport(xpos, ypos) {
        if ((!isNaN(xpos)) && (!isNaN(ypos))) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_HANDLER + "#") + AIRTOWER.PLAYER_TELEPORT, [xpos, ypos], "str", getCurrentServerRoomId());
        } else {
            $e((("[shell] sendPlayerMove() -> NaN - xpos: " + xpos) + " ypos: ") + ypos);
        }
    }
    function roomInitiated() {
        var _local_1;
        if (getIsRoomIgloo()) {
            _local_1 = "room_session_igloo";
        } else {
            _local_1 = "room_session_" + getRoomObject().room_key;
        }
        updateListeners(ROOM_INITIATED, undefined);
    }
    function roomDestroyed() {
        var _local_1;
        if (getRoomCrumbsById(getLastRoomId()).room_key == undefined) {
            _local_1 = "room_session_igloo";
        } else {
            _local_1 = "room_session_" + getRoomCrumbsById(getLastRoomId()).room_key;
        }
        updateListeners(ROOM_DESTROYED, undefined);
    }
    function handleSendPlayerMove(serverResponse) {
        var _local_7 = serverResponse.shift();
        var _local_1 = Number(serverResponse[0]);
        var _local_6 = Number(serverResponse[1]);
        var _local_5 = Number(serverResponse[2]);
        if (playerModel.playerExists(_local_1)) {
            var _local_3 = com.clubpenguin.model.vo.PlayerVO(playerModel.getPlayerObjectById(_local_1));
            _local_3.x = _local_6;
            _local_3.y = _local_5;
            _local_3.frame = 1;
            var _local_2 = new Object();
            _local_2.player_id = _local_1;
            _local_2.x = _local_6;
            _local_2.y = _local_5;
            updateListeners(PLAYER_MOVE, _local_2);
        } else {
            $d("[shell] Trying to move a penguin who was not found in the room. player_id: " + _local_1);
        }
    }
    function handleSendPlayerTeleport(serverResponse) {
        var _local_7 = serverResponse.shift();
        var _local_1 = Number(serverResponse[0]);
        var _local_6 = Number(serverResponse[1]);
        var _local_5 = Number(serverResponse[2]);
        if (playerModel.playerExists(_local_1)) {
            var _local_3 = com.clubpenguin.model.vo.PlayerVO(playerModel.getPlayerObjectById(_local_1));
            _local_3.x = _local_6;
            _local_3.y = _local_5;
            _local_3.frame = 1;
            var _local_2 = new Object();
            _local_2.player_id = _local_1;
            _local_2.x = _local_6;
            _local_2.y = _local_5;
            updateListeners(PLAYER_TELEPORT, _local_2);
        } else {
            $d("[shell] Trying to move a penguin who was not found in the room. player_id: " + _local_1);
        }
    }
    function sendPlayerMoveDone(player_id) {
        if (!isNaN(player_id)) {
            var _local_2 = getPlayerObjectFromRoomById(player_id);
            if (_local_2 != undefined) {
                updateListeners(PLAYER_MOVE_DONE, _local_2);
            } else {
                $d("[shell] sendPlayerMoveDone() -> Player object was not found in room! " + player_id);
                updateListeners(PLAYER_MOVE_DONE, undefined);
            }
        } else {
            $d("[shell] sendPlayerMoveDone() -> Player id is not a real number! player_id: " + player_id);
            updateListeners(PLAYER_MOVE_DONE, undefined);
        }
    }
    function sendPlayerFrame(frame_num) {
        if (!isNaN(frame_num)) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_HANDLER + "#") + AIRTOWER.PLAYER_FRAME, [frame_num], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] sendPlayerFrame() -> NaN - frame_number: " + frame_num);
        }
    }
    function handleSendPlayerFrame(serverReponse) {
        var _local_6 = serverReponse.shift();
        var _local_1 = Number(serverReponse[0]);
        var _local_5 = Number(serverReponse[1]);
        if (playerModel.playerExists(_local_1)) {
            var _local_4 = com.clubpenguin.model.vo.PlayerVO(playerModel.getPlayerObjectById(_local_1));
            _local_4.frame = _local_5;
            var _local_2 = new Object();
            _local_2.player_id = _local_1;
            _local_2.frame = _local_5;
            _local_2.x = _local_4.x;
            _local_2.y = _local_4.y;
            if (!playerModel.isMyPlayer(_local_1)) {
                updateListeners(PLAYER_FRAME, _local_2);
            }
        } else {
            $d("[shell] updatePlayerAction() -> Trying to update a penguin frame who was not found in the room. player_id: " + _local_1);
        }
    }
    function sendPlayerAction(frame_num) {
        if (!isNaN(frame_num)) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_HANDLER + "#") + AIRTOWER.PLAYER_ACTION, [frame_num], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] sendUpdatePlayer() -> NaN - frame_number: " + frame_num);
        }
    }
    function handleUpdatePlayerAction(obj) {
        var _local_5 = obj.shift();
        var _local_2 = Number(obj[0]);
        var _local_4 = Number(obj[1]);
        if (playerModel.playerExists(_local_2)) {
            var _local_1 = new Object();
            _local_1.player_id = _local_2;
            _local_1.frame = _local_4;
            updateListeners(PLAYER_ACTION, _local_1);
        } else {
            $d("[shell] updatePlayerAction() -> Trying to update a penguin action who was not found in the room");
        }
    }
    function handleSuccessfulMatchmaking(response) {
        var _local_8 = Number(response[4]);
        var _local_10 = 5;
        var _local_1 = 0;
        while (_local_1 < _local_8) {
            var _local_4 = _local_10 + _local_1;
            var _local_5 = (_local_10 + _local_8) + _local_1;
            var _local_6 = (_local_10 + (_local_8 * 2)) + _local_1;
            AIRTOWER.sendAck("cjms-player-" + _local_1, [(("colorIndex=" + _local_4) + "=") + response[_local_4], (("beltIndex=" + _local_5) + "=") + response[_local_5], (("playerIDIndex=" + _local_6) + "=") + response[_local_6]]);
            var _local_7 = response[_local_6];
            var _local_2 = ENGINE.getPlayerMovieClip(_local_7);
            var _local_11 = _local_2.art_mc._currentframe;
            var _local_9 = getTargetFrame(_local_11, _local_1, _local_8);
            _local_2.penguin_colour_id = response[_local_4];
            _local_2.belt_colour_id = response[_local_5];
            ENGINE.updatePlayerFrame(_local_7, _local_9, true);
            _local_1++;
        }
    }
    function getTargetFrame(playerFrame, currentPlayerIndex, totalPlayers) {
        var _local_3 = getRoomNameById(my_room.room_id);
        var _local_4 = ((_local_3 == "dojowater") ? true : false);
        var _local_9 = ((_local_3 == "dojofire") ? true : false);
        var _local_5 = [CJ_BOW_RIGHT_FRAME, CJ_BOW_LEFT_FRAME];
        var _local_8 = [CJ_BOW_RIGHT_FRAME, CJ_BOW_LEFT_FRAME, CJ_BOW_LEFT_FRAME];
        var _local_7 = [CJ_BOW_RIGHT_FRAME_ANGLE_DOWN, CJ_BOW_RIGHT_FRAME_ANGLE_DOWN, CJ_BOW_LEFT_FRAME_ANGLE_UP, CJ_BOW_LEFT_FRAME_ANGLE_UP];
        var _local_6 = [CJ_BOW_RIGHT_FRAME_ANGLE_UP, CJ_BOW_LEFT_FRAME_ANGLE_DOWN, CJ_BOW_LEFT_FRAME_ANGLE_DOWN, CJ_BOW_RIGHT_FRAME_ANGLE_UP];
        if (totalPlayers == 2) {
            return(_local_5[currentPlayerIndex]);
        }
        if (totalPlayers == 3) {
            return(_local_8[currentPlayerIndex]);
        }
        if ((totalPlayers == 4) && (_local_4)) {
            return(_local_7[currentPlayerIndex]);
        }
        if ((totalPlayers == 4) && (_local_9)) {
            return(_local_6[currentPlayerIndex]);
        }
        return(CJ_BOW_RIGHT_FRAME);
    }
    function getPlayersInRoomCount() {
        return(getPlayerList().length);
    }
    function getPlayerList() {
        return(playerModel.getPlayerList());
    }
    function getSortedPlayerList() {
        return(getPlayerList().sortOn(["nickname"], [Array.CASEINSENSITIVE]));
    }
    function setRoomCrumbs(obj) {
        room_crumbs = {};
        var _local_1;
        for (_local_1 in obj) {
            obj[_local_1].is_member = obj[_local_1].is_member == "1";
            obj[_local_1].path = (getGlobalContentPath() + "rooms/") + obj[_local_1].path;
            room_crumbs[obj[_local_1].room_key] = obj[_local_1];
        }
    }
    function getRoomCrumbs() {
        return(room_crumbs);
    }
    function sendGetCoinReward() {
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.ROOM_HANDLER + "#") + AIRTOWER.COIN_DIG_UPDATE, [], "str", getCurrentServerRoomId());
    }
    function handleGetCoinReward(serverEventData) {
        var _local_5 = Number(serverEventData.shift());
        var _local_3 = Number(serverEventData[0]);
        var _local_4 = Number(serverEventData[1]);
        if (isNaN(_local_3)) {
            return(undefined);
        }
        if ((!isNaN(_local_4)) && (_local_4 > 0)) {
            setMyPlayerTotalCoins(_local_4);
        }
        var _local_1 = {numCoins:_local_3, totalCoins:_local_4};
        updateListeners(COIN_DIG_UPDATE, _local_1);
    }
    function logLoadRoomTime(loadRoomEndTime) {
    }
    function soloDojoCheck(roomId) {
        var _local_1 = 321;
        var _local_2 = 324;
        if (roomId == _local_2) {
            return(_local_1);
        }
        return(roomId);
    }
    function handleOnMouseUp() {
        sendToAS3MouseRelease();
    }
    function setNewspaperCrumbs(obj) {
        for (n in obj) {
            addLocalPath(obj[n]["key"], obj[n].path);
        }
        news_crumbs = obj;
    }
    function getNewsCrumbs() {
        return(news_crumbs);
    }
    function getPostcardById() {
    }
    function getPostcardCrumbs() {
        return(postcard_crumbs);
    }
    function getPostcardsByCategory(category) {
        if (isValidString(category)) {
            var _local_1 = getPostcardCrumbs()[category];
            if (_local_1 != undefined) {
                var _local_3 = new Array();
                var _local_2;
                for (_local_2 in _local_1) {
                    if (_local_1[_local_2].in_catalog) {
                        _local_3.push(_local_1[_local_2]);
                    }
                }
                _local_3.reverse();
                return(_local_3);
            }
            $e("getPostcardsByCategory() -> No postcards found in that category! category: " + category);
        } else {
            $e("getPostcardsByCategory() -> Not a valid string passed for category type! category: " + category);
        }
        return(undefined);
    }
    function getPostcardCategoryList() {
        return(postcard_category_list);
    }
    function setPostcardCategoryList(obj) {
        var _local_2 = new Array();
        var _local_1;
        for (_local_1 in obj) {
            _local_2.push(_local_1);
        }
        _local_2.reverse();
        postcard_category_list = _local_2;
    }
    function setPostcardsCategory(obj) {
        var _local_1;
        var _local_2;
        for (_local_1 in obj) {
            for (_local_2 in obj[_local_1]) {
                obj[_local_1][_local_2].category = _local_1;
                obj[_local_1][_local_2].id = _local_2;
            }
        }
    }
    function setPostcardCount(obj) {
        var _local_3 = 0;
        var _local_1;
        var _local_4;
        for (_local_1 in obj) {
            for (_local_4 in obj[_local_1]) {
                _local_3++;
            }
        }
        postcard_count = _local_3;
    }
    function buildPostcardFlatArray(obj) {
        var _local_4 = new Array();
        var _local_1;
        var _local_3;
        for (_local_1 in obj) {
            for (_local_3 in obj[_local_1]) {
                _local_4.push(obj[_local_1][_local_3]);
            }
        }
        setPostcardFlatArray(_local_4);
    }
    function setPostcardFlatArray(arr) {
        postcard_flat_arr = arr;
    }
    function getPostcardFlatArray() {
        return(postcard_flat_arr);
    }
    function getPostcardMaxPages(pcs_per_page) {
        var _local_2 = getPostcardCategoryList();
        var _local_4 = _local_2.length;
        var _local_1 = 0;
        var _local_3 = 0;
        while (_local_1 < _local_4) {
            _local_3 = _local_3 + getPagesPerCategory(_local_2[_local_1], pcs_per_page);
            _local_1++;
        }
        return(_local_3);
    }
    function getPagesPerCategory(cat, pcs_per_page) {
        var _local_1 = getPostcardsByCategory(cat);
        return(Math.ceil(_local_1.length / pcs_per_page));
    }
    function getPostcardCategoryMaxPages(category_name, pcs_per_page) {
        var _local_1 = getPostcardsByCategory(category_name);
        return(Math.ceil(_local_1.length / pcs_per_page));
    }
    function getPostcardCount() {
        return(postcard_count);
    }
    function setPostcardOrder(obj) {
        var _local_2 = [];
        var _local_6 = {};
        var _local_7 = true;
        for (var _local_8 in obj) {
            if (obj[_local_8].order_position == undefined) {
                _local_7 = false;
                break;
            }
            var _local_3 = obj[_local_8];
            _local_3.groupName = _local_8;
            _local_2.push(_local_3);
        }
        if (_local_7) {
            _local_2.sortOn("order_position", Array.NUMERIC);
            var _local_1 = 0;
            while (_local_1 < _local_2.length) {
                var _local_5 = _local_2[_local_1].groupName;
                delete _local_2[_local_1].groupName;
                delete _local_2[_local_1].order_position;
                _local_6[_local_5] = _local_2[_local_1];
                _local_1++;
            }
        } else {
            _local_6 = obj;
        }
        return(_local_6);
    }
    function setPostcardCrumbs(obj) {
        postcard_crumbs = setPostcardOrder(obj);
        setPostcardsCategory(postcard_crumbs);
        setPostcardCount(postcard_crumbs);
        buildPostcardFlatArray(postcard_crumbs);
        setPostcardCategoryList(postcard_crumbs);
    }
    function setChosenWorldSafeChat(is_safe) {
        playerChoseSafeChatWorld = is_safe;
    }
    function handleUpdatePlayer(player) {
        if (isMyPlayer(player.player_id)) {
            var _local_2 = getMyPlayerObject();
            for (var _local_3 in player) {
                _local_2[_local_3] = player[_local_3];
            }
            SHELL.sendMyPlayerData(_local_2);
        }
    }
    function getMyPlayerHex() {
        var _local_2 = getMyPlayerObject();
        var _local_1 = getPlayerColoursObject();
        if (_local_1[_local_2.colour_id] != undefined) {
            return(_local_1[_local_2.colour_id]);
        }
        return(_local_1[0]);
    }
    function setMyPlayerHexById(id) {
        if (!isNaN(id)) {
            var _local_1 = getMyPlayerObject();
            var _local_3 = _local_1.colour_id;
            if (_local_3 != id) {
                _local_1.colour_id = id;
            }
            if (player_colours[_local_1.colour_id] != undefined) {
                return(player_colours[_local_1.colour_id]);
            }
        } else {
            $e("setMyPlayerHexById() -> Player color ");
        }
    }
    function getMyPlayerId() {
        return(getMyPlayerObject().player_id);
    }
    function handleLoadPlayer(result) {
        var _local_16 = String(result[1]);
        var _local_14 = Number(result[2]);
        var _local_6 = Boolean(Number(result[3]));
        var _local_11 = Number(result[4]);
        var _local_12 = Number(result[5]);
        var _local_17 = Number(result[6]);
        var _local_10 = Number(result[7]);
        var _local_5 = result[9].split("|");
        var _local_4 = true;
        if (playerMinutesPlayed <= 0) {
            _local_4 = false;
        }
        var _local_8 = -1;
        if (!isNaN(_local_5[0])) {
            _local_8 = Number(_local_5[0]);
        }
        var _local_15 = Number(result[10]) || (DEFAULT_TIMEZONE_OFFSET);
        var _local_9 = Boolean(Number(result[11]));
        var _local_13 = Number(result[12]);
        var _local_2 = new com.clubpenguin.shell.StatusField(Number(result[13]));
        var _local_3 = makePlayerObjectFromString(_local_16);
        if (SHELL.isNameResubmitted) {
            _local_3.username = resubmittedName;
        }
        if (_local_3.is_member) {
            swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_TELL_WEB_MEMBER_SWID});
        }
        playerModel.playerCollection.addItem(_local_3);
        showPartyAnnouncement(_local_4);
        setMyPlayerTotalCoins(_local_14);
        setMyPlayerSafemode(_local_6);
        setEggTimerMinutesRemaining(_local_11);
        setMyPlayerDaysOld(_local_17);
        setMyPlayerBannedAge(_local_10);
        setMinutesPlayed(playerMinutesPlayed);
        setMembershipDaysRemaining(_local_8);
        serverTimezoneOffset = _local_15;
        setupPenguinStandardTime(_local_12);
        setMyPlayerHasOpenedPlayerCard(_local_9);
        setMyPlayerSavedMapCategory(_local_13);
        setHasOpenedIglooViewer(_local_2.hasOpenedIglooViewer());
        setIsPlayerOptedInDayZeroABTest(_local_2.isPlayerOptedInDayZeroABTest());
        setHasSeenPuffleTreasureInfographic(_local_2.hasSeenPuffleTreasureInfographic());
        setHasSwappedPuffle(_local_2.hasSwappedPuffle());
        setHasSeenBackyard(_local_2.hasSeenBackyard());
        setHasSeenIglooFull(_local_2.hasSeenIglooFull());
        setHasWalkedPuffleFirstTime(_local_2.hasWalkedPuffleFirstTime());
        setHasWalkedPuffleSecondTime(_local_2.hasWalkedPuffleSecondTime());
        setChosenWorldSafeChat(_local_6);
        com.clubpenguin.login.LocalData.savePlayerObject();
        setupEPFPlayerData();
        setPlayerMembershipStatusCookie();
        getMyPlayerObject().choseSafeChatWorld = playerChoseSafeChatWorld;
        SHELL.sendMyPlayerData(getMyPlayerObject());
        updateListeners(LOAD_PLAYER_OBJECT, _local_3);
        var _local_7 = Number(result[8]);
        if (_local_7 < 1) {
            SHELL._trackerAS2.sendToAS3LogGameAction("first_login", "success");
        }
        _trackerAS2.trackUserInfo(" ", getMyPlayerObject().is_member, getMyPlayerObject().player_id, " ", " ", " ", " ");
    }
    function showPartyAnnouncement(_show) {
        if (_show && (getPartyOptions().showPartyAnnouncement)) {
            _global.getCurrentInterface().showContent("w.party.announcement");
        }
    }
    function setPlayerMembershipStatusCookie() {
        if ((getMyPlayerObject() == undefined) || (getMyPlayerObject().is_member == undefined)) {
            return(undefined);
        }
        flash.external.ExternalInterface.call(SET_COOKIE_METHOD, MEMBERSHIP_STATUS_COOKIE_NAME, (getMyPlayerObject().is_member ? (MEMBER_COOKIE_VALUE) : (NON_MEMBER_COOKIE_VALUE)), MEMBERSHIP_STATUS_COOKIE_EXPIRY_IN_DAYS);
    }
    function sendOpenBook(toyID) {
        var _local_1 = 1;
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.TOY_HANDLER + "#") + AIRTOWER.OPEN_BOOK, [toyID, _local_1], "str", getCurrentServerRoomId());
    }
    function handleOpenPlayerBook(obj) {
        var _local_1 = obj.shift();
        var _local_2 = Number(obj[0]);
        var _local_4 = Number(obj[1]);
        if ((!isNaN(_local_1)) && (!isNaN(_local_2))) {
            updateListeners(OPEN_BOOK, {player_id:_local_2, book_id:_local_4});
        } else {
            $e((("[shell] handleOpenPlayerBook() -> Did not receive a valid player id or smart room id. player_id: " + _local_2) + " smart_room_id: ") + _local_1);
        }
    }
    function sendCloseBook(_biString) {
        var _local_1 = "";
        if (_biString) {
            _local_1 = _biString;
        }
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.TOY_HANDLER + "#") + AIRTOWER.CLOSE_BOOK, [1, _local_1], "str", getCurrentServerRoomId());
    }
    function handleClosePlayerBook(obj) {
        var _local_2 = obj.shift();
        var _local_1 = Number(obj[0]);
        if ((!isNaN(_local_2)) && (!isNaN(_local_1))) {
            updateListeners(CLOSE_BOOK, _local_1);
        } else {
            $e((("[shell] handleClosePlayerBook() -> Did not receive a valid player id or smart room id. player_id: " + _local_1) + " smart_room_id: ") + _local_2);
        }
    }
    function handleAvatarTransformation(result) {
        var _local_9 = result.shift();
        var _local_3 = Number(result[0]);
        var _local_7 = Number(result[1]);
        var _local_2 = getIgnoreList();
        var _local_1 = 0;
        while (_local_1 < _local_2.length) {
            if (_local_3 == _local_2[_local_1].player_id) {
                return(undefined);
            }
            _local_1++;
        }
        var _local_5 = getPlayerObjectById(_local_3);
        var _local_6 = _local_5.avatarVO;
        _local_5.avatarVO = ENGINE.avatarManager.model.createAvatarFromTemplate(_local_7);
        var _local_4 = {};
        _local_4.player = _local_5;
        _local_4.previousAvatarVO = _local_6;
        _local_4.avatarId = _local_7;
        _local_4.preAvatarId = _local_6.avatar_id;
        updateListeners(PLAYER_AVATAR_TRANSFORMED, _local_4);
    }
    function setThrowEnabled(value) {
        sendThrowEnabled = value;
    }
    function sendThrowBall(xpos, ypos) {
        if (!sendThrowEnabled) {
            return(undefined);
        }
        if ((!isNaN(xpos)) && (!isNaN(ypos))) {
            var _local_1 = {};
            _local_1.player_id = getMyPlayerId();
            _local_1.x = xpos;
            _local_1.y = ypos;
            updateListeners(THROW_BALL_LOCAL, _local_1);
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_HANDLER + "#") + AIRTOWER.THROW_BALL, [xpos, ypos], "str", getCurrentServerRoomId());
        } else {
            $e((("[shell] sendThrowBall() -> NaN - xpos: " + xpos) + " ypos: ") + ypos);
        }
    }
    function handlePlayerThrowBall(obj) {
        var _local_6 = obj.shift();
        var _local_2 = Number(obj[0]);
        var _local_5 = Number(obj[1]);
        var _local_4 = Number(obj[2]);
        if ((!isNaN(_local_6)) && (!isNaN(_local_2))) {
            if ((!isNaN(_local_5)) && (!isNaN(_local_4))) {
                var _local_1 = {};
                _local_1.player_id = _local_2;
                _local_1.x = _local_5;
                _local_1.y = _local_4;
                var _local_8 = playerIndexInRoom(_local_1.player_id);
                var _local_7 = getPlayerList();
                _local_7[_local_8].frame = 1;
                updateListeners(THROW_BALL, _local_1);
            } else {
                $e((("[shell] handlePlayerThrowBall() -> The snowballs xpos or ypos was NaN. xpos: " + xpos) + " ypos: ") + ypos);
            }
        } else {
            $e((("[shell] handlePlayerThrowBall() -> Did not receive a valid player id or smart room id. player_id: " + _local_2) + " smart_room_id: ") + _local_6);
        }
    }
    function getMyPlayerObject() {
        return(playerModel.getMyPlayerObject());
    }
    function isMyPlayer(player_id_or_object) {
        if ((typeof(player_id_or_object) == "number") || (typeof(player_id_or_object == "string"))) {
            return(playerModel.isMyPlayer(Number(player_id_or_object)));
        }
        return(playerModel.isMyPlayer(player_id_or_object.player_id));
    }
    function saveMyWalkingPuffleSavedObject() {
        var _local_1 = getMyPlayerObject();
        if (_local_1.attachedPuffle) {
            var _local_2 = com.clubpenguin.login.LocalData.getSavedPlayerByUsername(_local_1.username);
            if (_local_2) {
                _local_2.walkingPuffleId = _local_1.attachedPuffle.id;
                _local_2.walkingPuffleSubTypeID = _local_1.attachedPuffle.subTypeID;
                _local_2.walkingPuffleColor = _local_1.attachedPuffle["color"];
                if (_local_1.attachedPuffle.hasHat) {
                    _local_2.walkingPuffleHatId = _local_1.attachedPuffle.hat.id;
                }
            }
        }
    }
    function clearMyWalkingPuffleSavedObject() {
        var _local_1 = com.clubpenguin.login.LocalData.getSavedPlayerByUsername(getMyPlayerObject().username);
        if (_local_1) {
            _local_1.walkingPuffleId = undefined;
            _local_1.walkingPuffleSubTypeID = undefined;
            _local_1.walkingPuffleColor = undefined;
            _local_1.walkingPuffleHatId = undefined;
        }
    }
    function makePlayerObjectFromString(player_string) {
        var _local_2 = player_string.split(SPLIT_CHAR);
        var _local_17 = Number(_local_2[2]);
        var _local_1 = new com.clubpenguin.model.vo.PlayerVO();
        _local_1.player_id = Number(_local_2[0]);
        _local_1.username = String(_local_2[1]);
        _local_1.colour_id = Number(_local_2[3]) || 0;
        _local_1.head = Number(_local_2[4]) || 0;
        _local_1.face = Number(_local_2[5]) || 0;
        _local_1.neck = Number(_local_2[6]) || 0;
        _local_1.body = Number(_local_2[7]) || 0;
        _local_1.hand = Number(_local_2[8]) || 0;
        _local_1.feet = Number(_local_2[9]) || 0;
        _local_1.flag_id = Number(_local_2[10]) || 0;
        _local_1.photo_id = Number(_local_2[11]) || 0;
        _local_1.x = Number(_local_2[12]) || 0;
        _local_1.y = Number(_local_2[13]) || 0;
        _local_1.frame = Number(_local_2[14]) || 0;
        _local_1.membershipEnum = Number(_local_2[15]);
        _local_1.is_member = Boolean(Number(_local_2[15]) || 0);
        _local_1.total_membership_days = Number(_local_2[16]) || 0;
        var _local_14 = Number(_local_2[17]) || 0;
        var _local_20 = String(_local_2[18]) || 0;
        var _local_5 = ENGINE.avatarManager.model.createAvatarFromTemplate(_local_14);
        _local_1.avatarVO = _local_5;
        _local_1.partyInfo = _local_2[19].split(",") || 0;
        _local_1.puffle_id = Number(_local_2[20]) || 0;
        _local_1.puffle_head_item_id = Number(_local_2[23]) || 0;
        var _local_4 = Number(_local_2[20]);
        if (!isNaN(_local_4)) {
            if (isMyPlayer(_local_1.player_id)) {
                var _local_7 = puffleManager.getMyPuffleById(_local_4);
                if (_local_7) {
                    _local_1.attachedPuffle = puffleManager.getMyPuffleById(_local_4);
                    puffleManager.setCurrentWalkingId(_local_4);
                    saveMyWalkingPuffleSavedObject();
                }
            } else {
                var _local_10 = _local_4;
                var _local_18 = Number(_local_2[21]);
                var _local_19 = Number(_local_2[22]);
                var _local_6 = null;
                var _local_16 = null;
                var _local_11 = null;
                var _local_15 = null;
                var _local_13 = null;
                var _local_9 = null;
                var _local_12 = Number(_local_2[23]);
                var _local_8 = Number(_local_2[24]);
                var _local_3 = new Array();
                _local_3.push(_local_10);
                _local_3.push(_local_18);
                _local_3.push(_local_19);
                _local_3.push(_local_6);
                _local_3.push(_local_16);
                _local_3.push(_local_11);
                _local_3.push(_local_15);
                _local_3.push(_local_13);
                _local_3.push(_local_9);
                _local_3.push(_local_12);
                _local_3.push(_local_8);
                _local_1.attachedPuffle = puffleManager.makePuffleModelFromCrumb(_local_3);
            }
        }
        _local_1.frame_hack = buildFrameHacksString(_local_1);
        _local_1.thrownSnowballInCurrentRoom = false;
        _local_1.emoteIDDisplayedInCurrentRoom = -1;
        _local_1.mascot_id = getMascotIdByPlayerId(_local_1.playerId);
        if (SHELL.isMyPlayer(_local_1.player_id)) {
            getMyPlayerObject().avatarVO = _local_5;
        }
        if (isValidString(_local_1.username)) {
            _local_1.nickname = com.clubpenguin.util.Localization.getLocalizedNickname(_local_1.player_id, _local_1.username, _local_17, getLanguageBitmask());
        } else if (isPlayerMascotById(_local_1.player_id)) {
            _local_1.nickname = getMascotNicknameByID(_local_1.player_id);
        }
        updateActionFrames(_local_1);
        return(_local_1);
    }
    function updateActionFrames(playerObject) {
        playerObject.dance_frame = getDanceFrame(playerObject.frame_hack);
        playerObject.wave_frame = getWaveFrame(playerObject.frame_hack);
    }
    function getPlayerObjectById(player_id) {
        if (!isNaN(player_id)) {
            var _local_3 = playerModel.getPlayerObjectById(player_id);
            if (_local_3 != undefined) {
                return(_local_3);
            }
            var _local_2 = new Date().getTime();
            if (playerIdToTimeout[player_id] != null) {
                if (playerIdToTimeout[player_id] > _local_2) {
                    return(undefined);
                }
                playerIdToTimeout[player_id] = null;
                playerIdToLastRequestTimeMS[player_id] = null;
            } else {
                var _local_4 = (playerIdToLastRequestTimeMS[player_id] != null) && ((_local_2 - playerIdToLastRequestTimeMS[player_id]) < MIN_TIME_MS);
                if (_local_4) {
                    playerIdToTimeout[player_id] = _local_2 + 5000;
                    return(undefined);
                }
                playerIdToLastRequestTimeMS[player_id] = _local_2;
            }
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_HANDLER + "#") + AIRTOWER.GET_PLAYER_OBJECT, [player_id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] getPlayerObjectById() -> Not a real number passed for player id. player_id: " + player_id);
        }
        $e("[shell] getPlayerObjectById() -> playerObj not found returning undefined");
        return(undefined);
    }
    function getMascotObjectById(mascotId) {
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_HANDLER + "#") + AIRTOWER.GET_MASCOT_OBJECT, [mascotId], "str", getCurrentServerRoomId());
    }
    function getPlayerObjectByNickname(nickname) {
        if (!nickname.length) {
            $e("[SHELL] getPlayerObjectByNickname() -> Invalid String passed in for player nickname: " + nickname);
        }
        var _local_2 = getPlayerList();
        var _local_4 = _local_2.length;
        var _local_1;
        _local_1 = 0;
        while (_local_1 < _local_4) {
            if (_local_2[_local_1].nickname == nickname) {
                return(_local_2[_local_1]);
            }
            _local_1++;
        }
        return(null);
    }
    function handleLoadPlayerObject(obj) {
        for (var _local_2 in obj) {
        }
        var _local_5 = obj.shift();
        var _local_3 = obj[0];
        if (isValidString(_local_3)) {
            var _local_4 = makePlayerObjectFromString(_local_3);
            playerModel.playerCollection.addItem(_local_4);
            updateListeners(LOAD_PLAYER_OBJECT, _local_4);
        } else {
            $e("[shell] handleLoadPlayerObject() -> A valid player string was not returned: " + _local_3);
        }
    }
    function handleLoadMascotObject(serverResponse) {
        var _local_4 = serverResponse.shift();
        var _local_1 = serverResponse[0];
        if (isValidString(_local_1)) {
            var _local_2 = makePlayerObjectFromString(_local_1);
            playerModel.playerCollection.addItem(_local_2);
            updateListeners(LOAD_MASCOT_OBJECT, _local_2);
        } else {
            $e("[shell] handleLoadMascotObject() -> A valid mascot string was not returned: " + _local_1);
        }
    }
    function isItemOnMyPlayer(item_id) {
        if (!isNaN(item_id)) {
            var _local_1 = playerModel.getMyPlayerObject();
            var _local_2;
            if (((_local_1.attachedPuffle != undefined) && (_local_1.attachedPuffle != null)) && (!_local_1.attachedPuffle.isWildPuffle())) {
                if (item_id == 750) {
                    return(_local_1.attachedPuffle["color"] == "blue");
                }
                if (item_id == 751) {
                    return(_local_1.attachedPuffle["color"] == "pink");
                }
                if (item_id == 752) {
                    return(_local_1.attachedPuffle["color"] == "black");
                }
                if (item_id == 753) {
                    return(_local_1.attachedPuffle["color"] == "green");
                }
                if (item_id == 754) {
                    return(_local_1.attachedPuffle["color"] == "purple");
                }
                if (item_id == 755) {
                    return(_local_1.attachedPuffle["color"] == "red");
                }
                if (item_id == 756) {
                    return(_local_1.attachedPuffle["color"] == "yellow");
                }
                if (item_id == 757) {
                    return(_local_1.attachedPuffle["color"] == "white");
                }
                if (item_id == 758) {
                    return(_local_1.attachedPuffle["color"] == "orange");
                }
                if (item_id == 759) {
                    return(_local_1.attachedPuffle["color"] == "brown");
                }
				if (item_id == 5020) {
                    return(_local_1.attachedPuffle["color"] == "yarr");
                }
            }
            for (_local_2 in _local_1) {
                switch (_local_2) {
                    case "head" : 
                        if (_local_1[_local_2] == item_id) {
                            return(true);
                        }
                    case "face" : 
                        if (_local_1[_local_2] == item_id) {
                            return(true);
                        }
                    case "neck" : 
                        if (_local_1[_local_2] == item_id) {
                            return(true);
                        }
                    case "body" : 
                        if (_local_1[_local_2] == item_id) {
                            return(true);
                        }
                    case "hand" : 
                        if (_local_1[_local_2] == item_id) {
                            return(true);
                        }
                    case "feet" : 
                        if (_local_1[_local_2] == item_id) {
                            return(true);
                        }
                    case "flag_id" : 
                        if (_local_1[_local_2] == item_id) {
                            return(true);
                        }
                    case "photo_id" : 
                        if (_local_1[_local_2] != item_id) { 
                            break;
                        }
                        return(true);
                }
            }
        } else {
            $e("[shell] isItemOnMyPlayer() -> item id is not a real number! item_id: " + item_id);
        }
        return(false);
    }
    function sendEPFPhoneRequest() {
        if (!epfPhoneRequested) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.ITEM_HANDLER + "#") + AIRTOWER.BUY_INVENTORY, [8009], "str", getCurrentServerRoomId());
            epfPhoneRequested = true;
            return;
        }
    }
    function getPlayerCache() {
        return(player_cache);
    }
    function isMyPlayerMember() {
        return(getMyPlayerObject().is_member);
    }
    function setMyPlayerTotalCoins(amount) {
        if (!isNaN(amount)) {
            getMyPlayerObject().coins = amount;
            var _local_1 = new Object();
            _local_1.coins = getMyPlayerObject().coins;
            updateListeners(UPDATE_COINS, _local_1);
            SHELL.sendMyPlayerData(getMyPlayerObject());
        } else {
            $e("[shell] setMyPlayerCoins() -> Amount is not a real number: " + amount);
        }
    }
    function getMyPlayerTotalCoins() {
        return(getMyPlayerObject().coins);
    }
    function setMyPlayerFrame(frame) {
        getMyPlayerObject().frame = frame;
        var _local_1 = getMyPlayerObject();
        _local_1.frame = frame;
        var _local_2 = new Object();
        _local_2.player_id = _local_1.player_id;
        _local_2.frame = _local_1.frame;
        _local_2.x = _local_1.x;
        _local_2.y = _local_1.y;
        updateListeners(PLAYER_FRAME, _local_2);
    }
    function setMyPlayerSafemode(is_safemode) {
        getMyPlayerObject().is_safemode = is_safemode;
    }
    function isMyPlayerSafeMode() {
        return(getMyPlayerObject().is_safemode);
    }
    function getMyPlayerNickname() {
        return(getMyPlayerObject().nickname);
    }
    function getMyPlayerUsername() {
        return(getMyPlayerObject().username);
    }
    function setMyPlayerDaysOld(days_old) {
        getMyPlayerObject().created_date = days_old;
    }
    function getMyPlayerDaysOld() {
        return(getMyPlayerObject().created_date);
    }
    function setMyPlayerBannedAge(date_epoch) {
        getMyPlayerObject().banned_age = date_epoch;
    }
    function getMyPlayerBannedAge() {
        return(getMyPlayerObject().banned_age);
    }
    function setMembershipDaysRemaining(days) {
        membership_days_remaining = days;
    }
    function getMembershipDaysRemaining() {
        return(membership_days_remaining);
    }
    function setupEPFPlayerData() {
        epfService.agentStatusReceived.add(onAgentStatusReceived, this);
        epfService.getAgentStatus();
    }
    function onAgentStatusReceived(isEPFAgent) {
        playerAgentStatusChanged.dispatch(isEPFAgent);
        getMyPlayerObject().isEPFAgent = isEPFAgent;
        SHELL.sendMyPlayerData(getMyPlayerObject());
    }
    function isEPFAgent() {
        return(getMyPlayerObject().isEPFAgent);
    }
    function isEPFRecruit() {
        return((inbox.getPostCardsByTypeID(EPFSystemPostCardID).length > 0) || (inbox.getPostCardsByTypeID(EPFPlayerPostCardID).length > 0));
    }
    function getPlayerEPFStatusChanged() {
        return(playerAgentStatusChanged);
    }
    function setMyPlayerHasOpenedPlayerCard(hasOpenedPlayerCard) {
        if ((!getMyPlayerObject().hasOpenedPlayerCard) && (hasOpenedPlayerCard)) {
            sendSetPlayerCardOpen();
        }
        getMyPlayerObject().hasOpenedPlayerCard = hasOpenedPlayerCard;
    }
    function getMyPlayerHasOpenedPlayerCard() {
        return(getMyPlayerObject().hasOpenedPlayerCard);
    }
    function setMyPlayerSavedMapCategory(savedMapCategory) {
        if (isNaN(savedMapCategory)) {
            getMyPlayerObject().savedMapCategory = -1;
        } else {
            getMyPlayerObject().savedMapCategory = savedMapCategory;
            sendSetSavedMapCategory(savedMapCategory);
        }
    }
    function getMyPlayerSavedMapCategory() {
        return(getMyPlayerObject().savedMapCategory);
    }
    function setTemporaryMapCategory(tempMapCategory) {
        if (isNaN(tempMapCategory)) {
            temporaryMapCategory = -1;
        } else {
            temporaryMapCategory = tempMapCategory;
        }
    }
    function getTemporaryMapCategory() {
        var _local_1 = temporaryMapCategory;
        setTemporaryMapCategory(-1);
        return(_local_1);
    }
    function setHasOpenedIglooViewer(hasOpenedIglooViewer) {
        getMyPlayerObject().hasOpenedIglooViewer = hasOpenedIglooViewer;
    }
    function getHasOpenedIglooViewer() {
        return(getMyPlayerObject().hasOpenedIglooViewer);
    }
    function setIsPlayerOptedInDayZeroABTest(optedIn) {
        getMyPlayerObject().isPlayerOptedInDayZeroABTest = optedIn;
    }
    function getIsPlayerOptedInDayZeroABTest() {
        return(getMyPlayerObject().isPlayerOptedInDayZeroABTest);
    }
    function setHasSeenPuffleTreasureInfographic(hasSeenPuffleTreasureInfographic) {
        getMyPlayerObject().hasSeenPuffleTreasureInfographic = hasSeenPuffleTreasureInfographic;
    }
    function setHasSwappedPuffle(hasSwappedPuffle) {
        getMyPlayerObject().hasSwappedPuffle = hasSwappedPuffle;
    }
    function setHasSeenBackyard(hasSeenBackyard) {
        getMyPlayerObject().hasSeenBackyard = hasSeenBackyard;
    }
    function setHasSeenIglooFull(hasSeenIglooFull) {
        getMyPlayerObject().hasSeenIglooFull = hasSeenIglooFull;
    }
    function setHasWalkedPuffleFirstTime(hasWalkedPuffleFirstTime) {
        getMyPlayerObject().hasWalkedPuffleFirstTime = hasWalkedPuffleFirstTime;
    }
    function setHasWalkedPuffleSecondTime(hasWalkedPuffleSecondTime) {
        getMyPlayerObject().hasWalkedPuffleSecondTime = hasWalkedPuffleSecondTime;
    }
    function playJumpToPlayerInAnimation(playerId) {
        var _local_3 = ENGINE.getPlayerMovieClip(playerId);
        ENGINE.updatePlayerFrame(getMyPlayerdId(), 31);
        var _local_2 = getPlayerObjectById(playerId);
        updateListeners(UPDATE_PLAYER, _local_2);
        addPlayerToJumpMap(playerId);
        if (playerId == getMyPlayerId()) {
            localPlayerIsJumping = true;
        }
    }
    function playJumpToPlayerOutAnimation(playerId) {
        var _local_3 = ENGINE.getPlayerMovieClip(playerId);
        sendPlayerFrame(JUMP_OUT_DANCE_FRAME);
        var _local_1 = getPlayerObjectById(playerId);
        updateListeners(UPDATE_PLAYER, _local_1);
        addPlayerToJumpMap(playerId);
    }
    function addPlayerToJumpMap(playerId) {
        jumpingPlayersAnimationMap[playerId] = true;
    }
    function removePlayerFromJumpMap(playerId) {
        jumpingPlayersAnimationMap[playerId] = null;
    }
    function isPlayerJumping(playerId) {
        return(((jumpingPlayersAnimationMap[playerId] == true) ? true : false));
    }
    function clearPlayerJumpingMap() {
        jumpingPlayersAnimationMap = {};
    }
    function handleGetCoinTotal(serverEventData) {
        var _local_1 = serverEventData[1];
        setMyPlayerTotalCoins(_local_1);
    }
    function handleGetCurrencies(serverEventData) {
        var _local_6 = getMyPlayerObject();
        var _local_5 = serverEventData[1].split(",");
        var _local_1 = 0;
        while (_local_1 < _local_5.length) {
            var _local_2 = _local_5[_local_1].split("|");
            var _local_3 = Number(_local_2[0]);
            var _local_4 = Number(_local_2[1]);
            _local_6.currencies[_local_3] = _local_4;
            _local_1++;
        }
        updateListeners(PLAYER_CURRENCIES_UPDATED, _local_6.player_id);
    }
    function sendGetCurrencies() {
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.ITEM_HANDLER + "#") + AIRTOWER.GET_CURRENCIES, [], AIRTOWER.STRING_TYPE, -1);
    }
    function sendGetABTestData() {
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_HANDLER + "#") + AIRTOWER.GET_AB_TEST_DATA, [], AIRTOWER.STRING_TYPE, -1);
    }
    function handleGetABTestData(serverResponse) {
        var _local_4 = com.clubpenguin.util.JSONParser.parse(serverResponse[1]);
        abTestModel.setAllTestData(_local_4);
        for (var _local_6 in _local_4) {
            var _local_2 = "variant";
            var _local_3 = _local_4[_local_6];
            var _local_1 = _local_3[_local_2];
            if (_local_1 != undefined) {
                var _local_5 = ((Number(_local_1) == 0) ? 1 : 0);
            }
        }
    }
    function hasSafetyQuizReward() {
        return(isItemInMyInventory(SAFETY_SWEATER_ITEM_ID));
    }
    function getMyInventoryList() {
        showLoading();
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.ITEM_HANDLER + "#") + AIRTOWER.GET_INVENTORY_LIST, [], "str", getCurrentServerRoomId());
    }
    function handleMyGetInventoryList(obj) {
        var _local_6 = obj.shift();
        var _local_4 = new Array();
        var _local_5;
        $d("[shell] handleMyGetInventoryList() -> Parsing player inventory");
        var _local_1 = 0;
        while (_local_1 < obj.length) {
            var _local_2 = getInventoryObjectById(Number(obj[_local_1]));
            if (_local_2 != undefined) {
                _local_4.push(_local_2);
            } else {
                $e("[shell] handleGetInventoryList() -> Trying to add a inventory item which did not exist in crumbs. id: " + obj[_local_5]);
            }
            _local_1++;
        }
        setMyInventoryArray(_local_4);
        updateListeners(UPDATE_INVENTORY, undefined);
        SHELL.sendMyPlayerData(getMyPlayerObject());
    }
    function getInventoryObjectById(id) {
        var _local_1 = getInventoryCrumbsObject();
        if (_local_1[id] != undefined) {
            return(_local_1[id]);
        }
        if (id != 0) {
            $e("[shell] getInventoryObjectById() -> Inventory id was not found in the crumbs, so it was not added to player inventory. Inventory Id: " + id);
        }
        return(undefined);
    }
    function getInventoryTypeById(id) {
        if (isInventoryInCrumbs(id)) {
            var _local_1 = getInventoryCrumbsObject();
            return(_local_1[id].type);
        }
        $e("[shell] getInventoryTypeById() -> Inventory id was not found in the crumbs. Inventory Id: " + id);
        return(undefined);
    }
    function isInventoryInCrumbs(id) {
        var _local_1 = getInventoryCrumbsObject();
        var _local_4 = _local_1[id];
        var _local_2;
        for (_local_2 in _local_1) {
            if (_local_1[_local_2].id == id) {
                return(true);
            }
        }
        return(false);
    }
    function isInventoryMemberOnly(id) {
        if (!isNaN(id)) {
            if (isInventoryInCrumbs(id)) {
                var _local_2 = getInventoryCrumbsObject();
                var _local_3 = _local_2[id];
                return(_local_3.is_member);
            }
            $e("[shell] isInventoryMemberOnly() -> Inventory id was not found in the crumbs. Inventory Id: " + id);
        } else {
            $e("[shell] isInventoryMemberOnly() -> Id was not a valid number: " + id);
        }
    }
    function isMyPlayerTourGuide() {
        var _local_2 = getMyInventoryArray();
        var _local_3 = _local_2.length;
        var _local_1 = 0;
        while (_local_1 < _local_3) {
            if (_local_2[_local_1].make_tour_guide == true) {
                return(true);
            }
            _local_1++;
        }
        return(false);
    }
    function isMyPlayerSecretAgent() {
        var _local_2 = getMyInventoryArray();
        var _local_3 = _local_2.length;
        var _local_1 = 0;
        while (_local_1 < _local_3) {
            if (_local_2[_local_1].make_secret_agent == true) {
                return(true);
            }
            _local_1++;
        }
        return(false);
    }
    function isItemInMyInventory(id) {
        if (!isNaN(id)) {
            var _local_2 = getMyInventoryArray();
            var _local_3 = _local_2.length;
            var _local_1 = 0;
            while (_local_1 < _local_3) {
                if (_local_2[_local_1].id == id) {
                    return(true);
                }
                _local_1++;
            }
            return(false);
        }
        $e("[shell] isItemInMyInventory() -> Id was not a valid number: " + id);
    }
    function isFurnitureItemInMyInventory(id) {
        var _local_2 = furnitureType.value + itemID;
        var _local_1 = com.clubpenguin.igloo.vo.items.IglooInventoryItemVO(_inventory.getItemByID(_local_2));
        return(((_local_1 != null) ? true : false));
    }
    function sendBuyPuffleCareItem(id) {
        if (!isNaN(id)) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PET_HANDLER + "#") + AIRTOWER.ADD_PUFFLE_CARE_ITEM, [id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] sendBuyPuffleCareItem() -> Invalid puffle care item id. Puffle Care Item Id: " + id);
        }
    }
    function handleSendBuyPuffleCareItem(obj) {
        var _local_4 = Number(obj.shift());
        var _local_3 = Number(obj[0]);
        setMyPlayerTotalCoins(_local_3);
        var _local_1 = new Object();
        _local_1.success = true;
        _local_1.quantity = obj[2];
        updateListeners(BUY_PUFFLE_CARE_ITEM, _local_1);
    }
    function addNinjaItems() {
        var _local_1 = false;
        if (!isItemInMyInventory(AMULET_ITEM_ID)) {
            sendBuyInventory(AMULET_ITEM_ID);
        }
        if (!isItemInMyInventory(STARTER_DECK_ITEM_ID)) {
            _local_1 = true;
            sendBuyInventory(STARTER_DECK_ITEM_ID);
        }
        if (!isItemInMyInventory(FIRE_DECK_ITEM_ID)) {
            _local_1 = true;
            sendBuyInventory(FIRE_DECK_ITEM_ID);
        }
        if (!isItemInMyInventory(WATER_DECK_ITEM_ID)) {
            _local_1 = true;
            sendBuyInventory(WATER_DECK_ITEM_ID);
        }
        if (!isItemInMyInventory(SNOW_DECK_ITEM_ID)) {
            _local_1 = true;
            sendBuyInventory(SNOW_DECK_ITEM_ID);
        }
        if (_local_1) {
            sendClearCardsCache();
        }
    }
    function sendBuyInventory(id, logMoneyEvent) {
        if (logMoneyEvent == undefined) {
            logMoneyEvent = true;
        }
        INTERFACE.waitingToLogMoneyEvent = logMoneyEvent;
        if (!isNaN(id)) {
            if (isInventoryInCrumbs(id)) {
                var _local_3 = getInventoryCrumbsObject();
                var _local_4 = _local_3[id];
                if (_local_4.is_member && (!isMyPlayerMember())) {
                    var _local_2 = new Object();
                    _local_2.item_id = id;
                    _local_2.success = false;
                    _local_2.player_id = getMyPlayerId();
                    updateListeners(BUY_INVENTORY, _local_2);
                    $d("[shell] sendBuyInventory() -> Trying to buy a member item when not a member. Item id: " + id);
                } else {
                    AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.ITEM_HANDLER + "#") + AIRTOWER.BUY_INVENTORY, [id], "str", getCurrentServerRoomId());
                }
            } else {
                $e("[shell] sendBuyInventory() -> Inventory id was not found in the crumbs. Inventory Id: " + id);
            }
        } else {
            $e("[shell] sendBuyInventory() -> Id was not a real number: " + id);
        }
    }
    function sendBuyCards() {
        if (isMyPlayerMember()) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.CARD_HANDLER + "#") + AIRTOWER.BUY_POWER_CARDS, null, "str", getCurrentServerRoomId());
        } else {
            var _local_1 = new Object();
            _local_1.success = false;
            updateListeners(BUY_CARDS, _local_1);
            $d("[shell] sendBuyInventory() -> Trying to buy a member item when not a member. Item id: " + id);
        }
    }
    function sendCheckInventory(itemID, playerID) {
        if (isNaN(itemID) || (isNaN(playerID))) {
            $e(((("[shell] sendCheckInventory() -> invalid item or player ID. (itemID:" + itemID) + ", playerID:") + playerID) + ")");
            return(undefined);
        }
        if (!isInventoryInCrumbs(itemID)) {
            $e(((("[shell] sendCheckInventory() -> item ID not found in crumbs. (itemID:" + itemID) + ", playerID:") + playerID) + ")");
            return(undefined);
        }
        if (playerID == getMyPlayerId()) {
            var _local_3;
            if (isItemInMyInventory(itemID)) {
                _local_3 = "1";
            } else {
                _local_3 = "0";
            }
            handleCheckInventory([0, itemID, playerID, _local_3]);
            return(undefined);
        }
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.ITEM_HANDLER + "#") + AIRTOWER.CHECK_INVENTORY, [itemID, playerID], "str", getCurrentServerRoomId());
    }
    function addItemToInventory(itemID) {
        var _local_1 = {success:false, message:null, item_id:itemID, player_id:getMyPlayerId()};
        var _local_4 = getInventoryObjectById(itemID);
        var _local_2 = getMyInventoryArray();
        if (!isItemInMyInventory(itemID)) {
            _local_1.success = true;
            _local_2.push(_local_4);
        } else {
            _local_1.success = false;
            _local_1.message = "trying to add a duplicate item to player inventory";
            $d("[shell] handleBuyInventory() -> " + _local_1.message);
        }
        updateListeners(BUY_INVENTORY, _local_1);
        return(_local_1);
    }
    function removeItemFromInventory(itemID) {
        var _local_2 = inventory_arr.length;
        var _local_1 = 0;
        while (_local_1 < _local_2) {
            if (inventory_arr[_local_1].id == itemID) {
                inventory_arr.splice(_local_1, 1);
                return(true);
            }
            _local_1++;
        }
        return(false);
    }
    function handleBuyInventory(obj) {
        var _local_8 = obj.shift();
        var _local_1 = Number(obj[0]);
        var _local_6 = 8009;
        var _local_4 = 800;
        if (_local_1 == _local_6) {
            removeItemFromInventory(_local_4);
        }
        var _local_3 = Number(obj[1]);
        if (isNaN(_local_3)) {
            _local_3 = 0;
        }
        setMyPlayerTotalCoins(_local_3);
        var _local_7 = getInventoryObjectById(_local_1);
        var _local_5 = getMyInventoryArray();
        if (!isItemInMyInventory(_local_1)) {
            obj = new Object();
            obj.item_id = _local_1;
            obj.player_id = getMyPlayerId();
            obj.success = true;
            updateListeners(BUY_INVENTORY, obj);
            _local_5.unshift(_local_7);
        } else {
            obj = new Object();
            obj.item_id = _local_1;
            obj.player_id = getMyPlayerId();
            obj.success = false;
            updateListeners(BUY_INVENTORY, obj);
            $d("[shell] handleBuyInventory() -> trying to add a duplicate item to player inventory");
        }
    }
    function handleCheckInventory(serverEventData) {
        var _local_6 = Number(serverEventData.shift());
        var _local_2 = Number(serverEventData[0]);
        var _local_3 = Number(serverEventData[1]);
        var _local_5 = Number(serverEventData[2]) == 1;
        if (isNaN(_local_3)) {
            return(undefined);
        }
        if (isNaN(_local_2)) {
            return(undefined);
        }
        var _local_1 = {};
        _local_1.playerID = _local_3;
        _local_1.itemID = _local_2;
        _local_1.isOwned = _local_5;
        updateListeners(CHECK_INVENTORY, _local_1);
    }
    function handleBuyCards(obj) {
        for (var _local_2 in obj) {
        }
        var _local_5 = obj.shift();
        if (obj[0] == NOT_ENOUGH_COINS) {
            obj = new Object();
            obj.success = false;
            updateListeners(BUY_CARDS, obj);
            $d("[shell] handleBuyCards() -> Error adding cards");
            return(undefined);
        }
        var _local_4 = new Object();
        _local_4.success = true;
        _local_4.cards = obj[0];
        var _local_3 = Number(obj[1]);
        if (isNaN(_local_3)) {
            _local_3 = 0;
        }
        setMyPlayerTotalCoins(_local_3);
        updateListeners(BUY_CARDS, _local_4);
    }
    function setInventoryCrumbsObject(obj) {
        var _local_1;
        for (_local_1 in obj) {
            obj[_local_1].id = Number(_local_1);
            obj[_local_1].name = obj[_local_1].prompt;
            obj[_local_1].type = obj[_local_1].type - 1;
        }
        inventory_crumbs = obj;
    }
    function getInventoryCrumbsObject() {
        return(inventory_crumbs);
    }
    function getMyInventoryArray() {
        return(inventory_arr);
    }
    function setMyInventoryArray(arr) {
        inventory_arr = [];
        var _local_1 = 0;
        while (_local_1 < arr.length) {
            inventory_arr.push(arr[_local_1]);
            _local_1++;
        }
		inventory_arr.sortOn(["type", "id"], [Array.CASEINSENSITIVE, Array.NUMERIC])
    }
    function getMySortedInventoryArray() {
        return(inventory_arr.sortOn(["type", "id"], [Array.CASEINSENSITIVE, Array.DESCENDING]));
    }
    function setPlayerColoursObject(obj) {
        player_colours = obj;
    }
    function getPlayerColoursObject() {
        return(player_colours);
    }
    function getBeltColourHexFromRank(rank) {
        var _local_1 = [null, 16777215, 16776960, 16737792, 3394560, 13260, 13369344, 6684927, 6697728, 0, 0];
        return(_local_1[rank]);
    }
    function getPlayerColorName(colorId) {
        switch (colorId) {
            case 0 : 
                return("blue");
            case 1 : 
                return("blue");
            case 2 : 
                return("green");
            case 3 : 
                return("pink");
            case 4 : 
                return("black");
            case 5 : 
                return("red");
            case 6 : 
                return("orange");
            case 7 : 
                return("yellow");
            case 8 : 
                return("dark_purple");
            case 9 : 
                return("brown");
            case 10 : 
                return("peach");
            case 11 : 
                return("dark_green");
            case 12 : 
                return("light_blue");
            case 13 : 
                return("lime_green");
            case 14 : 
                return("grey");
            case 15 : 
                return("aqua");
            case 16 : 
                return("arctic_white");
			case 17 :
				return("dot_lavender");
			case 18 :
				return("old_blue");
			case 19 :
				return("lavender");
			case 20 :
				return("maroon");
        }
        return("blue");
    }
    function getPlayerHexFromId(id) {
        var _local_1 = getPlayerColoursObject();
        if (_local_1[id] != undefined) {
            return(_local_1[id]);
        }
        return(_local_1[0]);
    }
    function setFrameHackCrumbs(obj) {
        frame_hacks = new Object();
        var _local_1;
        var _local_3;
        var _local_6;
        var _local_5;
        for (_local_1 in obj) {
            frame_hacks[_local_1] = new Object();
            var _local_4;
            for (_local_4 in obj[_local_1]) {
                _local_3 = obj[_local_1][_local_4];
                _local_5 = buildFrameHacksString(_local_3);
                frame_hacks[_local_1][_local_5] = _local_3.secret_frame;
            }
        }
        for (i in obj) {
            delete obj[i];
        }
    }
    function buildFrameHacksString(obj) {
        var _local_1 = new Array();
        var _local_6 = ajustRedemptionItemIDsNumber(Number(obj.head));
        var _local_3 = ajustRedemptionItemIDsNumber(Number(obj.face));
        var _local_7 = ajustRedemptionItemIDsNumber(Number(obj.neck));
        var _local_8 = ajustRedemptionItemIDsNumber(Number(obj.body));
        var _local_4 = ajustRedemptionItemIDsNumber(Number(obj.hand));
        var _local_5 = ajustRedemptionItemIDsNumber(Number(obj.feet));
        _local_1.push(_local_6);
        _local_1.push(_local_3);
        _local_1.push(_local_7);
        _local_1.push(_local_8);
        _local_1.push(_local_4);
        _local_1.push(_local_5);
        return(_local_1.join("|"));
    }
    function ajustRedemptionItemIDsNumber(itemID) {
        var _local_2 = itemID;
        if ((itemID > 10000) && (itemID < 20000)) {
            _local_2 = itemID - 10000;
        } else if ((itemID >= 30000) && (itemID < 40000)) {
            _local_2 = itemID - 10000;
        }
        return(_local_2);
    }
    function getSecretFrame(player_id, frame) {
        if (!isNaN(player_id)) {
            if (!isNaN(frame)) {
                var _local_3 = getPlayerObjectById(player_id);
                var _local_1 = getFrameHackCrumbs()[frame];
                if (_local_1[_local_3.frame_hack] != undefined) {
                    return(_local_1[_local_3.frame_hack]);
                }
            } else {
                $e("[shell] getSecretFrame() -> Not a real number passed for frame! frame: " + frame);
            }
        } else {
            $e("[shell] getSecretFrame() -> Not a real number passed for player_id! player_id: " + player_id);
        }
        return(frame);
    }
    function getDanceFrame(frameHackString) {
        var _local_2 = getFrameHackCrumbs()[SHELL.DANCE_FRAME];
        var _local_1 = _local_2[frameHackString];
        if (_local_1 != undefined) {
            return(_local_1);
        }
        return(SHELL.DANCE_FRAME);
    }
    function getWaveFrame(frameHackString) {
        var _local_2 = getFrameHackCrumbs()[SHELL.WAVE_FRAME];
        var _local_1 = _local_2[frameHackString];
        if (_local_1 != undefined) {
            return(_local_1);
        }
        return(SHELL.WAVE_FRAME);
    }
    function getFrameHackCrumbs() {
        return(frame_hacks);
    }
    function getFurnitureListFromServer(regetList) {
        var furniture_list = getFurnitureList();
        if (regetList == undefined) {
            regetList = false;
        }
        if ((furniture_list == undefined) || (regetList)) {
            if (regetList) {
                AIRTOWER.addListener(AIRTOWER.GET_FURNITURE_LIST, handleGetFurnitureListFromServer);
            }
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.IGLOO_HANDLER + "#") + AIRTOWER.GET_FURNITURE_LIST, [getMyPlayerId()], "str", getCurrentServerRoomId());
        } else {
            updateListeners(GET_FURNITURE_LIST, furniture_list);
        }
    }
    function handleGetFurnitureListFromServer(obj) {
        var _local_18 = obj.shift();
        var _local_13 = new Array();
        var _local_1;
        var _local_19;
        var _local_20;
        var _local_5;
        var _local_17 = obj[0];
        var _local_8 = _local_17.split(",");
        var _local_2 = 0;
        while (_local_2 < _local_8.length) {
            var _local_7 = _local_8[_local_2].split("|");
            var _local_6 = _local_7[0];
            _local_5 = _local_7[2];
            _local_1 = getFurnitureFromCrumbsById(_local_6);
            if (_local_1 != undefined) {
                _local_1.total = _local_5;
                _local_1.available = _local_5;
                _local_1.frame_1 = 1;
                _local_1.frame_2 = 1;
                _local_13.push(_local_1);
            } else {
                $e("[shell] handleGetFurnitureListFromServer() -> Could not find the furniture in the crumbs!");
            }
            _local_2++;
        }
        var _local_16 = obj[2];
        var _local_10 = _local_16.split(",");
        var _local_11 = [];
        _local_2 = 0;
        while (_local_2 < _local_10.length) {
            var _local_7 = _local_10[_local_2].split("|");
            var _local_6 = _local_7[0];
            var _local_3 = {};
            _local_3.item_id = _local_6;
            _local_11.push(_local_3);
            _local_2++;
        }
        var _local_15 = obj[3];
        var _local_9 = _local_15.split(",");
        var _local_12 = [];
        _local_2 = 0;
        while (_local_2 < _local_9.length) {
            var _local_7 = _local_9[_local_2].split("|");
            var _local_6 = _local_7[0];
            var _local_4 = {};
            _local_4.item_id = _local_6;
            _local_12.push(_local_4);
            _local_2++;
        }
        setFurnitureList(_local_13);
        setIglooBuildingList(_local_11);
        setIglooLocationList(_local_12);
        updateListeners(GET_FURNITURE_LIST, undefined);
        AIRTOWER.removeListener(AIRTOWER.GET_FURNITURE_LIST, handleGetFurnitureListFromServer);
    }
    function setAvailableCounts() {
        var _local_3 = getFurnitureList();
        var _local_4 = getPlayerIglooFurniture();
        var _local_6 = _local_3.length;
        var _local_5 = _local_4.length;
        var _local_2 = 0;
        var _local_1 = 0;
        while (_local_2 < _local_6) {
            _local_1 = 0;
            while (_local_1 < _local_5) {
                if (_local_3[_local_2].item_id == _local_4[_local_1].item_id) {
                    _local_3[_local_2].available--;
                }
                _local_1++;
            }
            _local_2++;
        }
    }
    function sendBuyFurniture(id, ignoreListeners) {
        if (ignoreListeners == undefined) {
            ignoreListeners = false;
        }
        _buyFurnitureIgnoreListeners = ignoreListeners;
        if (!isNaN(id)) {
            if (isFurnitureInCrumbs(id)) {
                var _local_5 = getFurnitureCrumbsObject();
                var _local_4 = _local_5[id];
                if ((id == CJ_MAT_ID) && (!_matCountSet)) {
                    if (_local_4.total == undefined) {
                        _cjMatAmount = 0;
                    } else {
                        _cjMatAmount = _local_4.total;
                    }
                    _matCountSet = true;
                }
                if ((id == CJ_MAT_ID) && ((_cjMatAmount == 4) || (_local_4.total == 4))) {
                    var _local_6 = _global.getCurrentInterface();
                    _local_6.closePrompt();
                    $e("[SHELL] sendBuyFurniture -> Max CJ Mats", {error_code:MAX_CJ_MATS});
                    return(undefined);
                }
                if (id == CJ_MAT_ID) {
                    _cjMatAmount++;
                }
                if ((((!isMyPlayerMember()) && (item_ob.is_member_only == 1)) || (item_ob.is_member_only == "1")) || (item_ob.is_member_only == true)) {
                    var _local_3 = new Object();
                    _local_3.item_id = id;
                    _local_3.success = false;
                    _local_3.player_id = SHELL.getMyPlayerId();
                    if (!_buyFurnitureIgnoreListeners) {
                        updateListeners(BUY_FURNITURE, _local_3);
                    }
                    $d("[shell] sendBuyFurniture() -> You have to be a member to buy furniture!");
                } else {
                    AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.IGLOO_HANDLER + "#") + AIRTOWER.BUY_FURNITURE, [id], "str", getCurrentServerRoomId());
                }
            } else {
                $e("[shell] sendBuyFurniture() -> Inventory id was not found in the crumbs. Inventory Id: " + id);
            }
        } else {
            $e("[shell] sendBuyFurniture() -> Id was not a real number: " + id);
        }
    }
    function handleSendBuyFurniture(obj) {
        for (var _local_2 in obj) {
        }
        var _local_6 = Number(obj.shift());
        var _local_3 = Number(obj[0]);
        var _local_4 = Number(obj[1]);
        var _local_5 = Number(obj[2]);
        setMyPlayerTotalCoins(_local_4);
        processBoughtFurnitureItem(_local_3, _local_5, 1);
    }
    function handleSendBuyMultipleFurniture(obj) {
        for (var _local_7 in obj) {
        }
        var _local_9 = Number(obj.shift());
        var _local_8 = Number(obj[0]);
        var _local_6 = Number(obj[1]);
        var _local_2 = 2;
        while (_local_2 < obj.length) {
            var _local_1 = obj[_local_2];
            var _local_4 = Number(_local_1.substr(0, _local_1.lastIndexOf("|")));
            var _local_5 = Number(_local_1.substr(_local_1.lastIndexOf("|") + 1));
            processBoughtFurnitureItem(_local_4, _local_6, _local_5);
            _local_2++;
        }
        setMyPlayerTotalCoins(_local_8);
    }
    function processBoughtFurnitureItem(item_id, dateOfLastPurchase, quantity) {
        var _local_7 = getFurnitureFromCrumbsById(item_id);
        if (_local_7 != undefined) {
            _local_7.available++;
            var _local_2 = getFurnitureList();
            if ((_local_2.length = 0)) {
                return(undefined);
            }
            var _local_4 = false;
            var _local_6 = _local_2.length;
            var _local_1 = 0;
            while (_local_1 < _local_6) {
                if (_local_2[_local_1].item_id == item_id) {
                    _local_4 = true;
                    break;
                }
                _local_1++;
            }
            if (!_local_4) {
                _local_7.available = quantity;
                _local_7.total = quantity;
                _local_2.push(_local_7);
            }
            var _local_5 = new Object();
            _local_5.item_id = item_id;
            _local_5.success = true;
            _local_5.dateOfLastPurchase = dateOfLastPurchase;
            _local_5.player_id = SHELL.getMyPlayerId();
            _local_5.quantity = quantity;
            if ((!_buyFurnitureIgnoreListeners) || (!_local_5.success)) {
                updateListeners(BUY_FURNITURE, _local_5);
                _buyFurnitureIgnoreListeners = false;
            }
        } else {
            $e("[shell] handleSendBuyFurniture() -> Furniture was not found in the crumbs! item_id: " + item_id);
        }
    }
    function getFurnitureTypeById(id) {
        if (!isNaN(id)) {
            var _local_1 = getFurnitureFromCrumbsById(id);
            if (_local_1 != undefined) {
                return(_local_1.type);
            }
            $e("[shell] getFurnitureTypeById() -> Furniture object is undefined! item_id: " + id);
            return(undefined);
        }
        $e("[shell] getFurnitureTypeById() -> Not a real number for furniture ");
    }
    function getFurnitureByType(type) {
        if (!isNaN(type)) {
            var _local_2 = getSortedFurnitureList();
            var _local_3 = new Array();
            var _local_4 = _local_2.length;
            var _local_1 = 0;
            while (_local_1 < _local_4) {
                if (_local_2[_local_1].sort == type) {
                    _local_3.push(_local_2[_local_1]);
                }
                _local_1++;
            }
            return(_local_3);
        }
        $e("[shell] getFurnitureByType() -> Not a real number for type! type: " + type);
    }
    function getFurnitureFromCrumbsById(id) {
        if (!isNaN(id)) {
            var _local_3 = getFurnitureCrumbsObject();
            var _local_1 = _local_3[id];
            if (_local_1 != undefined) {
                return(_local_1);
            }
            $e("[shell] getFurnitureFromCrumbsById() -> Could not find item in crumbs! item_id: " + id);
            return(undefined);
        }
        $e("[shell] getFurnitureFromCrumbsById() -> Id is not a real number. item_id: " + id);
    }
    function getFurnitureObjectById(id) {
        if (!isNaN(id)) {
            var _local_3 = getFurnitureCrumbsObject();
            var _local_1 = _local_3[id];
            if (_local_1 != undefined) {
                return(_local_1);
            }
            $e("[shell] getFurnitureObjectById() -> Could not find item in crumbs! item_id: " + id);
            return(undefined);
        }
        $e("[shell] getFurnitureObjectById() -> Id is not a real number. item_id: " + id);
    }
    function isFurnitureInMyInventory(id) {
        if (!isNaN(id)) {
            var _local_2 = getFurnitureList();
            var _local_1 = 0;
            while (_local_1 < _local_2.length) {
                if (_local_2[_local_1].item_id == id) {
                    return(true);
                }
                _local_1++;
            }
            return(false);
        }
        $e("[shell] isFurnitureInMyInventory() -> Id was not a valid number: " + id);
    }
    function isIglooBuildingInMyInventory(id) {
        if (!isNaN(id)) {
            var _local_2 = getIglooBuildingList();
            var _local_1 = 0;
            while (_local_1 < _local_2.length) {
                if (_local_2[_local_1].item_id == id) {
                    return(true);
                }
                _local_1++;
            }
            return(false);
        }
        $e("[shell] isIglooBuildingInMyInventory() -> Id was not a valid number: " + id);
    }
    function isIglooLocationInMyInventory(id) {
        if (!isNaN(id)) {
            var _local_2 = getIglooLocationList();
            var _local_1 = 0;
            while (_local_1 < _local_2.length) {
                if (_local_2[_local_1].item_id == id) {
                    return(true);
                }
                _local_1++;
            }
            return(false);
        }
        $e("[shell] isIglooLocationInMyInventory() -> Id was not a valid number: " + id);
    }
    function addIglooToInventory(iglooId) {
        if (!isNaN(iglooId)) {
            if (!isIglooBuildingInMyInventory(iglooId)) {
                var _local_2 = {};
                _local_2.item_id = iglooId;
                igloo_building_list.push(_local_2);
                return(true);
            }
            $e(("[shell] addIglooToInventory() -> iglooId: " + iglooId) + " was previously added to inventory.");
        } else {
            $e("[shell] addIglooToInventory() -> iglooId was not a valid number: " + iglooId);
        }
        return(false);
    }
    function isFurnitureInCrumbs(id) {
        var _local_1 = getFurnitureCrumbsObject();
        var _local_4 = _local_1[id];
        var _local_2;
        for (_local_2 in _local_1) {
            if (_local_1[_local_2].item_id == id) {
                return(true);
            }
        }
        return(false);
    }
    function setFurnitureCrumbsObject(obj) {
        var _local_1;
        for (_local_1 in obj) {
            obj[_local_1].item_id = Number(_local_1);
            obj[_local_1].id = Number(_local_1);
            obj[_local_1].name = obj[_local_1].prompt;
            obj[_local_1].sort = obj[_local_1].sort - 1;
            obj[_local_1].type = obj[_local_1].type - 1;
            obj[_local_1].interactive = obj[_local_1].interactive - 1;
        }
        furniture_crumbs = obj;
    }
    function getFurnitureCrumbsObject() {
        return(furniture_crumbs);
    }
    function setAvailableInteractionTypes(types) {
        if (types == undefined) {
            return(undefined);
        }
        updateListeners(FURNITURE_INTERACTIVE_TYPES, types);
    }
    function getSortedFurnitureList() {
        return(getFurnitureList().sortOn(["type", "id"], [Array.CASEINSENSITIVE, Array.DESCENDING]));
    }
    function getFurnitureList() {
        return(furniture_list);
    }
    function setFurnitureList(arr) {
        furniture_list = arr;
    }
    function getIglooBuildingList() {
        return(igloo_building_list);
    }
    function setIglooBuildingList(arr) {
        igloo_building_list = arr;
    }
    function getIglooLocationList() {
        return(igloo_location_list);
    }
    function setIglooLocationList(arr) {
        igloo_location_list = arr;
    }
    function sendBuyIglooFloor(id) {
        if (!isNaN(id)) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.IGLOO_HANDLER + "#") + AIRTOWER.UPDATE_FLOOR, [id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] saveRoomFloor() -> The floor id was not a valid number. floor_id: " + id);
        }
    }
    function handleSendBuyIglooFloor(obj) {
        var _local_5 = obj.shift();
        var _local_1 = Number(obj[0]);
        var _local_4 = Number(obj[1]);
        if (!isNaN(_local_1)) {
            setMyPlayerTotalCoins(_local_4);
            setCurrentIglooFloorId(_local_1);
            var _local_2 = {};
            _local_2.success = true;
            _local_2.floor_id = _local_1;
            updateListeners(BUY_IGLOO_FLOOR, _local_2);
        } else {
            $e("[shell] handleSendBuyIglooFloor() -> Floor id is not a real number. floor_id: " + _local_1);
            var _local_2 = {};
            _local_2.success = false;
            updateListeners(BUY_IGLOO_FLOOR, _local_2);
        }
    }
    function sendBuyIglooType(id) {
        if (!isNaN(id)) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.IGLOO_HANDLER + "#") + AIRTOWER.UPDATE_IGLOO_TYPE, [id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] sendBuyIglooType() -> Not a real number passed for id. id: " + id);
        }
    }
    function handleSendBuyIglooType(obj) {
        var _local_6 = obj[0];
        var _local_1 = Number(obj[1]);
        var _local_5 = Number(obj[2]);
        var _local_4 = Number(obj[3]);
        if (!isNaN(_local_1)) {
            setMyPlayerTotalCoins(_local_5);
            var _local_2 = {};
            _local_2.success = true;
            _local_2.type_id = _local_1;
            addIglooToInventoryCache(_local_1);
            updateListeners(BUY_IGLOO_TYPE, _local_2);
        } else {
            $e("[shell] handleSendBuyIglooType() -> Type id is not a real number! type_id: " + _local_1);
            var _local_2 = {};
            _local_2.success = false;
            _local_2.error = _local_4;
            updateListeners(BUY_IGLOO_TYPE, _local_2);
        }
    }
    function sendBuyIglooLocation(id) {
        if (!isNaN(id)) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.IGLOO_HANDLER + "#") + AIRTOWER.BUY_IGLOO_LOCATION, [id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] sendBuyIglooLocation() -> Not a real number passed for id. id: " + id);
        }
    }
    function handleSendBuyIglooLocation(obj) {
        var _local_6 = obj[0];
        var _local_2 = Number(obj[1]);
        var _local_5 = Number(obj[2]);
        var _local_4 = Number(obj[3]);
        if (!isNaN(_local_2)) {
            setMyPlayerTotalCoins(_local_5);
            var _local_1 = {};
            _local_1.success = true;
            _local_1.location_id = _local_2;
            updateListeners(BUY_IGLOO_LOCATION, _local_1);
        } else {
            $e("[shell] handleSendBuyIglooLocation() -> Type id is not a real number! type_id: " + type_id);
            var _local_1 = {};
            _local_1.success = false;
            _local_1.error = _local_4;
            updateListeners(BUY_IGLOO_LOCATION, _local_1);
        }
    }
    function sendGetOwnedIgloos() {
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.IGLOO_HANDLER + "#") + AIRTOWER.GET_OWNED_IGLOOS, [], "str", getCurrentServerRoomId());
    }
    function handleGetOwnedIgloos(obj) {
        var _local_6 = Number(obj[0]);
        var _local_5 = String(obj[1]);
        ownedIgloos = [];
        var _local_8 = getDefaultIglooObject();
        var _local_3 = _local_5.split("|");
        var _local_1 = 0;
        while (_local_1 < _local_3.length) {
            var _local_4 = {};
            var _local_2 = Number(_local_3[_local_1]);
            addIglooToInventoryCache(_local_2);
            _local_1++;
        }
        igloosCached = true;
        updateListeners(GET_OWNED_IGLOOS, ownedIgloos);
    }
    function sendActivateIgloo(id) {
        if (!isNaN(id)) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.IGLOO_HANDLER + "#") + AIRTOWER.ACTIVATE_IGLOO, [id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] sendActivateIgloo() -> Not a real number passed for id. id: " + id);
        }
    }
    function unlockIgloo() {
        if (isIglooLocked()) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.IGLOO_HANDLER + "#") + AIRTOWER.UNLOCK_IGLOO, [getMyPlayerId(), getMyPlayerNickname()], "str", getCurrentServerRoomId());
            setIglooAsUnLocked();
            updateListeners(IGLOO_LOCK_STATUS, {is_locked:false});
        } else {
            $d("[shell] unlockIgloo() -> Trying to unlock an igloo which is already unlocked!");
        }
    }
    function lockIgloo() {
        if (!isIglooLocked()) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.IGLOO_HANDLER + "#") + AIRTOWER.LOCK_IGLOO, [getMyPlayerId()], "str", getCurrentServerRoomId());
            setIglooAsLocked();
            updateListeners(IGLOO_LOCK_STATUS, {is_locked:true});
        } else {
            $d("[shell] lockIgloo() -> Trying to lock an igloo which is already locked!");
        }
    }
    function playIglooMusicByID(music_id) {
        if (music_id == getIglooMusicId()) {
            return(undefined);
        }
        if (!isNaN(music_id)) {
            setIglooMusicId(music_id);
            startMusicById(music_id);
        } else {
            $e("[shell] updatePlayerMusic() -> music id is not a real number. music_id: " + music_id);
        }
    }
    function handleJumpToIgloo(event) {
        var _local_3 = Number(event[0]);
        var _local_1 = Number(event[1]);
        sendJoinPlayerIgloo(_local_1 - 2000);
    }
    function sendJoinPlayerIgloo(player_id, puffleIDToShowInCare) {
        if (isLastJoinedRoomIgloo && (previousIglooOwnerID == player_id)) {
            return(undefined);
        }
        if (!isNaN(player_id)) {
            if (((ENGINE.playerHostedRoomType != com.clubpenguin.world.rooms.common.RoomConstants.PLAYER_HOSTED_ROOM_IGLOO) || (igloo_player_id != player_id)) || (getCurrentRoomId() != getLastRoomId())) {
                loadRoomStartTime = getTimer();
                _trackerAS2.sendToAS3StartAssetLoad("load.igloo");
                this.previousIglooOwnerID = player_id;
                igloo_player_id = player_id;
                var _local_3 = new Object();
                _local_3.name = "igloo";
                _local_3.path = ((getClientPath() + "") + IGLOO_PATH) + ".swf";
                _local_3.room_key = "igloo";
                ENGINE.loadRoom(_local_3, com.clubpenguin.world.rooms.common.RoomConstants.PLAYER_HOSTED_ROOM_IGLOO);
                puffleManager.setPuffleIDToShowInCare(puffleIDToShowInCare);
                sendAS3LeavingRoom();
            } else if ((player_id == getMyPlayerId()) && (puffleIDToShowInCare != undefined)) {
                puffleManager.setPuffleIDToShowInCare(puffleIDToShowInCare);
                puffleManager.checkOpenPuffleCare();
            } else {
                $e("[shell] sendJoinPlayerIgloo() -> Your trying to join a room your already in! room_id: " + getCurrentRoomId());
            }
        } else {
            $e("[shell] sendJoinPlayerIgloo() -> Player id is not a real number. player_id: " + player_id);
        }
        isLastJoinedRoomIgloo = true;
    }
    function getPlayerIglooDetails() {
        if (!isNaN(igloo_player_id)) {
            showLoading("");
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.IGLOO_HANDLER + "#") + AIRTOWER.GET_IGLOO_DETAILS, [igloo_player_id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] getPlayerIgloo() -> Not a real number passed for player id. player_id: " + igloo_player_id);
        }
    }
    function handleGetPlayerIgloo(event) {
        cjMatWaddleID = 200;
        var _local_16 = Number(event[0]);
        var _local_9 = Number(event[1]);
        var _local_10 = Number(event[2]);
        var _local_15 = Number(event[3]);
        var _local_11 = Number(event[4]);
        var _local_13 = String(event[5]);
        var _local_4 = {};
        _local_4.type = _local_10;
        _local_4.music_id = _local_15;
        _local_4.floor_id = _local_11;
        var _local_5 = [];
        var _local_6 = _local_13.split(",");
        var _local_7 = _local_6.length;
        var _local_2;
        var _local_1;
        var _local_3 = 0;
        while (_local_3 < _local_7) {
            _local_2 = _local_6[_local_3].split("|");
            if (_local_2.length > 1) {
                _local_1 = {};
                _local_1 = duplicateObject(getFurnitureFromCrumbsById(Number(_local_2[0])));
                _local_1.x = Number(_local_2[1]);
                _local_1.y = Number(_local_2[2]);
                _local_1.frame_1 = Number(_local_2[3]);
                _local_1.frame_2 = Number(_local_2[4]);
                _local_1.type = getFurnitureTypeById(_local_1.item_id);
                if (Number(_local_2[0]) == CJ_MAT_ID) {
                    _local_1.waddle_id = cjMatWaddleID;
                    cjMatWaddleID++;
                }
                if (isNaN(_local_1.frame_1)) {
                    _local_1.frame_1 = 1;
                }
                if (isNaN(_local_1.frame_2)) {
                    _local_1.frame_2 = 1;
                }
                if (isFurnitureInCrumbs(_local_1.item_id)) {
                    _local_5.push(_local_1);
                }
            }
            _local_3++;
        }
        _local_4.furniture = _local_5;
        var _local_14 = getDefaultIglooObject();
        var _local_12 = (((_local_10 > 1) || (_local_5.length > 0)) || (_local_11 > 0)) || (_local_4.music_id != _local_14.music_id);
        if (_local_12 && (_local_10 == 0)) {
            _local_4.type = 1;
        }
        if (isMyPlayer(_local_9) && (_local_12)) {
            setMyStoredIglooObject(_local_4);
        }
        if ((isMyPlayer(_local_9) && (!isMyPlayerMember())) || (_local_4.type == 0)) {
            _local_4 = _local_14;
        }
        _local_4.name = (_local_4.room_key = "igloo");
        _local_4.path = ((getClientPath() + "") + IGLOO_PATH) + ".swf";
        _local_4.player_id = _local_9;
        if (_local_9 == 0) {
            hideLoading();
            return(undefined);
        }
        loadIgloo(_local_4);
        if (first_run) {
            setAvailableCounts();
            first_run = false;
        }
    }
    function setMyStoredIglooObject(igloo) {
        myStoredIglooObject = igloo;
    }
    function getMyStoredIglooObject() {
        return(myStoredIglooObject);
    }
    function getIglooMatCount() {
        return(cjMatWaddleID - 1);
    }
    function removeMatFromIgloo() {
        if (cjMatWaddleID == 200) {
            return(undefined);
        }
        cjMatWaddleID = cjMatWaddleID - 1;
    }
    function addMatToIgloo() {
        cjMatWaddleID++;
    }
    function loadIgloo(igloo) {
        setCurrentIglooType(igloo.type);
        setCurrentIglooFloorId(igloo.floor_id);
        setPlayerIglooFurniture(igloo.furniture);
        setPlayerIglooObject(igloo);
        puffleManager.getPufflesByPlayerId(igloo.player_id, ENGINE.playerHostedRoomType);
    }
    function getDefaultIglooObject() {
        var _local_1 = {};
        _local_1.type = DEFAULT_IGLOO_TYPE_ID;
        _local_1.music_id = DEFAULT_IGLOO_MUSIC_ID;
        _local_1.floor_id = DEFAULT_IGLOO_FLOOR_ID;
        _local_1.furniture = DEFAULT_IGLOO_FURNITURE;
        return(_local_1);
    }
    function saveIglooFurniture(arr) {
        if (arr != undefined) {
            var _local_4 = {};
            var _local_3 = arr.length;
            var _local_1 = 0;
            while (_local_1 < _local_3) {
                _local_4[_local_1] = arr[_local_1];
                _local_1++;
            }
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.IGLOO_HANDLER + "#") + AIRTOWER.SAVE_IGLOO_FURNITURE, arr, "str", getCurrentServerRoomId());
        } else {
            $e("[shell] saveIglooFurniture() furniture array is undefined! furniture_arr: " + arr);
        }
    }
    function loadIsPlayerIglooOpen(playerID) {
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.IGLOO_HANDLER + "#") + AIRTOWER.PLAYER_IGLOO_OPEN, [playerID], "str", getCurrentServerRoomId());
    }
    function handleLoadIsPlayerIglooOpen(obj) {
        var _local_3 = obj.shift();
        var _local_1 = Number(obj[0]) != 0;
        updateListeners(LOAD_IS_PLAYER_IGLOO_OPEN, _local_1);
    }
    function loadPlayerIglooList() {
        $d("[shell] loadPlayerIglooList()");
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.IGLOO_HANDLER + "#") + AIRTOWER.GET_IGLOO_LIST, [], "str", getCurrentServerRoomId());
    }
    function handleLoadPlayerIglooList(obj) {
        var _local_6 = obj.shift();
        var _local_5 = [];
        var _local_4;
        var _local_1;
        var _local_2;
        for (_local_4 in obj) {
            _local_2 = obj[_local_4].split("|");
            _local_1 = {};
            _local_1.player_id = Number(_local_2[0]);
            _local_1.nickname = _local_2[1];
            _local_1.igloo_id = 0;
            _local_5.push(_local_1);
        }
        updateListeners(LOAD_PLAYER_IGLOO_LIST, _local_5);
    }
    function getIglooFurnitureObjectById(id) {
        var _local_2 = getFurnitureList();
        var _local_3 = _local_2.length;
        var _local_1 = 0;
        while (_local_1 < _local_3) {
            if (_local_2[_local_1].item_id == id) {
                return(_local_2[_local_1]);
            }
            _local_1++;
        }
        $e("[shell] getIglooFurnitureObjectById() -> Could not find furniture object! id: " + id);
        return(undefined);
    }
    function isMyIgloo() {
        if (igloo_player_id == getMyPlayerId()) {
            return(true);
        }
        return(false);
    }
    function getMyIglooRoomId() {
        if (getIsRoomIgloo() && (isMyIgloo())) {
            return(getCurrentRoomId());
        }
        return(null);
    }
    function setIglooPlayerID(id) {
        igloo_player_id = Number(id);
    }
    function getIglooPlayerID() {
        return(igloo_player_id);
    }
    function setIglooEditMode(enableEditMode, numActiveFurniture) {
        if (enableEditMode == undefined) {
            return(undefined);
        }
        var _local_1 = {active:enableEditMode, player_id:getPlayerIglooObject().player_id, furnitureCount:numActiveFurniture};
        updateListeners(IGLOO_EDIT_MODE, _local_1);
    }
    function setIsRoomIgloo(is_igloo) {
        is_room_igloo = is_igloo;
    }
    function getIsRoomIgloo() {
        return(is_room_igloo);
    }
    function getCurrentIglooType() {
        return(current_igloo_type);
    }
    function setCurrentIglooType(id) {
        current_igloo_type = id;
    }
    function getCurrentIglooFloorId() {
        return(current_igloo_floor_id);
    }
    function setCurrentIglooFloorId(id) {
        current_igloo_floor_id = id;
    }
    function setIglooAsLocked() {
        is_igloo_locked = true;
    }
    function setIglooAsUnLocked() {
        is_igloo_locked = false;
    }
    function isIglooLocked() {
        return(is_igloo_locked);
    }
    function getIglooMusicId() {
        return(getPlayerIglooObject().music_id);
    }
    function setIglooMusicId(id) {
        if (getPlayerIglooObject().music_id != id) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.IGLOO_HANDLER + "#") + AIRTOWER.UPDATE_IGLOO_MUSIC, [id], "str", getCurrentServerRoomId());
            getPlayerIglooObject().music_id = id;
        }
    }
    function setPlayerIglooObject(obj) {
        player_igloo = obj;
    }
    function getPlayerIglooObject() {
        return(player_igloo);
    }
    function getPlayerIglooFurniture() {
        return(player_igloo_furniture);
    }
    function setPlayerIglooFurniture(arr) {
        player_igloo_furniture = arr;
    }
    function setIglooCrumbs(obj) {
        var _local_1;
        igloo_crumbs = {};
        for (_local_1 in obj) {
            igloo_crumbs[obj[_local_1].igloo_id] = obj[_local_1];
            obj[_local_1].id = obj[_local_1].igloo_id;
        }
    }
    function getIglooCrumbs() {
        return(igloo_crumbs);
    }
    function setIglooOptions(options) {
        iglooOptions = options;
    }
    function getIglooOptions() {
        return(iglooOptions);
    }
    function getIglooCrumbById(id) {
        if (!isNaN(id)) {
            var _local_1 = getIglooCrumbs();
            for (var _local_3 in _local_1) {
                if (_local_1[_local_3].id == id) {
                    return(_local_1[_local_3]);
                }
            }
            $e("[shell] getIglooCrumbById() -> Could not find igloo in the crumbs file! id: " + id);
            return(undefined);
        }
        $e("[shell] getIglooCrumbById() -> ID is not a real number! id: " + id);
        return(undefined);
    }
    function setFloorCrumbs(obj) {
        for (var _local_2 in obj) {
            obj[_local_2].id = obj[_local_2].igloo_floor_id;
            obj[_local_2].name = obj[_local_2].prompt;
        }
        floor_crumbs = obj;
    }
    function getFloorCrumbs() {
        return(floor_crumbs);
    }
    function getFloorCrumbById(id) {
        if (!isNaN(id)) {
            var _local_1 = getFloorCrumbs();
            for (var _local_3 in _local_1) {
                if (_local_1[_local_3].id == id) {
                    return(_local_1[_local_3]);
                }
            }
            $e("[shell] getFloorCrumbById() -> Could not find floor in the crumbs file! id: " + id);
            return(undefined);
        }
        $e("[shell] getFloorCrumbById() -> ID is not a real number! id: " + id);
        return(undefined);
    }
    function setLocationObject(obj) {
        for (var _local_2 in obj) {
            obj[_local_2].name = obj[_local_2].prompt;
        }
        location_crumbs = obj;
    }
    function getLocationObject() {
        return(location_crumbs);
    }
    function getLocationObjectById(id) {
        if (!isNaN(id)) {
            var _local_1 = getLocationObject();
            for (var _local_3 in _local_1) {
                if (_local_1[_local_3].igloo_location_id == id) {
                    return(_local_1[_local_3]);
                }
            }
            $e("[shell] getLocationObjectById() -> Could not find location in the crumbs file! id: " + id);
            return(undefined);
        }
        $e("[shell] getLocationObjectById() -> ID is not a real number! id: " + id);
        return(undefined);
    }
    function setMusicObject(obj) {
        for (var _local_2 in obj) {
            obj[_local_2].name = obj[_local_2].prompt;
        }
        music_crumbs = obj;
    }
    function getMusicObject() {
        return(music_crumbs);
    }
    function isIglooContestRunning() {
        var _local_1 = getIglooOptions();
        return(_local_1.contestRunning);
    }
    function sendIglooContestEntry() {
        if (isMyPlayerMember()) {
            SHELL.updateListeners(com.clubpenguin.shell.events.MembershipEvent.MEMBER_ONLY_ACTIVITY, new com.clubpenguin.shell.events.MembershipEvent(com.clubpenguin.shell.events.MembershipEvent.MEMBER_ONLY_ACTIVITY, "iglooContest", "submitIglooForContest"));
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.SURVEY_HANDLER + "#") + AIRTOWER.SEND_IGLOO, [], "str", getCurrentServerRoomId());
        }
    }
    function areIgloosCached() {
        return(igloosCached);
    }
    function getOwnedIgloos() {
        return(((ownedIgloos != undefined) ? (ownedIgloos) : ([])));
    }
    function doesPlayerOwnIgloo(iglooId) {
        var _local_1 = 0;
        while (_local_1 < ownedIgloos.length) {
            if (ownedIgloos[_local_1].id == iglooId) {
                return(true);
            }
            _local_1++;
        }
        return(getGlobalIgloo().iglooContext.doesPlayerOwnBuilding(String(iglooId)));
    }
    function doesPlayerOwnLocation(locationId) {
        return(getGlobalIgloo().iglooContext.doesPlayerOwnLocation(String(locationId)));
    }
    function doesPlayerOwnFloor(floorId) {
        return(getGlobalIgloo().iglooContext.doesPlayerOwnFloor(String(floorId)));
    }
    function addIglooToInventoryCache(iglooId) {
        var _local_1 = 0;
        while (_local_1 < ownedIgloos.length) {
            if (ownedIgloos[_local_1].id == iglooId) {
                return(undefined);
            }
            _local_1++;
        }
        var _local_3 = {};
        _local_3.id = iglooId;
        _local_3.name = iglooCrumbs[iglooId].name;
        ownedIgloos.push(_local_3);
        addIglooToInventory(iglooId);
    }
    function sendMessage(txt) {
        logChatSent(BI_ACTION_SEND_MESSAGE);
        if ((txt != undefined) && (txt != "")) {
            var _local_2 = {player_id:getMyPlayerId(), nickname:getMyPlayerNickname(), message:txt, type:SEND_MESSAGE};
            addToChatLog(_local_2);
            updateListeners(SENDING_MESSAGE, _local_2);
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.MESSAGE_HANDLER + "#") + AIRTOWER.SEND_MESSAGE, [getMyPlayerId(), txt], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] sendMessage() -> Trying to send a undefined or blank message. text: " + txt);
        }
    }
    function sendPhraseChatMessage(pcid, txt) {
        logChatSent(BI_ACTION_SEND_PHRASE_CHAT_MESSAGE);
        if ((pcid != undefined) && (pcid != "")) {
            var _local_1 = {player_id:getMyPlayerId(), nickname:getMyPlayerNickname(), message:txt, type:SEND_PHRASECHAT_MESSAGE};
            addToChatLog(_local_1);
            updateListeners(SENDING_MESSAGE, _local_1);
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.MESSAGE_HANDLER + "#") + AIRTOWER.SEND_PHRASECHAT_MESSAGE, [getMyPlayerId(), pcid], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] sendPhraseChatMessage() -> Trying to send a undefined or blank message. text: " + txt);
        }
    }
    function handleSendMessage(obj) {
        var _local_2 = obj[0];
        if (_local_2 == getCurrentServerRoomId()) {
            var _local_1 = new Object();
            _local_1.player_id = Number(obj[1]);
            _local_1.nickname = getNicknameById(_local_1.player_id);
            _local_1.message = obj[2];
            _local_1.type = SEND_MESSAGE;
            if (!isPlayerIgnoredById(_local_1.player_id)) {
                if (isValidString(_local_1.message)) {
                    if (!isMyPlayerSafeMode()) {
                        if (!isMyPlayer(_local_1.player_id)) {
                            addToChatLog(_local_1);
                        }
                        updateListeners(SEND_MESSAGE, _local_1);
                    }
                } else {
                    $e("[shell] handleSendMessage() -> Received an improperly formated message: " + _local_1.message);
                }
            }
        } else {
            $e((("[shell] handleSendMessage() -> Recieved a message from the wrong server room id: current room id: " + getCurrentServerRoomId()) + " received room id: ") + _local_2);
        }
    }
    function handleSendPhraseChatMessage(obj) {
        var _local_2 = obj[0];
        if (_local_2 == getCurrentServerRoomId()) {
            var _local_1 = new Object();
            _local_1.player_id = Number(obj[1]);
            _local_1.nickname = getNicknameById(_local_1.player_id);
            _local_1.message = obj[2];
            _local_1.type = SEND_PHRASECHAT_MESSAGE;
            if (!isPlayerIgnoredById(_local_1.player_id)) {
                if (isValidString(_local_1.message)) {
                    if (!isMyPlayerSafeMode()) {
                        updateListeners(SEND_PHRASECHAT_MESSAGE, _local_1);
                    }
                } else {
                    $e("[shell] handleSendPhraseChatMessage() -> Received an improperly formated message: " + _local_1.message);
                }
            }
        } else {
            $e((("[shell] handleSendPhraseChatMessage() -> Recieved a message from the wrong server room id: current room id: " + getCurrentServerRoomId()) + " received room id: ") + _local_2);
        }
    }
    function handleBlockedMessage(obj) {
        var _local_2 = obj[0];
        if (_local_2 == getCurrentServerRoomId()) {
            var _local_1 = new Object();
            _local_1.message = obj[1];
            _local_1.player_id = Number(obj[2]);
            _local_1.nickname = getNicknameById(_local_1.player_id);
            _local_1.type = SEND_BLOCKED_MESSAGE;
            if (!isPlayerIgnoredById(_local_1.player_id)) {
                if (isValidString(_local_1.message)) {
                    addToChatLog(_local_1);
                    updateListeners(SEND_BLOCKED_MESSAGE, _local_1);
                } else {
                    $e("[shell] handleBlockedMessage() -> Received an improperly formated message: " + _local_1.message);
                }
            }
        } else {
            $e((("[shell] handleBlockedMessage() -> Recieved a message from the wrong server room id: current room id: " + getCurrentServerRoomId()) + " received room id: ") + _local_2);
        }
    }
    function sendEmote(emote_id) {
        logChatSent(BI_ACTION_SEND_EMOTE);
        if (!isNaN(emote_id)) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_HANDLER + "#") + AIRTOWER.SEND_EMOTE, [emote_id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] sendEmote() -> Trying to send a invalid emote id. emote_id: " + emote_id);
        }
    }
    function handleSendEmote(obj) {
        var _local_2 = obj[0];
        if (_local_2 == getCurrentServerRoomId()) {
            var _local_1 = new Object();
            _local_1.player_id = Number(obj[1]);
            _local_1.emote_id = Number(obj[2]);
            if (!isPlayerIgnoredById(_local_1.player_id)) {
                if (!isNaN(_local_1.emote_id)) {
                    updateListeners(SEND_EMOTE, _local_1);
                } else {
                    $e("[shell] handleSendEmote() -> received an invalid id for a emote: emote_id: " + _local_1.emote_id);
                }
            }
        } else {
            $e((("[shell] handleSendEmote() -> Recieved an emote from the wrong server room id: current room id: " + getCurrentServerRoomId()) + " received room id: ") + _local_2);
        }
    }
    function sendJoke(joke_id) {
        logChatSent(BI_ACTION_SEND_JOKE);
        if (getPlayersInRoomCount() > 1) {
            if (!isNaN(joke_id)) {
                if (getJokeById(joke_id) != undefined) {
                    AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_HANDLER + "#") + AIRTOWER.SEND_JOKE, [joke_id], "str", getCurrentServerRoomId());
                } else {
                    $e("[shell] sendJokeMessage() -> Joke message was not found. joke_id: " + joke_id);
                }
            } else {
                $e("[shell] sendJokeMessage() -> Trying to send a invalid joke id. joke_id: " + joke_id);
            }
        } else {
            var _local_1 = {player_id:getMyPlayerId(), joke_id:joke_id};
            updateListeners(SEND_JOKE, _local_1);
        }
    }
    function handleSendJoke(obj) {
        var _local_2 = obj[0];
        if (_local_2 == getCurrentServerRoomId()) {
            var _local_1 = new Object();
            _local_1.player_id = Number(obj[1]);
            _local_1.joke_id = Number(obj[2]);
            if (!isPlayerIgnoredById(_local_1.player_id)) {
                if (!isNaN(_local_1.joke_id)) {
                    if (getJokeById(_local_1.joke_id) != undefined) {
                        updateListeners(SEND_JOKE, _local_1);
                    } else {
                        $e("[shell] handleSendJoke() -> Received a joke id which was not found: " + _local_1.joke_id);
                    }
                } else {
                    $e("[shell] handleSendJoke() -> Received a joke id which is not a valid number. joke_id: " + _local_1.joke_id);
                }
            }
        } else {
            $e((("[shell] handleSendJoke() -> Recieved an joke from the wrong server room id: current room id: " + getCurrentServerRoomId()) + " received room id: ") + _local_2);
        }
    }
    function sendQuickMessage(quick_id) {
        logChatSent(BI_ACTION_SEND_QUICK_MESSAGE);
        if (getPlayersInRoomCount() > 1) {
            if (!isNaN(quick_id)) {
                if (getQuickMessageById(quick_id) != undefined) {
                    AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_HANDLER + "#") + AIRTOWER.SEND_QUICK_MESSAGE, [quick_id], "str", getCurrentServerRoomId());
                } else {
                    $e("[shell] sendQuickMessage() -> Quick message was not found. quick_id: " + quick_id);
                }
            } else {
                $e("[shell] sendQuickMessage() -> Trying to send a invalid quick id. quick_id: " + quick_id);
            }
        }
    }
    function handleSendQuickMessage(obj) {
        var _local_5 = obj[0];
        if (_local_5 == getCurrentServerRoomId()) {
            var _local_2 = Number(obj[1]);
            var _local_4 = Number(obj[2]);
            if (!isPlayerIgnoredById(_local_2)) {
                if (!isNaN(quick_obj.quick_id)) {
                    var _local_6 = getQuickMessageById(quick_obj.quick_id);
                    if (isValidString(_local_6)) {
                        var _local_1 = new Object();
                        _local_1.player_id = _local_2;
                        _local_1.nickname = getNicknameById(_local_2);
                        _local_1.message = _local_6;
                        _local_1.type = SEND_QUICK_MESSAGE;
                        addToChatLog(_local_1);
                        var _local_3 = new Object();
                        _local_3.player_id = _local_2;
                        _local_3.safe_id = _local_4;
                        updateListeners(SEND_QUICK_MESSAGE, _local_3);
                    } else {
                        $e("[shell] handleSendQuickMessage() -> Quick message was not found in quick message list. quick_id: " + _local_4);
                    }
                } else {
                    $e("[shell] handleSendQuickMessage() -> Quick ID was not a real number. quick_id: " + _local_4);
                }
            }
        } else {
            $e((("[shell] handleSendQuickMessage() -> Received a quick message from the wrong server room id: current room id: " + getCurrentServerRoomId()) + " received room id: ") + _local_5);
        }
    }
    function sendSafeMessage(safe_id) {
        logChatSent(BI_ACTION_SEND_SAFE_MESSAGE);
        var _local_2 = new Object();
        _local_2.player_id = getMyPlayerId();
        _local_2.safe_id = safe_id;
        updateListeners(SEND_SAFE_MESSAGE, _local_2);
        if (getPlayersInRoomCount() > 1) {
            if (!isNaN(safe_id)) {
                if (getSafeMessageById(safe_id) != undefined) {
                    AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_HANDLER + "#") + AIRTOWER.SEND_SAFE_MESSAGE, [safe_id], "str", getCurrentServerRoomId());
                } else {
                    $e("[shell] sendSafeMessage() -> Safe message was not found. safe_id: " + safe_id);
                }
            } else {
                $e("[shell] sendSafeMessage() -> Trying to send a invalid safe id. safe_id: " + safe_id);
            }
        }
    }
    function handleSafeMessage(obj) {
        var _local_5 = obj[0];
        if (_local_5 == getCurrentServerRoomId()) {
            var _local_3 = Number(obj[1]);
            var _local_2 = Number(obj[2]);
            if (getSafeMessageById(_local_2) != undefined) {
                var _local_1 = new Object();
                _local_1.player_id = _local_3;
                _local_1.nickname = getNicknameById(_local_3);
                _local_1.type = SEND_SAFE_MESSAGE;
                _local_1.message = getSafeMessageById(_local_2);
                if (!isPlayerIgnoredById(_local_1.player_id)) {
                    if (isValidString(_local_1.message)) {
                        addToChatLog(_local_1);
                        var _local_4 = new Object();
                        _local_4.player_id = _local_3;
                        _local_4.safe_id = _local_2;
                        updateListeners(SEND_SAFE_MESSAGE, _local_4);
                    } else {
                        $e((("[shell] handleSafeMessage() -> Invalid safe message text: safe_message_id: " + _local_2) + " safe_message_text: ") + _local_1.message);
                    }
                }
            } else {
                $e("[shell] handleSafeMessage() -> Received a safe message id which did not exist in the safe message list. safe_id: " + _local_2);
            }
        } else {
            $e((("[shell] handleSafeMessage() -> Received a safe message from the wrong server room id: current room id: " + getCurrentServerRoomId()) + " received room id: ") + _local_5);
        }
    }
    function sendLineMessage(line_id) {
        logChatSent(BI_ACTION_SEND_LINE_MESSAGE);
        if (getPlayersInRoomCount() > 1) {
            if (!isNaN(line_id)) {
                if (getLineMessageById(line_id) != undefined) {
                    AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_HANDLER + "#") + AIRTOWER.SEND_LINE_MESSAGE, [line_id], "str", getCurrentServerRoomId());
                } else {
                    $e("[shell] sendLineMessage() -> Line message was not found. line_id: " + line_id);
                }
            } else {
                $e("[shell] sendLineMessage() -> Trying to send a invalid line id. line_id: " + line_id);
            }
        }
    }
    function handleLineMessage(obj) {
        var _local_6 = obj[0];
        if (_local_6 == getCurrentServerRoomId()) {
            var _local_3 = Number(obj[1]);
            var _local_2 = Number(obj[2]);
            var _local_5 = getLineMessageById(_local_2);
            if (!isPlayerIgnoredById(_local_3)) {
                if (!isNaN(_local_2)) {
                    if (isValidString(_local_5)) {
                        var _local_1 = new Object();
                        _local_1.player_id = _local_3;
                        _local_1.nickname = getNicknameById(_local_3);
                        _local_1.type = SEND_LINE_MESSAGE;
                        _local_1.message = _local_5;
                        addToChatLog(_local_1);
                        var _local_4 = new Object();
                        _local_4.player_id = _local_3;
                        _local_4.line_id = _local_2;
                        updateListeners(SEND_LINE_MESSAGE, _local_4);
                    } else {
                        $e((("[shell] handleLineMessage() -> Received an invalid line message text. message text: " + _local_5) + " line_message_id: ") + _local_2);
                    }
                } else {
                    $e("[shell] handleLineMessage() -> Received an invalid line id. line_message_id: " + _local_2);
                }
            }
        } else {
            $e((("[shell] handleLineMessage() -> Received a line message from the wrong server room id: current room id: " + getCurrentServerRoomId()) + " received room id: ") + _local_6);
        }
    }
    function sendMascotMessage(line_id) {
        logChatSent(BI_ACTION_SEND_MASCOT_MESSAGE);
        if (getPlayersInRoomCount() > 1) {
            if (!isNaN(line_id)) {
                if (getMascotMessageById(line_id) != undefined) {
                    AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_HANDLER + "#") + AIRTOWER.SEND_MASCOT_MESSAGE, [line_id], "str", getCurrentServerRoomId());
                } else {
                    $e("[shell] sendMascotMessage() -> Mascot message was not found. line_id: " + line_id);
                }
            } else {
                $e("[shell] sendMascotMessage() -> Trying to send a invalid line id. line_id: " + line_id);
            }
        }
    }
    function handleMascotMessage(obj) {
        var _local_8 = obj[0];
        if (_local_8 == getCurrentServerRoomId()) {
            var _local_3 = Number(obj[1]);
            var _local_5 = Number(obj[2]);
            var _local_7 = getMascotMessageById(_local_5);
            if (!isPlayerIgnoredById(_local_3)) {
                if (!isNaN(_local_5)) {
                    if (isValidString(_local_7)) {
                        var _local_4 = _local_7.split("|");
                        var _local_2 = 0;
                        while (_local_2 < _local_4.length) {
                            var _local_1 = new Object();
                            _local_1.player_id = _local_3;
                            _local_1.nickname = getNicknameById(_local_3);
                            _local_1.type = SEND_MASCOT_MESSAGE;
                            _local_1.message = _local_4[_local_2];
                            addToChatLog(_local_1);
                            _local_2++;
                        }
                        var _local_6 = new Object();
                        _local_6.player_id = _local_3;
                        _local_6.mascot_message_id = _local_5;
                        updateListeners(SEND_MASCOT_MESSAGE, _local_6);
                    } else {
                        $e((("[shell] handleMascotMessage() -> Received invalid mascot message text. message text: " + _local_7) + " mascot_message_id: ") + _local_5);
                    }
                } else {
                    $e("[shell] handleMascotMessage() -> Received an invalid mascot message id. mascot_message_id: " + _local_5);
                }
            }
        } else {
            $e((("[shell] handleMascotMessage() -> Received a mascot message from the wrong server room id: current room id: " + getCurrentServerRoomId()) + " received room id: ") + _local_8);
        }
    }
    function sendTourGuideMessage(room_id) {
        logChatSent(BI_ACTION_SEND_TOUR_GUIDE_MESSAGE);
        if (getPlayersInRoomCount() > 1) {
            if (!isNaN(room_id)) {
                AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_HANDLER + "#") + AIRTOWER.SEND_TOUR_GUIDE_MESSAGE, [room_id], "str", getCurrentServerRoomId());
            } else {
                $e("[shell] sendTourGuideMessage() -> Not a real number passed for room id! room id: " + room_id);
            }
        }
    }
    function handleTourGuideMessage(obj) {
        var _local_4 = obj[0];
        if (_local_4 == getCurrentServerRoomId()) {
            var _local_3 = Number(obj[1]);
            var _local_2 = Number(obj[2]);
            if (!isPlayerIgnoredById(_local_3)) {
                if (!isNaN(_local_2)) {
                    var _local_1 = new Object();
                    _local_1.player_id = _local_3;
                    _local_1.room_id = _local_2;
                    updateListeners(SEND_TOUR_GUIDE_MESSAGE, _local_1);
                } else {
                    $e("[shell] handleTourGuideMessage() -> Received an invalid room id. room_id: " + _local_2);
                }
            }
        } else {
            $e((("[shell] handleTourGuideMessage() -> Received a tour guide message from the wrong server room id: current room id: " + getCurrentServerRoomId()) + " received room id: ") + _local_4);
        }
    }
    function logChatSent(action) {
        if (getIsPlayerOptedInDayZeroABTest() == true) {
            var _local_1 = {message:getRoomNameById(getCurrentRoomId())};
            _trackerAS2.sendToAS3LogGameAction("chat", action, null, _local_1);
        }
    }
    function isPlayerMascotById(player_id) {
        if (!isNaN(player_id)) {
            var _local_1 = getMascotCrumbs();
            if (_local_1[player_id] != undefined) {
                return(true);
            }
            for (var _local_3 in _local_1) {
                if (_local_1[_local_3].mascot_id == player_id) {
                    return(true);
                }
            }
            return(false);
        }
        $e("[shell] isPlayerMascotById() -> Player id is not a real number! player_id: " + player_id);
        return(false);
    }
    function getMascotGiftById(player_id) {
        if (!isNaN(player_id)) {
            var _local_1 = getMascotCrumbs();
            var _local_3 = _local_1[player_id];
            if (_local_3 == undefined) {
                for (var _local_4 in _local_1) {
                    if (_local_1[_local_4].mascot_id == player_id) {
                        return(_local_1[_local_4].gift_id);
                    }
                }
            }
            if (_local_3 != undefined) {
                if (_local_3.gift_id != undefined) {
                    return(_local_3.gift_id);
                }
                $e((("[shell] getMascotGiftById() -> Gift id is undefined! player_id: " + player_id) + " gift id: ") + _local_3.gift_id);
            } else {
                $e("[shell] getMascotGiftById() -> Could not find mascot in crumbs!: " + player_id);
            }
            return(undefined);
        }
        $e("[shell] getMascotGiftById() -> Player id is not a real number! player_id: " + player_id);
        return(undefined);
    }
    function getMascotNicknameByID(id) {
        if (isNaN(id)) {
            $e("[shell] getMascotNameByID() -> ID is not a real number! id: " + id);
            return("");
        }
        var _local_1 = getMascotCrumbs();
        if (_local_1[id] != undefined) {
            return(_local_1[id].name);
        }
        for (var _local_3 in _local_1) {
            if (_local_1[_local_3].mascot_id == id) {
                return(_local_1[_local_3].name);
            }
        }
        $e(("[shell] getMascotNameByID() -> Could not find mascot with the ID \"" + id) + "\" in the mascot crumbs!");
        return("");
    }
    function isMigratorHere() {
        var _local_1 = getMascotOptions();
        if (_local_1.migrator_active != undefined) {
            return(_local_1.migrator_active);
        }
        return(false);
    }
    function setMascotCrumbs(obj) {
        mascot_crumbs = obj;
    }
    function getMascotCrumbs() {
        return(mascot_crumbs);
    }
    function setMascotOptions(obj) {
        mascot_options = obj;
    }
    function getMascotOptions() {
        return(mascot_options);
    }
    function getMascotIdByPlayerId(player_id) {
        if (!isNaN(player_id)) {
            var _local_1 = getMascotCrumbs();
            var _local_3;
            if (_local_1[player_id] != undefined) {
                return(_local_1[player_id].mascot_id);
            }
        }
        return(-1);
    }
    function isPlayerASpecificMascot(player_id, name) {
        if (!SHELL.isPlayerMascotById(player_id)) {
            return(false);
        }
        if (SHELL.getMascotIdByPlayerId(player_id) == getMascotIDByName(name)) {
            return(true);
        }
        return(false);
    }
    function getMascotIDByName(name) {
        var _local_1 = com.clubpenguin.util.StringUtils.replaceString(" ", "", name);
        return(com.clubpenguin.engine.avatar.transformation.AvatarTypeEnum[_local_1.toUpperCase() + "_ID"]);
    }
    function checkMascotTransformation(player_id) {
        var _local_1 = -1;
        _local_1 = SHELL.getMascotIdByPlayerId(player_id);
        return(_local_1);
    }
    function getAchievementGroupById(id) {
        if (!isNaN(id)) {
            var _local_2 = getAchievementCrumbs();
            if (_local_2[id] != undefined) {
                return(_local_2[id]);
            }
            $e("[shell] getAchievementGroupById() -> Could not find group by ID in achievement crumbs! id: " + id);
        } else {
            $e("[shell] getAchievementGroupById() -> id is not a real number! id: " + id);
        }
        return(undefined);
    }
    function getAchievementItemById(group_id, item_id) {
        if (!isNaN(group_id)) {
            if (!isNaN(item_id)) {
                var _local_1 = getAchievementGroupById(group_id);
                if (_local_1 != undefined) {
                    for (n in _local_1) {
                        if (_local_1[n].id == item_id) {
                            return(_local_1[n]);
                        }
                    }
                    $e((("[shell] getAchievementItemById() -> Could not find item in group! group_id: " + group_id) + " item_id: ") + item_id);
                }
            } else {
                $e("[shell] getAchievementItemById() -> Item id is not a real number! item_id: " + id);
            }
        } else {
            $e("[shell] getAchievementItemById() -> Group id is not a real number! group_id: " + id);
        }
        return(undefined);
    }
    function getAchievementItemByName(group_id, ach_name) {
        if (!isNaN(group_id)) {
            if (isValidString(ach_name)) {
                var _local_1 = getAchievementGroupById(group_id);
                if (_local_1 != undefined) {
                    for (n in _local_1) {
                        if (_local_1[n].name == ach_name) {
                            return(_local_1[n]);
                        }
                    }
                    $e((("[shell] getAchievementItemById() -> Could not find item in group! group_id: " + group_id) + " item_id: ") + item_id);
                }
            } else {
                $e("[shell] getAchievementItemById() -> Item name is not a real string! name: " + ach_name);
            }
        } else {
            $e("[shell] getAchievementItemById() -> Group id is not a real number! group_id: " + id);
        }
        return(undefined);
    }
    function setAchievementAsCompleteById(group_id, item_id) {
        if (!isNaN(group_id)) {
            if (!isNaN(item_id)) {
                var _local_1 = getAchievementItemById(group_id, item_id);
                if (_local_1 != undefined) {
                    _local_1.active = true;
                }
                checkGroupCompleteById(group_id);
            } else {
                $e("[shell] setAchievementAsCompleteById() -> Item id is not a real number! item_id: " + id);
            }
        } else {
            $e("[shell] setAchievementAsCompleteById() -> Group id is not a real number! group_id: " + id);
        }
    }
    function setAchievementAsIncompleteById(group_id, item_id) {
        if (!isNaN(group_id)) {
            if (!isNaN(item_id)) {
                var _local_1 = getAchievementItemById(group_id, item_id);
                if (_local_1 != undefined) {
                    _local_1.active = false;
                }
            } else {
                $e("[shell] setAchievementAsIncompleteById() -> Item id is not a real number! item_id: " + id);
            }
        } else {
            $e("[shell] setAchievementAsIncompleteById() -> Group id is not a real number! group_id: " + id);
        }
    }
    function setAchievementAsCompleteByName(group_id, ach_name) {
        if (!isNaN(group_id)) {
            if (isValidString(ach_name)) {
                var _local_2 = getAchievementItemByName(group_id, ach_name);
                if (_local_2 != undefined) {
                    _local_2.active = true;
                }
                var _local_4 = checkGroupCompleteById(group_id);
                if (_local_4) {
                    getAchievementGroupCompleteFunc()(group_id);
                }
            } else {
                $e("[shell] setAchievementAsCompleteById() -> Item name is not a real string! name: " + ach_name);
            }
        } else {
            $e("[shell] setAchievementAsCompleteById() -> Group id is not a real number! group_id: " + id);
        }
    }
    function setAchievementAsIncompleteByName(group_id, ach_name) {
        if (!isNaN(group_id)) {
            if (isValidString(ach_name)) {
                var _local_2 = getAchievementItemByName(group_id, ach_name);
                if (_local_2 != undefined) {
                    _local_2.active = false;
                }
                var _local_4 = checkGroupCompleteById(group_id);
                if (_local_4) {
                    getAchievementGroupCompleteFunc()(group_id);
                }
            } else {
                $e("[shell] setAchievementAsIncompleteByName() -> Item name is not a real string! name: " + ach_name);
            }
        } else {
            $e("[shell] setAchievementAsIncompleteByName() -> Group id is not a real number! group_id: " + id);
        }
    }
    function checkGroupCompleteById(id) {
        if (!isNaN(id)) {
            var _local_1 = getAchievementGroupById(id);
            if (_local_1 != undefined) {
                var _local_3 = new Array();
                var _local_2;
                for (_local_2 in _local_1) {
                    if (_local_1[_local_2].active) {
                        _local_3.push(_local_1[_local_2]);
                    }
                }
                if (_local_3.length == _local_1.length) {
                    return(true);
                }
            }
        } else {
            $e("[shell] checkGroupCompleteById() -> Group id is not a real number! group_id: " + id);
        }
        return(false);
    }
    function setAchievementGroupCompleteFunc(func) {
        achievement_group_complete = func;
    }
    function getAchievementGroupCompleteFunc() {
        return(achievement_group_complete);
    }
    function setAchievementCrumbs(obj) {
        achievement_crumbs = obj;
    }
    function getAchievementCrumbs() {
        return(achievement_crumbs);
    }
    function getBuddyListFromServer() {
        if (buddyList != undefined) {
            $e("[shell] getBuddyList() -> Buddy list already fetched!");
            return(undefined);
        }
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.BUDDY_HANDLER + "#") + AIRTOWER.GET_BUDDY_LIST, [], "str", getCurrentServerRoomId());
    }
    function handleGetBuddyListFromServer(list) {
        var _local_8 = Number(list.shift());
        buddyList = new Array();
        var _local_1;
        var _local_2;
        var _local_5;
        var _local_4;
        var _local_7 = getMyPlayerObject();
        var _local_6;
        for (_local_6 in list) {
            _local_1 = list[_local_6].split("|");
            _local_2 = Number(_local_1[0]);
            _local_5 = String(_local_1[1]);
            _local_4 = Boolean(Number(_local_1[2]));
            if (isNaN(_local_2)) {
                continue;
            }
            addPlayerToBuddyList(_local_2, _local_5, _local_4);
        }
        AIRTOWER.removeListener(AIRTOWER.GET_BUDDY_LIST, handleGetBuddyListFromServer);
        _local_7.buddyList = getBuddyList();
        sendMyPlayerData(_local_7);
    }
    function handleBuddyOnline(playerDetails) {
        var _local_1 = Number(playerDetails[1]);
        if (isNaN(_local_1)) {
            $e("[shell] handleBuddyOnline() -> Not a real number received for playerID! playerID: " + _local_1);
            return(undefined);
        }
        setBuddyAsOnlineById(_local_1);
        updateListeners(BUDDY_ONLINE, {player_id:_local_1, nickname:getBuddyNicknameById(_local_1)});
        updateListeners(UPDATE_BUDDY_LIST, getSortedBuddyList());
    }
    function handleBuddyOffline(playerDetails) {
        var _local_1 = Number(playerDetails[1]);
        if (isNaN(_local_1)) {
            $e("[shell] handleBuddyOffline() -> Not a real number received for playerID! playerID: " + _local_1);
            return(undefined);
        }
        setBuddyAsOfflineById(_local_1);
        updateListeners(UPDATE_BUDDY_LIST, getSortedBuddyList());
    }
    function sendBuddyRequest(playerID) {
        if (isNaN(playerID)) {
            $e("[shell] sendBuddyRequest() -> Not a real number passed for player id. playerID: " + playerID);
            return(undefined);
        }
        if (isPlayerBuddyById(playerID)) {
            $e("[shell] sendBuddyRequest() -> Player is already your buddy! playerID: " + playerID);
            return(undefined);
        }
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.BUDDY_HANDLER + "#") + AIRTOWER.REQUEST_BUDDY, [playerID], "str", getCurrentServerRoomId());
    }
    function handleBuddyRequest(playerDetails) {
        var _local_1 = Number(playerDetails[1]);
        var _local_3 = String(playerDetails[2]);
        if (isNaN(_local_1)) {
            $e("[shell] handleBuddyRequest() -> Not a real number passed for player id. playerID: " + _local_1);
            return(undefined);
        }
        if (isPlayerBuddyById(_local_1)) {
            $e("[shell] handleBuddyRequest() -> Player is already our buddy! playerID: " + _local_1);
            return(undefined);
        }
        setCurrentBuddyRequestObject({player_id:_local_1, nickname:_local_3});
        updateListeners(SEND_BUDDY_REQUEST, {player_id:_local_1, nickname:_local_3});
    }
    function sendBuddyAccept(playerID) {
        if (isNaN(playerID)) {
            $e("[shell] sendBuddyRequest() -> Not a real number passed for player id. playerID: " + playerID);
            return(undefined);
        }
        if (isPlayerBuddyById(playerID)) {
            $e("[shell] sendBuddyRequest() -> Player is already our buddy! playerID: " + playerID);
            return(undefined);
        }
        var _local_2 = getCurrentBuddyRequestObject();
        addPlayerToBuddyList(_local_2.player_id, _local_2.nickname, true);
        clearCurrentBuddyRequestObject();
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.BUDDY_HANDLER + "#") + AIRTOWER.ACCEPT_BUDDY, [playerID], "str", getCurrentServerRoomId());
    }
    function handleBuddyAccept(playerDetails) {
        var _local_1 = new Object();
        _local_1.player_id = Number(playerDetails[1]);
        _local_1.nickname = String(playerDetails[2]);
        if (isNaN(_local_1.player_id)) {
            $e("[shell] handleBuddyAccept() -> Not a real number passed for player id. playerID: " + playerID);
            return(undefined);
        }
        if (isPlayerBuddyById(_local_1.player_id)) {
            $e("[shell] handleBuddyAccept() -> Player is already a buddy! playerID: " + playerID);
            return(undefined);
        }
        addPlayerToBuddyList(_local_1.player_id, _local_1.nickname, true);
        updateListeners(SEND_BUDDY_ACCEPT, _local_1);
    }
    function sendRemoveBuddyPlayer(swid) {
        removeFriendship(swid);
        if (!removePlayerFromBuddyList(playerID)) {
            $e("[shell] sendRemoveBuddyPlayer() -> Player was not successfully removed from the local list");
            return(undefined);
        }
        updateListeners(UPDATE_BUDDY_LIST, getSortedBuddyList());
    }
    function handleRemoveBuddyPlayer(playerDetails) {
        var _local_1 = Number(playerDetails[1]);
        if (!removePlayerFromBuddyList(_local_1)) {
            $e("[shell] handleRemoveBuddyPlayer() -> Player was not successfully removed from the buddy list");
            return(undefined);
        }
        updateListeners(UPDATE_BUDDY_LIST, getSortedBuddyList());
    }
    function addPlayerToBuddyList(playerID, nickname, isOnline) {
        if (isNaN(playerID)) {
            $e("[shell] addToBuddyList() -> Invalid player id: " + playerID);
        }
        var _local_1 = new Object();
        _local_1.player_id = playerID;
        _local_1.nickname = nickname;
        _local_1.is_online = isOnline;
        getBuddyList().push(_local_1);
        sendNewBuddy(_local_1);
    }
    function removePlayerFromBuddyList(playerID) {
        if (!isPlayerBuddyById(playerID)) {
            $e("[shell] removePlayerFromBuddyList() -> Trying to remove a player from our buddy list who doesnt exist: playerID: " + playerID);
            return(false);
        }
        var _local_2 = getBuddyList();
        var _local_4 = _local_2.length;
        var _local_1 = 0;
        while (_local_1 < _local_4) {
            if ((_local_2[_local_1].player_id == playerID) || (_local_2[_local_1].swid == playerID)) {
                _local_2.splice(_local_1, 1);
                sendRefreshPlayerFriendInfo();
                return(true);
            }
            _local_1++;
        }
        return(false);
    }
    function isBuddyOnlineById(playerID) {
        if (isNaN(playerID)) {
            $e("[shell] isBuddyOnlineById() -> Invalid player id: " + playerID);
        }
        var _local_2 = getBuddyList();
        var _local_4 = _local_2.length;
        var _local_1 = 0;
        while (_local_1 < _local_4) {
            if ((_local_2[_local_1].player_id == playerID) || (_local_2[_local_1].swid == playerID)) {
                return(_local_2[_local_1].is_online);
            }
            _local_1++;
        }
    }
    function isPlayerBuddyById(playerID) {
        var _local_2 = getBuddyList();
        var _local_4 = _local_2.length;
        var _local_1 = 0;
        while (_local_1 < _local_4) {
            if ((_local_2[_local_1].player_id == playerID) || (_local_2[_local_1].swid == playerID)) {
                return(true);
            }
            _local_1++;
        }
        return(false);
    }
    function isPlayerMascotBuddyById(playerID) {
        var _local_3 = getMascotCrumbs()[playerID].mascot_id;
        if (_local_3 == undefined) {
            _local_3 = playerID;
        }
        var _local_2 = getBuddyList();
        var _local_1 = 0;
        while (_local_1 < _local_2.length) {
            if ((_local_3 == _local_2[_local_1].player_id) || (_local_3 == _local_2[_local_1].swid)) {
                return(true);
            }
            _local_1++;
        }
        return(false);
    }
    function setBuddyAsOnlineById(playerID) {
        if (isNaN(playerID)) {
            $e("[shell] setBuddyAsOnline() -> Invalid player id: " + playerID);
            return(undefined);
        }
        var _local_2 = getBuddyList();
        var _local_4 = _local_2.length;
        var _local_1 = 0;
        while (_local_1 < _local_4) {
            if ((_local_2[_local_1].player_id == playerID) || (_local_2[_local_1].swid == playerID)) {
                _local_2[_local_1].is_online = true;
            }
            _local_1++;
        }
    }
    function setBuddyAsOfflineById(playerID) {
        if (isNaN(playerID)) {
            $e("[shell] setBuddyAsOfflineById() -> Invalid player id: " + playerID);
            return(undefined);
        }
        var _local_2 = getBuddyList();
        var _local_4 = _local_2.length;
        var _local_1 = 0;
        while (_local_1 < _local_4) {
            if ((_local_2[_local_1].player_id == playerID) || (_local_2[_local_1].swid == playerID)) {
                _local_2[_local_1].is_online = false;
            }
            _local_1++;
        }
    }
    function getBuddyNicknameById(playerID) {
        if (isNaN(playerID)) {
            $e("[shell] getBuddyNicknameById() -> Invalid player id: " + playerID);
            return(undefined);
        }
        var _local_2 = getBuddyList();
        var _local_4 = _local_2.length;
        var _local_1 = 0;
        while (_local_1 < _local_4) {
            if ((_local_2[_local_1].player_id == playerID) || (_local_2[_local_1].swid == playerID)) {
                return(_local_2[_local_1].nickname);
            }
            _local_1++;
        }
        return(undefined);
    }
    function setCurrentBuddyRequestObject(obj) {
        buddyRequest = obj;
    }
    function getCurrentBuddyRequestObject() {
        return(buddyRequest);
    }
    function clearCurrentBuddyRequestObject() {
        buddyRequest = undefined;
    }
    function getBuddyList() {
        return(ROSTER.buddies);
    }
    function getBuddyById(player_id) {
        var _local_3 = getBuddyList();
        var _local_1 = 0;
        while (_local_1 < _local_3.length) {
            var _local_2 = _local_3[_local_1];
            if (_local_2.player_id == player_id) {
                return(_local_2);
            }
            _local_1++;
        }
        return(null);
    }
    function getBuddySwidById(player_id) {
        var _local_1 = getBuddyById(player_id);
        if (_local_1 == null) {
            return(null);
        }
        return(_local_1.swid);
    }
    function getSortedBuddyList() {
        return(ROSTER.buddies.sortOn(["is_online", "nickname"], [Array.DESCENDING, Array.CASEINSENSITIVE]));
    }
    function getPlayerLocationById(playerID) {
        if (isNaN(playerID)) {
            $e("[shell] getPlayerLocationById() -> Not a real number passed for player id. playerID: " + playerID);
            return(undefined);
        }
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_HANDLER + "#") + AIRTOWER.FIND_BUDDY, [playerID], "str", getCurrentServerRoomId());
    }
    function handleGetPlayerLocationById(serverResponse) {
        updateListeners(GET_PLAYER_LOCATION, {room_id:Number(serverResponse[1]), room_type:serverResponse[2], room_owner:serverResponse[3]});
    }
	function getPlayerLocationByIdJump(playerID) {
        if (isNaN(playerID)) {
            $e("[shell] getPlayerLocationById() -> Not a real number passed for player id. playerID: " + playerID);
            return(undefined);
        }
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_HANDLER + "#") + AIRTOWER.JUMP_BUDDY, [playerID], "str", getCurrentServerRoomId());
    }
	function handleGetPlayerLocationByIdJump(serverResponse) {
        updateListeners(GET_PLAYER_LOCATION_JUMP, {room_id:Number(serverResponse[1]), room_type:serverResponse[2], room_owner:serverResponse[3]});
    }
    function getIgnoreListFromServer() {
        if (ignore_list == undefined) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.IGNORE_HANDLER + "#") + AIRTOWER.GET_IGNORE_LIST, [], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] getIgnoreListFromServer() -> Ignore list already fetched!");
        }
    }
    function isPlayerIgnoredById(player_id) {
        var _local_2 = getIgnoreList();
        var _local_3 = _local_2.length;
        var _local_1 = 0;
        while (_local_1 < _local_3) {
            if (_local_2[_local_1].player_id == player_id) {
                return(true);
            }
            _local_1++;
        }
        return(false);
    }
    function getSortedIgnoreList() {
        return(ROSTER.ignored.sortOn("nickname", Array.CASEINSENSITIVE));
    }
    function getIgnoreList() {
        return(ROSTER.ignored);
    }
    function sendReportPlayer(player_id, reason_id, nickname) {
        if (isNaN(player_id)) {
            $e("[shell] sendReportPlayer() -> Player ID is not a real number. player_id: " + player_id);
            return(false);
        }
        if (isNaN(reason_id)) {
            $e("[shell] sendReportPlayer() -> Reason ID is not a real number. reason_id: " + reason_id);
            return(false);
        }
        if (!isValidString(nickname)) {
            $e("[shell] sendReportPlayer() -> Nickname is not a valid string. nickname: " + nickname);
            return(false);
        }
        if (reason_id == REPORT_BAD_PENGUIN_NAME) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.MESSAGE_HANDLER + "#") + AIRTOWER.REPORT_PLAYER, [player_id, reason_id, nickname], "str", getCurrentServerRoomId());
        } else if (isPlayerInChatLog(player_id)) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.MESSAGE_HANDLER + "#") + AIRTOWER.REPORT_PLAYER, [player_id], "str", getCurrentServerRoomId());
        } else {
            $d("[shell] sendReportPlayer() -> Player not reported because they were not in the chatlog");
        }
    }
    function mutePlayerById(player_id) {
        if (!isNaN(player_id)) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.MODERATION_HANDLER + "#") + AIRTOWER.MUTE, [player_id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] mutePlayerById() -> Not a real number passed for player_id: " + player_id);
        }
    }
    function kickPlayerById(player_id) {
        if (!isNaN(player_id)) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.MODERATION_HANDLER + "#") + AIRTOWER.KICK, [player_id], "str", getCurrentServerRoomId());
        } else {
            $e("[shell] kickPlayerById() -> Not a real number passed for player_id: " + player_id);
        }
    }
    function initBanPlayerById(player_id, pharse) {
        if (!isNaN(player_id)) {
            if (isValidString(pharse)) {
                AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.MODERATION_HANDLER + "#") + AIRTOWER.INT_BAN, [player_id, pharse], "str", getCurrentServerRoomId());
            } else {
                $e("[shell] initBanPlayerById() -> Pharse isnt a valid string: pharse: " + pharse);
            }
        } else {
            $e("[shell] initBanPlayerById() -> Not a real number passed for player_id: " + player_id);
        }
    }
    function handleModeratorAction(obj) {
        var _local_7 = obj[0];
        var _local_2 = obj[1];
        var _local_5 = Number(obj[2]);
        var _local_6 = obj[3];
        var _local_3;
        if (_local_2 == AIRTOWER.BAN) {
            _local_3 = getLocalizedString("ban_player_hint");
        } else if (_local_2 == AIRTOWER.KICK) {
            _local_3 = getLocalizedString("kick_player_hint");
        } else if (_local_2 == AIRTOWER.MUTE) {
            _local_3 = getLocalizedString("mute_player_hint");
        }
        var _local_1 = {};
        _local_1.mod_action = _local_2;
        _local_1.message = _local_3;
        _local_1.player_id = _local_5;
        _local_1.nickname = _local_6;
        _local_1.type = SEND_BLOCKED_MESSAGE;
        addToChatLog(_local_1);
    }
    function setupMailEngine() {
        if (mail_engine == undefined) {
            $d("[MAIL] *** Mail Engine Initiated ***");
            mail_engine = {};
            mail_engine.mail = undefined;
            mail_engine.has_fetched = false;
            mail_engine.has_messages = false;
            mail_engine.on_response = undefined;
            mail_engine.on_details_response = undefined;
            mail_engine.on_next_set_response = undefined;
            mail_engine.on_delete_user_mail_response = undefined;
            mail_engine.total_mail = undefined;
            mail_engine.total_mail_listeners = undefined;
            mail_engine.new_mail_count = 0;
            mail_engine.new_mail_queue = undefined;
            mail_engine.new_mail_count_on_server = 0;
            mail_engine.new_mail_listeners = undefined;
            mail_engine.mail_recieved_listeners = undefined;
            mail_engine.messages_per_set = 12;
            mail_engine.last_set_fetched = 0;
            mail_engine.total_sets = undefined;
            mail_engine.last_recieved_id = 0;
        }
    }
    function showMail() {
        if (isMyIgloo || (getIsRoomIgloo)) {
            sendHideLikeWindow();
        }
        if (getNewMailCount() > 0) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.MAIL_HANDLER + "#") + AIRTOWER.MAIL_CHECKED, [], "str", getCurrentServerRoomId());
        }
        MAIL.showInbox();
        SHELL.sendAS3StopNotificationServices();
        gotoState(MAIL_STATE);
    }
    function hideMail() {
        if (isMyIgloo || (getIsRoomIgloo)) {
            sendShowLikeWindow();
        }
        gotoState(PLAY_STATE);
        SHELL.sendAS3StartNotificationServices();
    }
    function closeMail() {
        MAIL.closeInbox();
        gotoState(PLAY_STATE);
    }
    function sendMailToUserById(player_id, nickname) {
        if (!isNaN(player_id)) {
            if (isValidString(nickname)) {
                POSTCARDS.sendPostcardToPlayerById(player_id, nickname);
            } else {
                $e("[mail engine] sendMailToUserById() -> Invalid nickname! nickname: " + nickname);
            }
        } else {
            $e("[mail engine] sendMailToUserById() -> Invalid player id: " + player_id);
        }
    }
    function attachMailListenersToAirtower() {
    }
    function startMailEngine() {
        $d("[mail engine] startMailEngine()");
        setupMailEngine();
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.MAIL_HANDLER + "#") + AIRTOWER.MAIL_START_ENGINE, [], "str", getCurrentServerRoomId());
    }
    function handleStartMailEngine(obj) {
        var _local_4 = obj.shift();
        $d("[mail engine] handleStartMailEngine() -> " + obj);
        var _local_2 = Number(obj[0]);
        var _local_1 = Number(obj[1]);
        setTotalMessages(_local_1);
        setTotalSets(_local_1);
        if (_local_2 > 0) {
            setNewMailCountOnServer(_local_2);
            updateListeners(NEW_MAIL, getNewMailCount());
        }
        if (_local_1 > 0) {
            setHasMessages(true);
        }
    }
    function showInbox() {
        $d("[shell] showInbox();");
    }
    function getNewMailCount() {
        var _local_2;
        var _local_1;
        mail_engine.new_mail_count = 0;
        if (mail_engine.has_fetched == true) {
            _local_2 = mail_engine.mail.length;
            _local_1 = 0;
            while (_local_1 < _local_2) {
                if (mail_engine.mail[_local_1].read == 0) {
                    mail_engine.new_mail_count++;
                }
                _local_1++;
            }
            return(mail_engine.new_mail_count);
        }
        if (mail_engine.new_mail_queue != undefined) {
            _local_2 = mail_engine.new_mail_queue.length;
            _local_1 = 0;
            while (_local_1 < _local_2) {
                if (mail_engine.new_mail_queue[_local_1].read == 0) {
                    mail_engine.new_mail_count++;
                }
                _local_1++;
            }
            return(mail_engine.new_mail_count + getNewMailCountOnServer());
        }
        if ((mail_engine.mail.length > 0) && (getNewMailCountOnServer() == 0)) {
            return(mail_engine.mail.length);
        }
        return(getNewMailCountOnServer());
    }
    function setAsRead(id) {
        if (!isNaN(id)) {
            $d("[mail engine] setAsRead(id) -> " + id);
            var _local_1 = 0;
            var _local_3 = mail_engine.mail.length;
            while (_local_1 < _local_3) {
                if (mail_engine.mail[_local_1].unq_id == id) {
                    mail_engine.mail[_local_1].read = 1;
                    break;
                }
                _local_1++;
            }
            updateListeners(NEW_MAIL, getNewMailCount());
        } else {
            $e("[mail engine] setAsRead() -> Invalid id: " + id);
        }
    }
    function deleteMailItem(id) {
        if (!isNaN(id)) {
            $d("[mail engine] deleteMailItem(id) -> " + id);
            var _local_1 = 0;
            var _local_4 = mail_engine.mail.length;
            var _local_3;
            while (_local_1 < _local_4) {
                if (mail_engine.mail[_local_1].unq_id == id) {
                    _local_3 = _local_1;
                    break;
                }
                _local_1++;
            }
            if (!isNaN(_local_3)) {
                mail_engine.mail.splice(_local_3, 1);
                mail_engine.total_mail--;
                updateListeners(TOTAL_MAIL, mail_engine.total_mail);
                updateListeners(NEW_MAIL, getNewMailCount());
                AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.MAIL_HANDLER + "#") + AIRTOWER.DELETE_MAIL, [id], "str", getCurrentServerRoomId());
                return(true);
            }
            $e(("[mail engine] deleteMailItem(id) -> " + id) + " Trying to delete a mail item which did not exist.");
        } else {
            $e("[mail engine] deleteMailItem(id) -> " + id);
        }
        return(false);
    }
    function deleteMailFromUser(user_to_delete, on_response) {
        if (!isNaN(user_to_delete)) {
            $d((("[mail engine] deleteMailFromUser(user_to_delete, on_response) -> " + user_to_delete) + " ") + on_response);
            var _local_2 = 0;
            var _local_4 = mail_engine.mail.length;
            while (_local_2 < _local_4) {
                if (mail_engine.mail[_local_2].user_id == user_to_delete) {
                    mail_engine.mail.splice(_local_2, 1);
                    continue;
                }
                _local_2++;
            }
            if (on_response != undefined) {
                mail_engine.on_delete_user_mail_response = com.clubpenguin.util.Delegate.create(this, on_response);
            }
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.MAIL_HANDLER + "#") + AIRTOWER.DELETE_MAIL_FROM_PLAYER, [user_to_delete], "str", getCurrentServerRoomId());
        } else {
            $e("[mail engine] deleteMailFromUser(user_to_delete, on_response) user to delete is " + user_to_delete);
        }
    }
    function debugMailList() {
        var _local_1 = mail_engine.mail;
        var _local_2 = _local_1.length;
        var _local_3 = 0;
    }
    function handleDeleteMailFromUser(obj) {
        var _local_1 = obj.shift();
        mail_engine.total_mail = Number(obj[0]);
        if (mail_engine.mail.length < getMessagesPerSet()) {
            if (nextSetAvailable()) {
                getNextSet(debugMailList);
            }
        }
        updateListeners(TOTAL_MAIL, mail_engine.total_mail);
        updateListeners(NEW_MAIL, getNewMailCount());
        mail_engine.on_delete_user_mail_response();
        mail_engine.on_delete_user_mail_response = undefined;
    }
    function sendMail(recipient_id, postcard_id) {
        if (getMyPlayerTotalCoins() >= POSTCARD_COST) {
            if ((!isNaN(recipient_id)) && (!isNaN(postcard_id))) {
                $d(((("[mail engine] sendMail(" + recipient_id) + ",") + postcard_id) + ")");
                AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.MAIL_HANDLER + "#") + AIRTOWER.SEND_MAIL, [recipient_id, postcard_id], "str", getCurrentServerRoomId());
                total_sent_messages++;
            } else {
                $e((("[mail engine] sendMail() -> " + recipient_id) + " ") + postcard_id);
                var _local_2 = {};
                _local_2.status_code = MAIL_SUCCESSFULLY_SENT;
                updateListeners(MAIL_SEND_STATUS, _local_2);
            }
        } else {
            $e("[mail engine] sendMail() -> Not enough coins to send message!");
            var _local_2 = {};
            _local_2.status_code = MAIL_NOT_ENOUGH_COINS;
            updateListeners(MAIL_SEND_STATUS, _local_2);
        }
    }
    function handleSendMailItem(result) {
        var _local_5 = Number(result[0]);
        var _local_4 = Number(result[1]);
        var _local_3 = Number(result[2]);
        var _local_1 = {};
        switch (_local_3) {
            case MAIL_SUCCESSFULLY_SENT : 
                _local_1.status_code = MAIL_SUCCESSFULLY_SENT;
                break;
            case MAIL_NOT_ENOUGH_COINS : 
                _local_1.status_code = MAIL_NOT_ENOUGH_COINS;
                break;
            case MAIL_INBOX_FULL : 
                _local_1.status_code = MAIL_INBOX_FULL;
                break;
            default : 
                _local_1.status_code = MAIL_SUCCESSFULLY_SENT;
                break;
        }
        updateListeners(MAIL_SEND_STATUS, _local_1);
        setMyPlayerTotalCoins(_local_4);
    }
    function handleRecieveMailItem(obj) {
        var _local_5 = obj.shift();
        if ((((obj[0] == undefined) || (obj[1] == undefined)) || (obj[2] == undefined)) || (obj[3] == undefined)) {
            $e("[mail engine] handleRecieveMailItem() We received a malformed mail item.");
            return(false);
        }
        $d("[mail engine] handleRecieveMailItem() -> " + obj);
        mail_engine.new_mail_count++;
        var _local_4 = getPenguinStandardTime(Number(crumb[4]) * ONE_SECOND_IN_MILLISECONDS);
        for (var _local_3 in obj) {
        }
        var _local_2 = new com.clubpenguin.mail.Postcard();
        _local_2.from = obj[0];
        _local_2.user_id = Number(obj[1]);
        _local_2.pc_id = Number(obj[2]);
        _local_2.details = obj[3];
        _local_2["date"] = _local_4;
        _local_2.unq_id = Number(obj[5]);
        _local_2.read = 0;
        if (mail_engine.has_fetched == true) {
            mail_engine.mail.splice(0, 0, _local_2);
        } else if (getHasMessages()) {
            if (mail_engine.new_mail_queue == undefined) {
                mail_engine.new_mail_queue = new Array();
            }
            mail_engine.new_mail_queue.splice(0, 0, _local_2);
        } else {
            if (mail_engine.mail == undefined) {
                mail_engine.mail = new Array();
            }
            mail_engine.mail.splice(0, 0, _local_2);
        }
        setLastRecievedId(_local_2.unq_id);
        mail_engine.total_mail = mail_engine.total_mail + 1;
        updateListeners(RECIEVE_MAIL, getNewMailCount());
        updateListeners(TOTAL_MAIL, mail_engine.total_mail);
        updateListeners(NEW_MAIL, getNewMailCount());
    }
    function getMailFromEngine(on_response) {
        if (on_response != undefined) {
            setMailResponseFunc(on_response);
        }
        if ((mail_engine.has_fetched == false) && (getHasMessages())) {
            $d("[mail engine] getMailFromEngine() -> from SmartFox");
            var _local_2 = new Object();
            var _local_1 = getLastRecievedId();
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.MAIL_HANDLER + "#") + AIRTOWER.GET_MAIL, [_local_1], "str", getCurrentServerRoomId());
        } else {
            $d("[mail engine] getMailFromEngine() -> from Engine");
            getMailResponseFunc()(mail_engine.mail);
        }
    }
    function handleGetMail(obj) {
        var _local_2 = obj.shift();
        if (!mail_engine.has_fetched) {
            handleGetFirstMail(obj);
        } else {
            handleGetNextSet(obj);
        }
    }
    function handleGetFirstMail(obj) {
        var _local_7 = new Array();
        if (obj.length > 0) {
            var _local_1;
            var _local_9 = obj.length;
            var _local_4 = 0;
            var _local_3 = 0;
            var _local_6 = getNewMailCountOnServer();
            while (_local_4 < _local_9) {
                _local_3 = 1;
                if (_local_6 > 0) {
                    _local_3 = 0;
                    _local_6--;
                }
                _local_1 = obj[_local_4].split("|");
                var _local_5 = getPenguinStandardTime(Number(_local_1[4]) * ONE_SECOND_IN_MILLISECONDS);
                for (var _local_8 in _local_1) {
                }
                var _local_2 = new com.clubpenguin.mail.Postcard();
                _local_2.from = _local_1[0];
                _local_2.user_id = Number(_local_1[1]);
                _local_2.pc_id = Number(_local_1[2]);
                _local_2.details = _local_1[3];
                _local_2.date = _local_5;
                _local_2.unq_id = Number(_local_1[5]);
                _local_2.read = _local_3;
                _local_7.push(_local_2);
                _local_4++;
            }
            if (mail_engine.new_mail_queue.length > 0) {
                _local_7 = mail_engine.new_mail_queue.concat(_local_7);
                mail_engine.new_mail_queue = undefined;
            } else {
                setLastRecievedId(_local_7[_local_7.length - 1].unq_id);
            }
            mail_engine.mail = _local_7;
            if (getNewMailCountOnServer() > 0) {
                setNewMailCountOnServer(_local_6);
            }
        }
        mail_engine.has_fetched = true;
        getMailResponseFunc()(mail_engine.mail);
    }
    function setTotalSets(total) {
        mail_engine.total_sets = Math.ceil((total / mail_engine.messages_per_set) - 1);
    }
    function getTotalSets() {
        return(mail_engine.total_sets);
    }
    function setCurrentSet(last_fetched) {
        mail_engine.last_set_fetched = last_fetched;
    }
    function getCurrentSet() {
        return(mail_engine.last_set_fetched);
    }
    function nextSetAvailable() {
        if ((getCurrentSet() + 1) <= getTotalSets()) {
            return(true);
        }
        return(false);
    }
    function getNextSet(on_response) {
        $d("[mail engine] getNextSet(on_response) -> " + on_response);
        if (on_response != undefined) {
            mail_engine.on_next_set_response = com.clubpenguin.util.Delegate.create(this, on_response);
            var _local_3 = getLastRecievedId();
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.MAIL_HANDLER + "#") + AIRTOWER.GET_MAIL, [_local_3], "str", getCurrentServerRoomId());
            setCurrentSet(getCurrentSet() + 1);
        } else {
            $e(("[mail engine] getNextSet(on_response) -> " + on_response) + " You must pass a onResponse function");
        }
    }
    function handleGetNextSet(obj) {
        $d("[mail engine] onNextSetResponse() -> " + obj);
        if (obj.length > 0) {
            var _local_8 = new Array();
            if (obj.length > 0) {
                var _local_1;
                var _local_10 = obj.length;
                var _local_3 = 0;
                var _local_6 = getNewMailCountOnServer();
                var _local_4;
                var _local_11 = 12;
                var _local_12 = getCurrentSet() * _local_11;
                while (_local_3 < _local_10) {
                    _local_4 = 1;
                    if (_local_6 > 0) {
                        _local_4 = 0;
                        _local_6--;
                    }
                    _local_1 = obj[_local_3].split("|");
                    var _local_5 = getPenguinStandardTime(Number(_local_1[4]) * ONE_SECOND_IN_MILLISECONDS);
                    for (var _local_7 in _local_1) {
                    }
                    var _local_2 = new com.clubpenguin.mail.Postcard();
                    _local_2.from = _local_1[0];
                    _local_2.user_id = Number(_local_1[1]);
                    _local_2.pc_id = Number(_local_1[2]);
                    _local_2.details = _local_1[3];
                    _local_2["date"] = _local_5;
                    _local_2.unq_id = Number(_local_1[5]);
                    _local_2.read = _local_4;
                    _local_8.push(_local_2);
                    _local_3++;
                }
                mail_engine.mail = mail_engine.mail.concat(_local_8);
                if (getNewMailCountOnServer() > 0) {
                    setNewMailCountOnServer(_local_6);
                }
            }
            setLastRecievedId(_local_8[_local_8.length - 1].unq_id);
            mail_engine.on_next_set_response(mail_engine.mail);
        }
    }
    function setMailResponseFunc(func) {
        mail_engine.on_response = com.clubpenguin.util.Delegate.create(this, func);
    }
    function getMailResponseFunc() {
        return(mail_engine.on_response);
    }
    function getMailDetails(id, func) {
        $d((("[mail engine] getMailDetails(id, func) -> " + id) + " ") + func);
        if (!isNaN(id)) {
            setOnDetailsFunc(func);
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.MAIL_HANDLER + "#") + AIRTOWER.GET_MAIL_DETAILS, [id], "str", getCurrentServerRoomId());
        } else {
            $e(("[mail engine] getMailDetails() -> id is " + id) + " You must have a valid ID");
        }
    }
    function onMailDetails(csl) {
        var _local_1 = csl.split("|");
        getOnDetailsFunc()(_local_1);
    }
    function getOnDetailsFunc() {
        return(mail_engine.on_details_response);
    }
    function setOnDetailsFunc(func) {
        mail_engine.on_details_response = com.clubpenguin.util.Delegate.create(this, func);
    }
    function setActivePostcard(obj) {
        active_postcard = obj;
    }
    function getActivePostcard() {
        return(active_postcard);
    }
    function getMailArray() {
        return(mail_engine.mail);
    }
    function getMessagesPerSet() {
        return(mail_engine.messages_per_set);
    }
    function setHasMessages(has_messages) {
        mail_engine.has_messages = has_messages;
    }
    function getHasMessages() {
        return(mail_engine.has_messages);
    }
    function getTotalMessages() {
        return(mail_engine.total_mail);
    }
    function getLastRecievedId() {
        return(mail_engine.last_recieved_id);
    }
    function setLastRecievedId(id) {
        mail_engine.last_recieved_id = id;
    }
    function setTotalMessages(tot) {
        mail_engine.total_mail = tot;
    }
    function setNewMailCountOnServer(new_count) {
        mail_engine.new_mail_count_on_server = new_count;
    }
    function getNewMailCountOnServer() {
        return(mail_engine.new_mail_count_on_server);
    }
    function updateWorldPopulations(pop_list) {
        var _local_6 = pop_list.split("|");
        var _local_1 = 0;
        var _local_7 = _local_6.length;
        var _local_3;
        var _local_2;
        var _local_4;
        var _local_5;
        while (_local_1 < _local_7) {
            _local_3 = _local_6[_local_1].split(",");
            _local_4 = Number(_local_3[0]);
            _local_5 = Number(_local_3[1]);
            _local_2 = getWorldById(_local_4);
            _local_2.population = _local_5;
            _local_2.has_buddies = false;
            _local_2.rank = _local_1;
            _local_1++;
        }
    }
    function setWorldsWithBuddies(buddy_list) {
        if (!isValidString(buddy_list)) {
            return(false);
        }
        var _local_4 = buddy_list.split("|");
        var _local_3 = 0;
        var _local_6 = _local_4.length;
        var _local_2 = getWorldList();
        var _local_1 = 0;
        var _local_5 = _local_2.length;
        while (_local_3 < _local_6) {
            _local_1 = 0;
            while (_local_1 < _local_5) {
                if (_local_4[_local_3] == _local_2[_local_1].id) {
                    _local_2[_local_1].has_buddies = true;
                    break;
                }
                _local_1++;
            }
            _local_3++;
        }
    }
    function getWorldById(id) {
        if (!isNaN(id)) {
            var _local_2 = getWorldCrumbs();
            if (_local_2[id] != undefined) {
                return(_local_2[id]);
            }
            $e(("getWorldById() -> No world with the id of " + id) + " has been defined!");
        } else {
            $e("getWorldById() -> Not a real number passed for id! id: " + id);
        }
        return(undefined);
    }
    function addWorld(world_id, world_name, world_ip, world_port, is_safe) {
        var _local_1 = getWorldById(world_id);
        if (_local_1 == undefined) {
            _local_1 = new Object();
            _local_1.name = world_name;
            _local_1.ip = world_ip;
            _local_1.port = world_port;
            _local_1.is_safe = is_safe;
            _local_1.id = world_id;
            _local_1.buddies = 0;
            _local_1.population = -1;
            getWorldByIdList().push(_local_1);
        } else {
            $e(("addWorld() -> World with the id of " + id) + " has been already been added!");
        }
    }
    function setWorldForConnection(world_id) {
        world_id_holder = world_id;
        var _local_1 = getWorldById(world_id);
        _trackerAS2.sendWorldSelectedStartLog(world_id);
        if ((_local_1.ip != undefined) && (_local_1.port != undefined)) {
            gotoState(PLAY_STATE);
        } else if (_localLoginServerData.autoLogin) {
            tryNextValidWorldLogin();
        } else {
            $e((("setWorldForConnection() -> Invalid IP or Port. IP: " + _local_1.ip) + " Port: ") + _local_1.port);
        }
    }
    function connectToWorld() {
        var _local_1 = getWorldById(world_id_holder);
        showLoading();
        AIRTOWER.connectToWorld(_local_1.ip, _local_1.port, connectToWorldResponse);
    }
    function jumpToWorld(worldId, loginKey) {
        showJumpLoading("");
        jumpDestinationAirTower = new com.clubpenguin.net.Airtower(this);
        jumpDestinationAirTower.debugName = "JumpDestination";
        jumpDestinationAirTower.init();
        jumpDestinationAirTower.setUsername(getMyPlayerNickname());
        jumpDestinationAirTower.setPlayerId(getMyPlayerId());
        AIRTOWER.cloneListeners(jumpDestinationAirTower);
        quietAirtower();
        AIRTOWER.setIsJumpToNewServerInProgress(true);
        AIRTOWER.disconnect();
        world_id_holder = worldId;
        var _local_3 = getWorldById(worldId);
        showLoading((getLocalizedString("Joining") + " ") + _local_3.name);
        jumpDestinationAirTower.connectToWorld(_local_3.ip, _local_3.port, com.clubpenguin.util.Delegate.create(this, jumpConnectToWorldResponse), loginKey);
        _global.jumpDestinationAirTower = jumpDestinationAirTower;
    }
    function connectToWorldResponse(success, isAgent, isGuide, hasModifiedStampCover) {
        if (success) {
            updateListeners(WORLD_CONNECT_SUCCESS);
            LOGIN_HOLDER.removeMovieClip();
            MERCH_HOLDER.removeMovieClip();
            setupStampManager();
            var _local_2 = getStampManager();
            _local_2.setHasModifiedStampCover(hasModifiedStampCover);
            getMyInventoryList();
            startMailEngine();
            setupMailInboxModel();
            getSocketServerRevision();
            com.clubpenguin.login.LocalData.setLastWorldId(world_id_holder);
            startPlayerIdleCheck();
            var _local_1 = getWorldById(world_id_holder);
            setWorldSafe(_local_1.is_safe);
            setCurrentWorld(_local_1);
            cleanupWorlds();
            getFurnitureListFromServer();
        } else {
            $e("[shell] connectToWorldResponse() -> Connection to world failed. Sending user back to login.", {error_code:CONNECTION_TIMEOUT});
        }
    }
    function jumpConnectToWorldResponse(success, isAgent, isGuide, hasModifiedStampCover) {
        if (success) {
            var _local_2 = getWorldById(world_id_holder);
            setWorldSafe(_local_2.is_safe);
            setCurrentWorld(_local_2);
            cleanupWorlds();
            var _local_3 = com.clubpenguin.net.ProxyAirtower(AIRTOWER);
            _local_3.setAirtower(_global.jumpDestinationAirTower);
            enableAirtower();
        } else {
            _global.jumpDestinationAirTower.disconnect();
            _global.jumpDestinationAirTower = null;
            enableAirtower();
        }
    }
    function cleanupWorlds() {
        world_id_holder = undefined;
        world_response_holder = undefined;
    }
    function setWorldCrumbs(obj) {
        var _local_2 = new Object();
        var _local_3 = getLocalizedWorldCrumbs();
        var _local_1;
        for (_local_1 in obj) {
            if (_local_3[_local_1].name != undefined) {
                _local_2[_local_1] = obj[_local_1];
                _local_2[_local_1].id = _local_1;
                _local_2[_local_1].name = _local_3[_local_1].name;
            }
        }
        world_crumbs = _local_2;
    }
    function getWorldCrumbs() {
        return(world_crumbs);
    }
    function setLocalizedWorldCrumbs(obj) {
        localized_world_crumbs = obj;
    }
    function getLocalizedWorldCrumbs() {
        return(localized_world_crumbs);
    }
    function setLoginServer(obj) {
        login_server = obj;
    }
    function getLoginServer() {
        return(login_server);
    }
    function setRedemptionServer(obj) {
        redemption_server = obj;
    }
    function getRedemptionServer() {
        return(redemption_server);
    }
    function setWebService(obj) {
        webService = obj;
    }
    function getWebService() {
        return(webService);
    }
    function getSortedWorldList() {
        var _local_3 = getWorldCrumbs();
        var _local_9 = new Array();
        var _local_8 = new Array();
        var _local_2;
        var _local_7 = ROSTER.buddies;
        var _local_6 = 0;
        while (_local_6 < _local_7.length) {
            var _local_4 = _local_7[_local_6];
            if (_local_4.world_id != undefined) {
                var _local_5 = false;
                var _local_1 = 0;
                while (_local_1 < worldsWithFriends.length) {
                    if (worldsWithFriends[_local_1] == _local_4.world_id) {
                        _local_5 = true;
                        break;
                    }
                    _local_1++;
                }
                if (!_local_5) {
                    worldsWithFriends.push(_local_4.world_id);
                }
            }
            _local_6++;
        }
        for (_local_2 in _local_3) {
            if ((_local_3[_local_2].population == com.clubpenguin.login.views.WorldSelection.FULL_POPULATION) || (_local_3[_local_2].population == com.clubpenguin.login.views.WorldSelection.FIVE_BARS_HIGH)) {
                _local_8.push(_local_3[_local_2]);
            } else {
                _local_9.push(_local_3[_local_2]);
            }
        }
        _local_8.sortOn(["population", "has_buddies"], [Array.NUMERIC | Array.ASCENDING, Array.NUMERIC | Array.DESCENDING]);
        _local_9.sortOn(["has_buddies", "population"], [Array.NUMERIC | Array.DESCENDING, Array.NUMERIC | Array.DESCENDING]);
        return(_local_9.concat(_local_8));
    }
    function worldHasFriends(serverID) {
        var _local_1 = 0;
        while (_local_1 < worldsWithFriends.length) {
            if (worldsWithFriends[_local_1] == serverID) {
                worldsWithFriends.splice(_local_1, 1);
                return(true);
            }
            _local_1++;
        }
        return(false);
    }
    function setWorldSafe(is_safe) {
        is_world_safe = is_safe;
    }
    function isWorldSafe() {
        return(is_world_safe);
    }
    function setCurrentWorld(obj) {
        if (obj != undefined) {
            current_world_obj = duplicateObject(obj);
            sendAS3CurrentWorld(current_world_obj);
        } else {
            $e("[shell] setCurrentWorld() World object is undefined! obj: " + obj);
        }
    }
    function getCurrentWorld() {
        return(current_world_obj);
    }
    function getWorldList() {
        var _local_1 = getWorldCrumbs();
        var _local_3 = new Array();
        var _local_2;
        for (_local_2 in _local_1) {
            _local_3.push(_local_1[_local_2]);
        }
        return(_local_3);
    }
    function addState(state_type, show, hide) {
        var _local_2 = getStateIndex(state_type);
        if (_local_2 == -1) {
            getStates().push({type:state_type, hideFunc:hide, showFunc:show});
            $d((((("addState() -> Type: " + state_type) + " show func: ") + show) + " hide func: ") + hide);
        } else {
            $d("addState() -> State already exists!");
        }
    }
    function gotoState(state_type, options) {
        var _local_2 = getStateIndex(state_type);
        if (_local_2 != -1) {
            hideAllStates();
            var _local_3 = getStates();
            _local_3[_local_2].showFunc(options);
            currentState = state_type;
            updateListeners(UPDATE_SHELL_STATE, {state:state_type});
        } else {
            $d("gotoState() -> Tried to goto a state which did not exist! state_type " + state_type);
        }
    }
    function getState() {
        return(currentState);
    }
    function hideAllStates() {
        var _local_2 = getStates();
        var _local_3 = _local_2.length;
        var _local_1 = 0;
        while (_local_1 < _local_3) {
            _local_2[_local_1].hideFunc();
            _local_1++;
        }
    }
    function getStateIndex(state_type) {
        var _local_2 = getStates();
        var _local_3 = _local_2.length;
        var _local_1 = 0;
        while (_local_1 < _local_3) {
            if (_local_2[_local_1].type == state_type) {
                return(_local_1);
            }
            _local_1++;
        }
        return(-1);
    }
    function removeState(state_type) {
        var _local_1 = getStateIndex(state_type);
        if (_local_1 != -1) {
            getStates().splice(_local_1, 1);
            return(true);
        }
        $d("removeState() -> Tried to remove a state which did not exist!");
        return(false);
    }
    function getStates() {
        return(states_holder);
    }
    function setDevWebDomain(devWebDomain) {
        _devWebDomain = devWebDomain;
    }
    function setServerData(data) {
        _localLoginServerData = data;
    }
    function receiveServices() {
        var _local_3 = "/";
        setWebService({url:_local_3});
        var _local_2 = new com.clubpenguin.net.WebServiceManager();
        setWebServiceManager(_local_2);
        var _local_1 = new com.clubpenguin.net.WebServiceReceiver();
        _local_1.addEventListener(com.clubpenguin.net.WebServiceReceiver.EVENT_RECEIVING_COMPLETE, webServicesReady);
        setWebServiceReceiver(_local_1);
        setupFieldOp();
        loadLocalCrumbSWF();
    }
    function webServicesReady() {
        loadBootDependencies();
    }
    function loadLocalCrumbSWF() {
        var _local_2 = new com.clubpenguin.hybrid.HybridMovieClipLoader();
        _local_2.addEventListener(com.clubpenguin.hybrid.HybridMovieClipLoader.EVENT_ON_LOAD_INIT, mx.utils.Delegate.create(this, onLocalCrumbSWFLoaded));
        _local_2.loadClip((getLocalContentPath() + CRUMBS_PATH) + LOCAL_CRUMBS_FILE, LOCAL_CRUMBS, "setup_state.as loadLocalCrumbSWF()");
    }
    function onLocalCrumbSWFLoaded(event) {
        setLocalizedWorldCrumbs(LOCAL_CRUMBS.servers);
        loadGlobalCrumbSWF();
    }
    function loadGlobalCrumbSWF() {
        var _local_2 = new com.clubpenguin.hybrid.HybridMovieClipLoader();
        _local_2.addEventListener(com.clubpenguin.hybrid.HybridMovieClipLoader.EVENT_ON_LOAD_INIT, mx.utils.Delegate.create(this, onGlobalCrumbSWFLoaded));
        _local_2.loadClip((getGlobalContentPath() + CRUMBS_PATH) + GLOBAL_CRUMBS_FILE, GLOBAL_CRUMBS, "setup_state.as loadGlobalCrumbSWF()");
    }
    function onGlobalCrumbSWFLoaded(event) {
        setWorldCrumbs(GLOBAL_CRUMBS.servers);
        setLoginServer(GLOBAL_CRUMBS.login_server);
        setRedemptionServer(GLOBAL_CRUMBS.redemption_server);
        loadMapCategories();
    }
    function loadMapCategories() {
        _mapTriggersLoader = new com.clubpenguin.util.JSONLoader();
        _mapTriggersLoader.addEventListener(com.clubpenguin.util.JSONLoader.COMPLETE, onMapTriggersLoaded);
        _mapTriggersLoader.addEventListener(com.clubpenguin.util.JSONLoader.FAIL, onMapTriggersLoaded);
        var _local_1 = ((_localLoginServerData.getContentCacheVersion() == "") ? (MAP_TRIGGERS_FILNAME) : (MAP_TRIGGERS_FILNAME + _localLoginServerData.getContentCacheVersion()));
        _mapTriggersLoader.load((getBaseConfigPath() + "v2/content/global/content/") + _local_1);
    }
    function onMapTriggersLoaded() {
        setMapTriggersData(_mapTriggersLoader.data);
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_WEB_SERVICE_REQUEST});
    }
    function showLogin() {
        if (login_init) {
            LOGIN_HOLDER._visible = true;
        } else {
            loadLoginDependencies();
        }
    }
    function loadLoginDependencies() {
        loginDepLoader = new com.clubpenguin.shell.DependencyLoader(getClientPath(), dependencyHolder);
        loginDepLoader.addEventListener(com.clubpenguin.shell.DependencyLoader.PROGRESS, onDependencyLoaderProgress, this);
        loginDepLoader.addEventListener(com.clubpenguin.shell.DependencyLoader.COMPLETE, onLoginDependencyLoaderComplete, this);
        loginDepLoader.load(loginDependencies);
    }
    function onLoginDependencyLoaderComplete() {
        LOGIN_HOLDER = this.dependencyHolder.login;
        LOGIN_HOLDER.viewManager.shell = this;
        LOGIN_HOLDER.viewManager.setLanguageAbbreviation(getLanguageAbbriviation());
        LOGIN_HOLDER.viewManager.setRedemptionStatus(doRedemptionLogin);
        LOGIN_HOLDER.viewManager.initialize();
        loginDepLoader.removeEventListener(com.clubpenguin.shell.DependencyLoader.PROGRESS, onDependencyLoaderProgress, this);
        loginDepLoader.removeEventListener(com.clubpenguin.shell.DependencyLoader.COMPLETE, onLoginDependencyLoaderComplete, this);
        delete loginDepLoader;
        updateListeners(LOAD_COMPLETE, undefined);
        login_init = true;
        hideLoading();
    }
    function hideLogin() {
        LOGIN_HOLDER._visible = false;
    }
    function sendLogin(username, pass, on_response, auto) {
        this.username = username;
        this.password = pass;
        AIRTOWER.connectToLogin(username, pass, on_response, auto);
    }
    function setManualLoginCallback(callback) {
        _manualLoginCallback = callback;
    }
    function doAutoLogin() {
        showLoading((getLocalizedString("Logging in") + " ") + toTitleCase(_localLoginServerData.nau));
        sendLogin(_localLoginServerData.nau, _localLoginServerData.nal, com.clubpenguin.util.Delegate.create(this, onAutoLoginResponse), true);
    }
    function onAutoLoginResponse(success) {
        if (success) {
            var _local_4 = getMyPlayerId();
            if (_local_4 == undefined) {
                _local_4 = -1;
            }
            showLoading((getLocalizedString("Logging in") + " ") + toTitleCase(_localLoginServerData.nau));
            connectToFriends(getMyPlayerObject(), isPlayerMascotById(_local_4));
            sendMyPlayerData(getMyPlayerObject());
            _opcodeJournal.init(_local_4);
            _opcodeJournal.sendEventAction();
            _trackerAS2.startTracker();
            if (_localLoginServerData.autoLoginLocation != "redeem") {
                var _local_1 = getSortedWorldList();
                for (var _local_5 in _local_1) {
                    var _local_2 = _local_1[_local_5].population;
                    if ((_local_2 >= AUTO_LOGIN_POP_MIN) && (_local_2 <= AUTO_LOGIN_POP_MAX)) {
                        if (_local_1[_local_5].id != 1002) {
                            validAutoLoginWorlds.push(_local_1[_local_5]);
                        } else {
                            validAutoLoginWorlds.unshift(_local_1[_local_5]);
                        }
                    }
                }
                if (validAutoLoginWorlds.length == 0) {
                    validAutoLoginWorlds = _local_1.slice();
                }
                validAutoLoginWorlds.sortOn("population");
                tryNextValidWorldLogin();
            } else {
                _trackerAS2.sendToAS3StartAssetLoad("load.selectworld");
                LOGIN_HOLDER.viewManager.gotoWorldSelection();
                var _local_3 = {};
                _local_3.Username = _localLoginServerData.nau;
                _local_3.Password = "";
                _local_3.isRememberUsername = true;
                _local_3.isRememberPassword = false;
                com.clubpenguin.login.LocalData.setLoginPlayerObjectToSave(_local_3);
                com.clubpenguin.login.LocalData.saveNicknameToCookie(_local_3.Username);
                Keyboard.clearOnEnterFunction();
                gotoState(MERCH_STATE);
            }
        } else {
            doManualLogin();
        }
    }
    function doManualLogin() {
        goToState(LOGIN_STATE);
        _localLoginServerData.autoLogin = false;
        _manualLoginCallback();
    }
    function tryNextValidWorldLogin() {
        if (autoLoginWorldIndex >= validAutoLoginWorlds.length) {
            hideLoading();
            doManualLogin();
        } else {
            _selectedWorldID = validAutoLoginWorlds[autoLoginWorldIndex].id;
            autoLoginWorldIndex++;
            setWorldForConnection(_selectedWorldID);
        }
    }
    function startChatLog() {
        chat_log = new Array();
        updateListeners(UPDATE_CHAT_LOG, getChatLog());
    }
    function addToChatLog(obj) {
        var _local_1 = getChatLog();
        var _local_2 = _local_1.length;
        if (_local_2 > MAX_CHAT_LOG_ENTRIES) {
            delete _local_1[_local_2];
            _local_1.shift();
        }
        _local_1.push(obj);
        updateListeners(UPDATE_CHAT_LOG, getChatLog());
    }
    function isPlayerInChatLog(player_id) {
        var _local_2 = getChatLog();
        var _local_3 = _local_2.length;
        var _local_1 = 0;
        while (_local_1 < _local_3) {
            if (_local_2[_local_1].player_id == player_id) {
                return(true);
            }
            _local_1++;
        }
        return(false);
    }
    function getChatLog() {
        return(chat_log);
    }
    function setupPlay() {
        if (!play_state_init) {
            loadJoinDependencies();
        } else {
            ENGINE._visible = true;
            INTERFACE._visible = true;
        }
    }
    function hidePlay() {
    }
    function loadJoinDependencies() {
        var _local_4 = "logoLoadingScreen#";
        showLoading(_local_4);
        playDepLoader = new com.clubpenguin.shell.DependencyLoader(getClientPath(), dependencyHolder);
        playDepLoader.addEventListener(com.clubpenguin.shell.DependencyLoader.PROGRESS, onDependencyLoaderProgress, this);
        playDepLoader.addEventListener(com.clubpenguin.shell.DependencyLoader.COMPLETE, onJoinDependencyLoaderComplete, this);
        if ((_global.getCurrentParty().PARTY_ID != undefined) && (_global.getCurrentParty().PARTY_ID != "NONE")) {
            var _local_3 = 0;
            while (_local_3 < joinDependencies.length) {
                if (joinDependencies[_local_3].id == "interface") {
                    joinDependencies[_local_3].baseURL = _localLoginServerData.getContentPath();
                    joinDependencies[_local_3].folder = "global/content/";
                }
                _local_3++;
            }
        }
        playDepLoader.load(joinDependencies);
    }
    function onJoinDependencyLoaderComplete() {
        joinDependencyLoaderCompleteRouter();
        playDepLoader.removeEventListener(com.clubpenguin.shell.DependencyLoader.PROGRESS, onDependencyLoaderProgress, this);
        playDepLoader.removeEventListener(com.clubpenguin.shell.DependencyLoader.COMPLETE, onJoinDependencyLoaderComplete, this);
        delete playDepLoader;
    }
    function joinDependencyLoaderCompleteRouter() {
        if (com.clubpenguin.hybrid.AS3Manager.isUnderAS3()) {
            joinDependencyLoaderCompleteAS3();
        } else {
            joinDependencyLoaderComplete();
        }
    }
    function joinDependencyLoaderComplete() {
        POSTCARDS = this.dependencyHolder.book;
        MAIL = this.dependencyHolder.mail;
        GRIDVIEW = this.dependencyHolder.gridview;
        PARTY = this.dependencyHolder.party;
        ENGINE = this.dependencyHolder.engine;
        INTERFACE = this.dependencyHolder['interface'];
        ENGINE.setDependencies(this, INTERFACE, PARTY);
        ENGINE.init();
        INTERFACE.setDependencies(this, ENGINE, PARTY);
        INTERFACE.init();
        PARTY.SHELL = this;
        PARTY.ENGINE = ENGINE;
        PARTY.AIRTOWER = AIRTOWER;
        PARTY.init();
        updateListeners(START_INTERFACE, {mc:INTERFACE});
        updateListeners(START_ENGINE, {mc:ENGINE});
        connectToWorld();
        play_state_init = true;
    }
    function joinDependencyLoaderCompleteAS3() {
        POSTCARDS = this.dependencyHolder.book;
        MAIL = this.dependencyHolder.mail;
        GRIDVIEW = this.dependencyHolder.gridview;
        PARTY = this.dependencyHolder.party;
        ENGINE = this.dependencyHolder.engine;
        INTERFACE = this.dependencyHolder['interface'];
        ENGINE.setDependencies(this, INTERFACE, PARTY);
        ENGINE.init();
        if (this.dependencyHolder['interface'].interface_mc.READY != true) {
            var classInstance = this;
            _root.onEnterFrame = function () {
                if (classInstance.dependencyHolder['interface'].interface_mc.READY == true) {
                    classInstance.joinDependencyLoaderComplete();
                    delete _root.onEnterFrame;
                }
            };
            return(undefined);
        }
        INTERFACE.setDependencies(this, ENGINE, PARTY);
        INTERFACE.init();
        PARTY.SHELL = this;
        PARTY.ENGINE = ENGINE;
        PARTY.AIRTOWER = AIRTOWER;
        PARTY.init();
        updateListeners(START_INTERFACE, {mc:INTERFACE});
        updateListeners(START_ENGINE, {mc:ENGINE});
        connectToWorld();
        play_state_init = true;
    }
    function setupEdit() {
        $d("[edit state] -> Setup edit state");
    }
    function hideEdit() {
        $d("[edit state] -> hide edit state");
    }
    function showMerch() {
        loadMerchDependencies();
    }
    function loadMerchDependencies() {
        merchDepLoader = new com.clubpenguin.shell.DependencyLoader(getClientPath(), dependencyHolder);
        merchDepLoader.addEventListener(com.clubpenguin.shell.DependencyLoader.PROGRESS, onDependencyLoaderProgress, this);
        merchDepLoader.addEventListener(com.clubpenguin.shell.DependencyLoader.COMPLETE, onMerchDependencyLoaderComplete, this);
        merchDepLoader.load(merchDependencies);
    }
    function onMerchDependencyLoaderComplete() {
        merchDepLoader.removeEventListener(com.clubpenguin.shell.DependencyLoader.PROGRESS, onDependencyLoaderProgress, this);
        merchDepLoader.removeEventListener(com.clubpenguin.shell.DependencyLoader.COMPLETE, onMerchDependencyLoaderComplete, this);
        delete merchDepLoader;
        MERCH_HOLDER = this.dependencyHolder.app;
        var _local_2 = getClientPath() + "merch/";
        if (com.clubpenguin.hybrid.AS3Manager.isUnderAS3()) {
            __delayInterval = setInterval(delayClassInstantiation, INTERVAL_RATE);
        } else {
            MERCH_HOLDER.init(_local_2, this, AIRTOWER);
        }
    }
    function delayClassInstantiation() {
        var _local_1 = MERCH_HOLDER._parent._parent;
        var _local_2 = getClientPath() + "merch/";
        MERCH_HOLDER.init(_local_2, _local_1, AIRTOWER);
        clearInterval(__delayInterval);
    }
    function hideMerch() {
        MERCH_HOLDER._visible = false;
    }
    function setupMailState() {
        ENGINE._visible = false;
        INTERFACE._visible = false;
    }
    function hideMailState() {
        ENGINE._visible = true;
        INTERFACE._visible = true;
    }
    function onEnterHidden() {
    }
    function onExitHidden() {
    }
    function setScavengerHuntCrumbs(crumbObj) {
        scavengerHuntCrumbs = crumbObj;
    }
    function getScavengerHuntCrumbs() {
        return(scavengerHuntCrumbs);
    }
    function addCookie(type, key, value) {
        if (!isValidCookieType(type)) {
            $e("[shell] addCookie() -> Invalid cookie type! type: " + key);
            return(false);
        }
        if (!isValidString(key)) {
            $e("[shell] addCookie() -> Key is not a real string! key: " + key);
            return(false);
        }
        if ((value == undefined) || (value == null)) {
            $e("[shell] addCookie() -> Value is not defined! value: " + value);
            return(false);
        }
        var _local_4 = getCookieArray();
        var _local_3 = type + key;
        if (_local_4[_local_3] == undefined) {
            _local_4[_local_3] = duplicateObject(value);
        } else {
            var _local_1;
            for (_local_1 in value) {
                _local_4[_local_3][_local_1] = value[_local_1];
            }
        }
        return(true);
    }
    function getCookie(type, key) {
        if (!isValidCookieType(type)) {
            $e("[shell] getCookie() -> Invalid cookie type!. type: " + key);
            return(undefined);
        }
        if (!isValidString(key)) {
            $e("[shell] getCookie() -> Key is not a real string! key: " + key);
            return(undefined);
        }
        var _local_2 = getCookieArray();
        if (_local_2[type + key] == undefined) {
            $e("[shell] getCookie() -> Could not find a cookie with that key! key: " + key);
            return(undefined);
        }
        return(_local_2[type + key]);
    }
    function deleteCookie(type, key) {
        if (!isValidCookieType(type)) {
            $e("[shell] deleteCookie() -> Invalid cookie type!. type: " + key);
            return(undefined);
        }
        if (!isValidString(key)) {
            $e("[shell] deleteCookie() -> Key is not a real string! key: " + key);
            return(false);
        }
        var _local_2 = getCookieArray();
        if (_local_2[type + key] == undefined) {
            $e("[shell] deleteCookie() -> Tried to delete a cookie which did not exist! key: " + key);
            return(false);
        }
        _local_2[type + key] = undefined;
        delete _local_2[type + key];
        return(true);
    }
    function listCookies() {
        var _local_1;
        var _local_2 = getCookieArray();
        for (_local_1 in _local_2) {
        }
    }
    function isValidCookieType(type) {
        switch (type) {
            case GAME_COOKIE : 
                return(true);
            case MISSION_COOKIE : 
                return(true);
            case CLIENT_COOKIE : 
                return(true);
            case PARTY_COOKIE : 
                return(true);
        }
        return(false);
    }
    function getCookieArray() {
        if (client_cookies == undefined) {
            client_cookies = new Array();
        }
        return(client_cookies);
    }
    function setCookieArray(arr) {
        client_cookies = arr;
    }
    function donateToCharity(id, coin_amount) {
        if (isNaN(id)) {
            $d("[shell] donateToCharity() -> Id was not a real number! id: " + id);
            return(false);
        }
        if (isNaN(coin_amount)) {
            $d("[shell] donateToCharity() -> Coin amount was not a real number! coin_amount: " + coin_amount);
            return(false);
        }
        var _local_2 = getMyPlayerTotalCoins();
        if (_local_2 < coin_amount) {
            $d("[shell] donateToCharity() -> Coin amount was more than the player has to give! coin_amount: " + coin_amount);
            var _local_4 = INTERFACE.getLocalizedString("low_coin_warn");
            INTERFACE.showPrompt("warn", _local_4);
            return(false);
        }
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.SURVEY_HANDLER + "#") + AIRTOWER.DONATE, [id, coin_amount], "str", getCurrentServerRoomId());
        return(true);
    }
    function handleGetCoinsForChangeTotals(arr) {
        var _local_11 = Number(arr[0]);
        var _local_4 = String(arr[1]).split(",");
        coinsForChangeTotals = [];
        var _local_9 = 0;
        var _local_1;
        var _local_6;
        var _local_8;
        var _local_3 = 0;
        while (_local_3 < _local_4.length) {
            _local_1 = _local_4[_local_3].split("|");
            _local_9 = _local_9 + Number(_local_1[1]);
            _local_3++;
        }
        totalCoinsDonated = _local_9;
        var _local_2 = 0;
        while (_local_2 < _local_4.length) {
            _local_1 = _local_4[_local_2].split("|");
            _local_8 = ((totalCoinsDonated == 0) ? 0 : ((Number(_local_1[1]) / totalCoinsDonated) * 100));
            _local_6 = Math.round(_local_8);
            coinsForChangeTotals.push({id:_local_1[0], total:_local_1[1], percent:_local_6, nonRoundedPercent:_local_8});
            _local_2++;
        }
        coinsForChangeTotals.sortOn("id");
        updateListeners(COINS_FOR_CHANGE_TOTALS_UPDATED, {totalCoins:totalCoinsDonated, charityTotals:coinsForChangeTotals});
    }
    function handleCanPurchaseCookie(arr) {
        var _local_2 = Number(arr[0]);
        if (Number(arr[1]) == 0) {
            canBuyCookies = false;
        } else {
            canBuyCookies = true;
        }
        updateListeners(CAN_PURCHASE_COOKIES, canBuyCookies);
    }
    function handlePurchaseCookie(arr) {
        var _local_3 = Number(arr[0]);
        var _local_2 = Number(arr[1]);
        var _local_4 = Number(arr[2]);
        updateListeners(COOKIE_PURCHASED, {avatarID:_local_2, charityID:_local_4});
    }
    function sendBuyCookie(avatarID, charityID) {
    }
    function sendCheckIfCanBuyCookie() {
    }
    function sendCancelCookieReservation() {
    }
    function sendRequestForCookieInventory() {
    }
    function sendRequestForBakeryState() {
    }
    function sendSnowBallEnterHopper() {
    }
    function sendRequestCoinsForChangeTotals() {
    }
    function handleCookiesReady(arr) {
        var _local_2 = Number(arr[0]);
        cookiesAdded = Number(arr[1]);
        cookieTotal = Number(arr[2]);
        maxCookies = Number(arr[3]);
    }
    function handleGetCookieStock(arr) {
        var _local_2 = Number(arr[0]);
        cookieTotal = Number(arr[1]);
        maxCookies = Number(arr[2]);
    }
    function handleBakeryStateUpdate(arr) {
        var _local_2 = Number(arr[0]);
        var _local_3 = com.clubpenguin.util.JSONParser.parse(arr[1]);
    }
    function handleDonateToCharity(arr) {
        var _local_3 = Number(arr[0]);
        var _local_1 = Number(arr[1]);
        setMyPlayerTotalCoins(_local_1);
    }
    function track(name, data) {
        if (isValidString(name)) {
            var _local_2;
            if (data) {
                _local_2 = cinqetdemi.JSON.stringify(data);
            }
            if (isValidString(_local_2)) {
                _trackerAS2.sendTrackingEvent(name, _local_2);
                return(undefined);
            }
            _trackerAS2.sendTrackingEvent(name);
        }
    }
    function trackEvent(eventName, data) {
        track(eventName, data);
    }
    function trackContent(itemName, data) {
        track(itemName, data);
    }
    function trackRoomJoin(roomName, data) {
        track("room_" + roomName, data);
    }
    function trackIglooJoin(isOwn, roomId, playerId) {
        var _local_2 = "igloo=" + roomId;
        var _local_3 = "player_id=" + playerId;
        var _local_1 = new Object();
        _local_1.message = (_local_2 + "|") + _local_3;
        if (isOwn == true) {
            _trackerAS2.trackGameAction("view", "own_igloo", _local_1);
        } else {
            _trackerAS2.trackGameAction("view", "other_igloo", _local_1);
        }
    }
    function trackBackyardJoin(isOwn, playerId) {
        var _local_2 = "player_id=" + playerId;
        var _local_1 = new Object();
        _local_1.message = _local_2;
        if (isOwn == true) {
            _trackerAS2.trackGameAction("view", "own_backyard", _local_1);
        } else {
            _trackerAS2.trackGameAction("view", "other_backyard", _local_1);
        }
    }
    function trackMiniGame(gameName, data) {
        track(gameName, data);
    }
    function debugTrace(msg) {
        if (DEBUG_MODE) {
        }
    }
    function createTimeout(key, time, func, params, scope) {
        if (!isValidString(key)) {
            $d("[shell] createTimeout() -> Passed in key is not a valid string! key: " + key);
            return(false);
        }
        if (getTimeoutByKey(key) != undefined) {
            $d("[shell] createTimeout() -> Timeout object already exists! key: " + key);
            return(false);
        }
        if (isNaN(time) || (time <= 0)) {
            $d("[shell] createTimeout() -> Passed in time is not a valid number! time: " + time);
            return(false);
        }
        if (func == undefined) {
            $d("[shell] createTimeout() -> Passed in func is not a valid function! func: " + func);
            return(false);
        }
        var _local_1 = new com.clubpenguin.util.Timeout(time, func, params, scope);
        _local_1.onStop = handleOnTimeoutStop;
        _local_1.start();
        timeouts[key] = _local_1;
    }
    function handleOnTimeoutStop(timeout) {
        var _local_1;
        for (_local_1 in timeouts) {
            if (timeouts[_local_1] == timeout) {
                timeouts[_local_1] = undefined;
                return(delete timeouts[_local_1]);
            }
        }
        return(false);
    }
    function stopTimeoutByKey(key) {
        var _local_1 = getTimeoutByKey(key);
        if (_local_1 == undefined) {
            $d("[shell] stopTimeoutByKey() -> Timeout object is undefined! key: " + key);
            return(false);
        }
        _local_1.stop();
    }
    function getTimeoutByKey(key) {
        if (!isValidString(key)) {
            $d("[shell] getTimeoutByKey() -> Passed in key is not a valid string! key: " + key);
            return(undefined);
        }
        return(timeouts[key]);
    }
    function setupRootContextMenu() {
        _root.menu = new ContextMenu(loadBuildInfo);
        _root.menu.hideBuiltInItems();
    }
    function loadBuildInfo() {
        var _local_4 = new LoadVars();
        _local_4.onLoad = function (success) {
            if (success) {
                var _local_3 = new ContextMenuItem("c:" + String(this.buildID), function () {
                });
                _local_3.enabled = false;
                _root.menu.customItems.push(_local_3);
            }
        };
        _local_4.load(getClientPath() + "build.info");
    }
    function getSocketServerRevision() {
        AIRTOWER.addListener(AIRTOWER.GET_LAST_REVISION, this.handleSocketServerRevision, this);
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_HANDLER + "#") + AIRTOWER.GET_LAST_REVISION, [], "str", getCurrentServerRoomId());
    }
    function handleSocketServerRevision(result) {
        AIRTOWER.removeListener(AIRTOWER.GET_LAST_REVISION, this.handleSocketServerRevision, this);
        if (!isNaN(result[1])) {
            var _local_3 = new ContextMenuItem("s:" + String(result[1]), function () {
            });
            _local_3.enabled = false;
            _root.menu.customItems.push(_local_3);
        }
    }
    function attachShellListenersToAirtower() {
        AIRTOWER.addListener(AIRTOWER.HANDLE_ERROR, handleServerError);
        AIRTOWER.addListener(AIRTOWER.CONNECTION_LOST, handleConnectionLost);
        enableAirtower();
    }
    function quietAirtower() {
        AIRTOWER.removeListener(AIRTOWER.SEND_MESSAGE, handleSendMessage);
        AIRTOWER.removeListener(AIRTOWER.SEND_PHRASECHAT_MESSAGE, handleSendPhraseChatMessage);
        AIRTOWER.removeListener(AIRTOWER.SEND_BLOCKED_MESSAGE, handleBlockedMessage);
        AIRTOWER.removeListener(AIRTOWER.SEND_SAFE_MESSAGE, handleSafeMessage);
        AIRTOWER.removeListener(AIRTOWER.SEND_LINE_MESSAGE, handleLineMessage);
        AIRTOWER.removeListener(AIRTOWER.SEND_QUICK_MESSAGE, handleSendQuickMessage);
        AIRTOWER.removeListener(AIRTOWER.SEND_TOUR_GUIDE_MESSAGE, handleTourGuideMessage);
        AIRTOWER.removeListener(AIRTOWER.SEND_EMOTE, handleSendEmote);
        AIRTOWER.removeListener(AIRTOWER.SEND_JOKE, handleSendJoke);
        AIRTOWER.removeListener(AIRTOWER.SEND_MASCOT_MESSAGE, handleMascotMessage);
        AIRTOWER.removeListener(AIRTOWER.COIN_DIG_UPDATE, handleGetCoinReward);
        AIRTOWER.removeListener(AIRTOWER.GET_CURRENT_TOTAL_COIN, handleGetCoinTotal);
        AIRTOWER.removeListener(AIRTOWER.GET_CURRENCIES, handleGetCurrencies);
        AIRTOWER.removeListener(AIRTOWER.BATTLE_ROOM_COUNTDOWN_UPDATE, handleBattleRoomCoundown);
        AIRTOWER.removeListener(AIRTOWER.BATTLE_ROOM_STATUS_UPDATE, handleBattleRoomUpdate);
        AIRTOWER.removeListener(AIRTOWER.SCAVENGER_HUNT_NOTIFICATION, handleScavengerHuntNotification);
        AIRTOWER.removeListener(AIRTOWER.GET_SCAVENGER_HUNT_TICKETS, handleGetScavengerHuntTickets);
        AIRTOWER.removeListener(AIRTOWER.INC_SCAVENGER_HUNT_TICKETS, handleGetScavengerHuntTickets);
        AIRTOWER.removeListener(AIRTOWER.DEC_SCAVENGER_HUNT_TICKETS, handleGetScavengerHuntTickets);
        AIRTOWER.removeListener(AIRTOWER.BATTLE_ROOM_COUNTDOWN_UPDATE, handleBattleRoomCoundown);
        AIRTOWER.removeListener(AIRTOWER.BATTLE_ROOM_STATUS_UPDATE, handleBattleRoomUpdate);
        AIRTOWER.removeListener(AIRTOWER.BATTLE_ROOM_HIT_SNOWBALL, handleBattleRoomSnowballHit);
        AIRTOWER.removeListener(AIRTOWER.GET_INVENTORY_LIST, handleMyGetInventoryList);
        AIRTOWER.removeListener(AIRTOWER.GAME_OVER, handleGameOver);
        AIRTOWER.removeListener(AIRTOWER.GET_PLAYER_OBJECT, handleLoadPlayerObject);
        AIRTOWER.removeListener(AIRTOWER.GET_MASCOT_OBJECT, handleLoadMascotObject);
        AIRTOWER.removeListener(AIRTOWER.GET_FURNITURE_LIST, handleGetFurnitureListFromServer);
        AIRTOWER.removeListener(AIRTOWER.GET_IGLOO_DETAILS, handleGetPlayerIgloo);
        AIRTOWER.removeListener(AIRTOWER.GET_IGLOO_LIST, handleLoadPlayerIglooList);
        AIRTOWER.removeListener(AIRTOWER.PLAYER_IGLOO_OPEN, handleLoadIsPlayerIglooOpen);
        AIRTOWER.removeListener(AIRTOWER.GET_OWNED_IGLOOS, handleGetOwnedIgloos);
        AIRTOWER.removeListener(AIRTOWER.JUMP_TO_IGLOO, handleJumpToIgloo);
        AIRTOWER.removeListener(AIRTOWER.MODERATOR_ACTION, handleModeratorAction);
        AIRTOWER.removeListener(AIRTOWER.LOAD_PLAYER, handleLoadPlayer);
        AIRTOWER.removeListener(AIRTOWER.JOIN_ROOM, handleJoinRoom);
        AIRTOWER.removeListener(AIRTOWER.JOIN_GAME, handleJoinGame);
        AIRTOWER.removeListener(AIRTOWER.JOIN_NON_BLACK_HOLE_GAME, handleJoinGame);
        AIRTOWER.removeListener(AIRTOWER.REFRESH_ROOM, handleRefreshRoom);
        AIRTOWER.removeListener(AIRTOWER.ADD_PLAYER, handleAddPlayerToRoom);
        AIRTOWER.removeListener(AIRTOWER.REMOVE_PLAYER, handleRemovePlayerFromRoom);
        AIRTOWER.removeListener(AIRTOWER.PLAYER_MOVE, handleSendPlayerMove);
        AIRTOWER.removeListener(AIRTOWER.PLAYER_TELEPORT, handleSendPlayerTeleport);
        AIRTOWER.removeListener(AIRTOWER.UPDATE_PLAYER_COLOUR, handleSendUpdatePlayerColour);
        AIRTOWER.removeListener(AIRTOWER.UPDATE_PLAYER_HEAD, handleSendUpdatePlayerHead);
        AIRTOWER.removeListener(AIRTOWER.UPDATE_PLAYER_FACE, handleSendUpdatePlayerFace);
        AIRTOWER.removeListener(AIRTOWER.UPDATE_PLAYER_NECK, handleSendUpdatePlayerNeck);
        AIRTOWER.removeListener(AIRTOWER.UPDATE_PLAYER_BODY, handleSendUpdatePlayerBody);
        AIRTOWER.removeListener(AIRTOWER.UPDATE_PLAYER_HAND, handleSendUpdatePlayerHand);
        AIRTOWER.removeListener(AIRTOWER.UPDATE_PLAYER_FEET, handleSendUpdatePlayerFeet);
        AIRTOWER.removeListener(AIRTOWER.UPDATE_PLAYER_FLAG, handleSendUpdatePlayerFlag);
        AIRTOWER.removeListener(AIRTOWER.UPDATE_PLAYER_PHOTO, handleSendUpdatePlayerPhoto);
        AIRTOWER.removeListener(AIRTOWER.UPDATE_PLAYER_REMOVE, handleSendClearPaperdoll);
        AIRTOWER.removeListener(AIRTOWER.PLAYER_TRANSFORMATION, handleAvatarTransformation);
        AIRTOWER.removeListener(AIRTOWER.PLAYER_FRAME, handleSendPlayerFrame);
        AIRTOWER.removeListener(AIRTOWER.PLAYER_ACTION, handleUpdatePlayerAction);
        AIRTOWER.removeListener(AIRTOWER.OPEN_BOOK, handleOpenPlayerBook);
        AIRTOWER.removeListener(AIRTOWER.CLOSE_BOOK, handleClosePlayerBook);
        AIRTOWER.removeListener(AIRTOWER.THROW_BALL, handlePlayerThrowBall);
        AIRTOWER.removeListener(AIRTOWER.UPDATE_TABLE, handleUpdateTableById);
        AIRTOWER.removeListener(AIRTOWER.GET_TABLE_POPULATION, handleGetTablesPopulationById);
        AIRTOWER.removeListener(AIRTOWER.JOIN_TABLE, handleSendJoinTableById);
        AIRTOWER.removeListener(AIRTOWER.LEAVE_TABLE, handleLeaveTable);
        AIRTOWER.removeListener(AIRTOWER.UPDATE_WADDLE, handleUpdateWaddle);
        AIRTOWER.removeListener(AIRTOWER.GET_WADDLE_POPULATION, handleGetWaddlesPopulationById);
        AIRTOWER.removeListener(AIRTOWER.JOIN_WADDLE, handleSendJoinWaddleById);
        AIRTOWER.removeListener(AIRTOWER.LEAVE_WADDLE, handleLeaveWaddle);
        AIRTOWER.removeListener(AIRTOWER.START_WADDLE, startWaddle);
        AIRTOWER.removeListener(AIRTOWER.SEND_WADDLE, handleJoinWaddle);
        AIRTOWER.removeListener(AIRTOWER.CARD_JITSU_MATCH_SUCCESSFUL, handleSuccessfulMatchmaking);
        AIRTOWER.removeListener(AIRTOWER.MAIL_START_ENGINE, handleStartMailEngine);
        AIRTOWER.removeListener(AIRTOWER.GET_MAIL, handleGetMail);
        AIRTOWER.removeListener(AIRTOWER.RECEIVE_MAIL, handleRecieveMailItem);
        AIRTOWER.removeListener(AIRTOWER.SEND_MAIL, handleSendMailItem);
        AIRTOWER.removeListener(AIRTOWER.DELETE_MAIL_FROM_PLAYER, handleDeleteMailFromUser);
        AIRTOWER.removeListener(AIRTOWER.DONATE, handleDonateToCharity);
        AIRTOWER.removeListener(AIRTOWER.GET_CARDS, handleGetCards);
        AIRTOWER.removeListener(AIRTOWER.GET_NINJA_LEVEL, handleGetNinjaLevel);
        AIRTOWER.removeListener(AIRTOWER.GET_FIRE_LEVEL, handleGetFireLevel);
        AIRTOWER.removeListener(AIRTOWER.GET_WATER_LEVEL, handleGetWaterLevel);
        AIRTOWER.removeListener(AIRTOWER.GET_SNOW_LEVEL, handleGetSnowLevel);
        AIRTOWER.removeListener(AIRTOWER.GET_NINJA_RANKS, handleGetNinjaRanks);
        AIRTOWER.removeListener(AIRTOWER.UPDATE_EGG_TIMER, handleUpdateEggTimer);
        AIRTOWER.removeListener(AIRTOWER.GET_COINS_FOR_CHANGE_TOTALS, handleGetCoinsForChangeTotals);
        AIRTOWER.removeListener(AIRTOWER.CAN_PURCHASE_COOKIE, handleCanPurchaseCookie);
        AIRTOWER.removeListener(AIRTOWER.PURCHASE_COOKIE, handlePurchaseCookie);
        AIRTOWER.removeListener(AIRTOWER.COOKIES_READY, handleCookiesReady);
        AIRTOWER.removeListener(AIRTOWER.GET_COOKIE_STOCK, handleGetCookieStock);
        AIRTOWER.removeListener(AIRTOWER.GET_BAKERY_ROOM_STATE, handleBakeryStateUpdate);
        AIRTOWER.removeListener(AIRTOWER.GET_PARTY_COOKIE, handlePartyCookieUpdate);
        AIRTOWER.removeListener(AIRTOWER.GET_AB_TEST_DATA, handleGetABTestData);
    }
    function enableAirtower() {
        AIRTOWER.addListener(AIRTOWER.SEND_MESSAGE, handleSendMessage);
        AIRTOWER.addListener(AIRTOWER.SEND_PHRASECHAT_MESSAGE, handleSendPhraseChatMessage);
        AIRTOWER.addListener(AIRTOWER.SEND_BLOCKED_MESSAGE, handleBlockedMessage);
        AIRTOWER.addListener(AIRTOWER.SEND_SAFE_MESSAGE, handleSafeMessage);
        AIRTOWER.addListener(AIRTOWER.SEND_LINE_MESSAGE, handleLineMessage);
        AIRTOWER.addListener(AIRTOWER.SEND_QUICK_MESSAGE, handleSendQuickMessage);
        AIRTOWER.addListener(AIRTOWER.SEND_TOUR_GUIDE_MESSAGE, handleTourGuideMessage);
        AIRTOWER.addListener(AIRTOWER.SEND_EMOTE, handleSendEmote);
        AIRTOWER.addListener(AIRTOWER.SEND_JOKE, handleSendJoke);
        AIRTOWER.addListener(AIRTOWER.SEND_MASCOT_MESSAGE, handleMascotMessage);
        AIRTOWER.addListener(AIRTOWER.COIN_DIG_UPDATE, handleGetCoinReward);
        AIRTOWER.addListener(AIRTOWER.GET_CURRENT_TOTAL_COIN, handleGetCoinTotal);
        AIRTOWER.addListener(AIRTOWER.GET_CURRENCIES, handleGetCurrencies);
        AIRTOWER.addListener(AIRTOWER.BATTLE_ROOM_COUNTDOWN_UPDATE, handleBattleRoomCoundown);
        AIRTOWER.addListener(AIRTOWER.BATTLE_ROOM_STATUS_UPDATE, handleBattleRoomUpdate);
        AIRTOWER.addListener(AIRTOWER.BATTLE_ROOM_HIT_SNOWBALL, handleBattleRoomSnowballHit);
        AIRTOWER.addListener(AIRTOWER.GET_INVENTORY_LIST, handleMyGetInventoryList);
        AIRTOWER.addListener(AIRTOWER.FIND_BUDDY, handleGetPlayerLocationById);
		AIRTOWER.addListener(AIRTOWER.JUMP_BUDDY, handleGetPlayerLocationByIdJump);
        AIRTOWER.addListener(AIRTOWER.GAME_OVER, handleGameOver);
        AIRTOWER.addListener(AIRTOWER.BUY_INVENTORY, handleBuyInventory);
        AIRTOWER.addListener(AIRTOWER.BUY_POWER_CARDS, handleBuyCards);
        AIRTOWER.addListener(AIRTOWER.CHECK_INVENTORY, handleCheckInventory);
        AIRTOWER.addListener(AIRTOWER.ADD_PUFFLE_CARE_ITEM, handleSendBuyPuffleCareItem);
        AIRTOWER.addListener(AIRTOWER.GET_PLAYER_OBJECT, handleLoadPlayerObject);
        AIRTOWER.addListener(AIRTOWER.GET_MASCOT_OBJECT, handleLoadMascotObject);
        AIRTOWER.addListener(AIRTOWER.GET_FURNITURE_LIST, handleGetFurnitureListFromServer);
        AIRTOWER.addListener(AIRTOWER.GET_IGLOO_LIST, handleLoadPlayerIglooList);
        AIRTOWER.addListener(AIRTOWER.PLAYER_IGLOO_OPEN, handleLoadIsPlayerIglooOpen);
        AIRTOWER.addListener(AIRTOWER.GET_OWNED_IGLOOS, handleGetOwnedIgloos);
        AIRTOWER.addListener(AIRTOWER.JUMP_TO_IGLOO, handleJumpToIgloo);
        AIRTOWER.addListener(AIRTOWER.BUY_FURNITURE, handleSendBuyFurniture);
        AIRTOWER.addListener(AIRTOWER.BUY_MULTIPLE_FURNITURE, handleSendBuyMultipleFurniture);
        AIRTOWER.addListener(AIRTOWER.UPDATE_FLOOR, handleSendBuyIglooFloor);
        AIRTOWER.addListener(AIRTOWER.UPDATE_IGLOO_TYPE, handleSendBuyIglooType);
        AIRTOWER.addListener(AIRTOWER.BUY_IGLOO_LOCATION, handleSendBuyIglooLocation);
        AIRTOWER.addListener(AIRTOWER.MODERATOR_ACTION, handleModeratorAction);
        AIRTOWER.addListener(AIRTOWER.LOAD_PLAYER, handleLoadPlayer);
        AIRTOWER.addListener(AIRTOWER.JOIN_ROOM, handleJoinRoom);
        AIRTOWER.addListener(AIRTOWER.JOIN_GAME, handleJoinGame);
        AIRTOWER.addListener(AIRTOWER.JOIN_NON_BLACK_HOLE_GAME, handleJoinGame);
        AIRTOWER.addListener(AIRTOWER.REFRESH_ROOM, handleRefreshRoom);
        AIRTOWER.addListener(AIRTOWER.ADD_PLAYER, handleAddPlayerToRoom);
        AIRTOWER.addListener(AIRTOWER.REMOVE_PLAYER, handleRemovePlayerFromRoom);
        AIRTOWER.addListener(AIRTOWER.PLAYER_MOVE, handleSendPlayerMove);
        AIRTOWER.addListener(AIRTOWER.PLAYER_TELEPORT, handleSendPlayerTeleport);
        AIRTOWER.addListener(AIRTOWER.UPDATE_PLAYER_COLOUR, handleSendUpdatePlayerColour);
        AIRTOWER.addListener(AIRTOWER.UPDATE_PLAYER_HEAD, handleSendUpdatePlayerHead);
        AIRTOWER.addListener(AIRTOWER.UPDATE_PLAYER_FACE, handleSendUpdatePlayerFace);
        AIRTOWER.addListener(AIRTOWER.UPDATE_PLAYER_NECK, handleSendUpdatePlayerNeck);
        AIRTOWER.addListener(AIRTOWER.UPDATE_PLAYER_BODY, handleSendUpdatePlayerBody);
        AIRTOWER.addListener(AIRTOWER.UPDATE_PLAYER_HAND, handleSendUpdatePlayerHand);
        AIRTOWER.addListener(AIRTOWER.UPDATE_PLAYER_FEET, handleSendUpdatePlayerFeet);
        AIRTOWER.addListener(AIRTOWER.UPDATE_PLAYER_FLAG, handleSendUpdatePlayerFlag);
        AIRTOWER.addListener(AIRTOWER.UPDATE_PLAYER_PHOTO, handleSendUpdatePlayerPhoto);
        AIRTOWER.addListener(AIRTOWER.UPDATE_PLAYER_REMOVE, handleSendClearPaperdoll);
        AIRTOWER.addListener(AIRTOWER.PLAYER_TRANSFORMATION, handleAvatarTransformation);
        AIRTOWER.addListener(AIRTOWER.PLAYER_FRAME, handleSendPlayerFrame);
        AIRTOWER.addListener(AIRTOWER.PLAYER_ACTION, handleUpdatePlayerAction);
        AIRTOWER.addListener(AIRTOWER.OPEN_BOOK, handleOpenPlayerBook);
        AIRTOWER.addListener(AIRTOWER.CLOSE_BOOK, handleClosePlayerBook);
        AIRTOWER.addListener(AIRTOWER.THROW_BALL, handlePlayerThrowBall);
        AIRTOWER.addListener(AIRTOWER.UPDATE_TABLE, handleUpdateTableById);
        AIRTOWER.addListener(AIRTOWER.GET_TABLE_POPULATION, handleGetTablesPopulationById);
        AIRTOWER.addListener(AIRTOWER.JOIN_TABLE, handleSendJoinTableById);
        AIRTOWER.addListener(AIRTOWER.LEAVE_TABLE, handleLeaveTable);
        AIRTOWER.addListener(AIRTOWER.UPDATE_WADDLE, handleUpdateWaddle);
        AIRTOWER.addListener(AIRTOWER.GET_WADDLE_POPULATION, handleGetWaddlesPopulationById);
        AIRTOWER.addListener(AIRTOWER.JOIN_WADDLE, handleSendJoinWaddleById);
        AIRTOWER.addListener(AIRTOWER.LEAVE_WADDLE, handleLeaveWaddle);
        AIRTOWER.addListener(AIRTOWER.START_WADDLE, startWaddle);
        AIRTOWER.addListener(AIRTOWER.SEND_WADDLE, handleJoinWaddle);
        AIRTOWER.addListener(AIRTOWER.CARD_JITSU_MATCH_SUCCESSFUL, handleSuccessfulMatchmaking);
        AIRTOWER.addListener(AIRTOWER.MAIL_START_ENGINE, handleStartMailEngine);
        AIRTOWER.addListener(AIRTOWER.GET_MAIL, handleGetMail);
        AIRTOWER.addListener(AIRTOWER.RECEIVE_MAIL, handleRecieveMailItem);
        AIRTOWER.addListener(AIRTOWER.SEND_MAIL, handleSendMailItem);
        AIRTOWER.addListener(AIRTOWER.DELETE_MAIL_FROM_PLAYER, handleDeleteMailFromUser);
        AIRTOWER.addListener(AIRTOWER.DONATE, handleDonateToCharity);
        AIRTOWER.addListener(AIRTOWER.SCAVENGER_HUNT_NOTIFICATION, handleScavengerHuntNotification);
        AIRTOWER.addListener(AIRTOWER.GET_SCAVENGER_HUNT_TICKETS, handleGetScavengerHuntTickets);
        AIRTOWER.addListener(AIRTOWER.INC_SCAVENGER_HUNT_TICKETS, handleGetScavengerHuntTickets);
        AIRTOWER.addListener(AIRTOWER.DEC_SCAVENGER_HUNT_TICKETS, handleGetScavengerHuntTickets);
        AIRTOWER.addListener(AIRTOWER.GET_CARDS, handleGetCards);
        AIRTOWER.addListener(AIRTOWER.GET_NINJA_LEVEL, handleGetNinjaLevel);
        AIRTOWER.addListener(AIRTOWER.GET_FIRE_LEVEL, handleGetFireLevel);
        AIRTOWER.addListener(AIRTOWER.GET_WATER_LEVEL, handleGetWaterLevel);
        AIRTOWER.addListener(AIRTOWER.GET_SNOW_LEVEL, handleGetSnowLevel);
        AIRTOWER.addListener(AIRTOWER.GET_NINJA_RANKS, handleGetNinjaRanks);
        AIRTOWER.addListener(AIRTOWER.UPDATE_EGG_TIMER, handleUpdateEggTimer);
        AIRTOWER.addListener(AIRTOWER.GET_COINS_FOR_CHANGE_TOTALS, handleGetCoinsForChangeTotals);
        AIRTOWER.addListener(AIRTOWER.CAN_PURCHASE_COOKIE, handleCanPurchaseCookie);
        AIRTOWER.addListener(AIRTOWER.PURCHASE_COOKIE, handlePurchaseCookie);
        AIRTOWER.addListener(AIRTOWER.GET_COOKIE_STOCK, handleGetCookieStock);
        AIRTOWER.addListener(AIRTOWER.COOKIES_READY, handleCookiesReady);
        AIRTOWER.addListener(AIRTOWER.GET_BAKERY_ROOM_STATE, handleBakeryStateUpdate);
        AIRTOWER.addListener(AIRTOWER.GET_PARTY_COOKIE, handlePartyCookieUpdate);
        AIRTOWER.addListener(AIRTOWER.GET_AB_TEST_DATA, handleGetABTestData);
    }
    function loadBootDependencies() {
        bootDepLoader = new com.clubpenguin.shell.DependencyLoader(getClientPath(), dependencyHolder);
        bootDepLoader.addEventListener(com.clubpenguin.shell.DependencyLoader.PROGRESS, onDependencyLoaderProgress, this);
        bootDepLoader.addEventListener(com.clubpenguin.shell.DependencyLoader.COMPLETE, onBootDependencyLoaderComplete, this);
        var _local_2 = 0;
        while (_local_2 < bootDependencies.length) {
            if (bootDependencies[_local_2].id == "party") {
                bootDependencies[_local_2].baseURL = _localLoginServerData.getContentPath();
                bootDependencies[_local_2].folder = "global/content/";
            }
            _local_2++;
        }
        bootDepLoader.load(bootDependencies);
    }
    function onBootDependencyLoaderComplete(event) {
        bootDepLoader.removeEventListener(com.clubpenguin.shell.DependencyLoader.PROGRESS, onDependencyLoaderProgress, this);
        bootDepLoader.removeEventListener(com.clubpenguin.shell.DependencyLoader.COMPLETE, onBootDependencyLoaderComplete, this);
        delete bootDepLoader;
        AIRTOWER = com.clubpenguin.net.Airtower(new com.clubpenguin.net.ProxyAirtower());
        AIRTOWER.debugName = "Proxy";
        var _local_2 = new com.clubpenguin.net.Airtower(this);
        _local_2.debugName = "Login";
        _local_2.init();
        com.clubpenguin.net.ProxyAirtower(AIRTOWER).setAirtower(_local_2);
        SENTRY = this.dependencyHolder.sentry;
        MUSIC = new com.clubpenguin.shell.Music(dependencyHolder.createEmptyMovieClip("music", dependencyHolder.getNextHighestDepth()));
        heartbeat = new com.clubpenguin.util.Heartbeat(SHELL, AIRTOWER);
        puffleManager = new com.clubpenguin.shell.PuffleManager(this, AIRTOWER, getPuffleCrumbs(), puffleModelManager);
        puffleManager.init();
        MAX_PUFFLES = com.clubpenguin.shell.PuffleManager.MAX_PUFFLES;
        attachShellListenersToAirtower();
        setupServices();
        initQuests();
        trialController.init(SHELL, AIRTOWER);
        trialController.setupTrials();
        hideLoading();
        sendAs2Initialized();
    }
    function onCreateDependencyLoaderComplete() {
        LOGIN_HOLDER.removeMovieClip();
        createDepLoader.removeEventListener(com.clubpenguin.shell.DependencyLoader.PROGRESS, onDependencyLoaderProgress, this);
        createDepLoader.removeEventListener(com.clubpenguin.shell.DependencyLoader.COMPLETE, onCreateDependencyLoaderComplete, this);
        delete createDepLoader;
        hideLoading();
        var _local_3 = dependencyHolder.create;
        var _local_2 = _local_3.mainView;
        _local_2.setDependencies(this, this.getLanguageAbbreviation(), this.getAffiliateID(), this.getPromotionID());
        _local_2.init();
    }
    function onDependencyLoaderProgress(event) {
        loadingScreenLoadProgress(event.bytesLoaded, event.bytesTotal);
    }
    function setBootData(data) {
        setAS3WebToggle(data.isAS3WebServicesOn);
        setAffilateId(data.affiliateID);
        setPromotionID(data.promotionID);
        setLanguageAbbreviation(data.language);
        setLocalizedFolder(data.language);
        setBootPaths(data);
        setDevWebDomain(data.devWebDomain);
        setServerData(data);
        var _local_2 = new com.clubpenguin.util.JSONLoader();
        _local_2.addEventListener(com.clubpenguin.util.JSONLoader.COMPLETE, onJsonCompleteHandler);
        var _local_3 = ((_localLoginServerData.getConfigCacheVersion() == "") ? "" : (_localLoginServerData.getClientCacheVersion()));
        _local_2.load((getBaseConfigPath() + DEPENDENCIES_FILENAME) + _local_3);
        isLoginFloodControlActive = data.isLoginFloodControlActive;
    }
    function onJsonCompleteHandler(event) {
        bootDependencies = event.target.data.boot;
        loginDependencies = event.target.data.login;
        merchDependencies = event.target.data.merch;
        joinDependencies = event.target.data.join;
        gotoState(SETUP_STATE);
    }
    function setCommunicationBridge(_swfBridge) {
        swfBridge = _swfBridge;
    }
    function sendOpenAS3Module(name, data, moduleArgs) {
        moduleArgs = ((moduleArgs != undefined) ? (moduleArgs) : ({}));
        moduleArgs.modalBackgroundEnabled = ((moduleArgs.modalBackgroundEnabled != undefined) ? (moduleArgs.modalBackgroundEnabled) : true);
        moduleArgs.hideLoadingDialog = ((moduleArgs.hideLoadingDialog != undefined) ? (moduleArgs.hideLoadingDialog) : false);
        moduleArgs.blockPuffleNotifications = ((moduleArgs.blockPuffleNotifications != undefined) ? (moduleArgs.blockPuffleNotifications) : false);
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_OPEN_MODULE, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), name:name, data:data, moduleArgs:moduleArgs, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendCloseDialog() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_CLOSE_DIALOG, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendMyPlayerData(myGenericPlayerObject) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_UPDATE_PLAYER_VO, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), myGenericPlayerObject:myGenericPlayerObject, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendAs2Initialized() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_AS2_INITIALIZED, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), localizedLangFrame:getLocalizedFrame(), environment:getEnvironment(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendSetSwfAddress(deepLink) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_SET_SWF_ADDRESS, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), deepLink:deepLink, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendNewBuddy(buddy_obj) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_ADD_BUDDY, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), buddy_obj:buddy_obj, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendAirtowerEvent(event) {
        sendStringInChunks(event, MSG_AIRTOWER_EVENT);
    }
    function sendGetBuyPuffleCareItemInfo(itemID) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_GET_BUY_PUFFLE_CARE_ITEM_INFO, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), itemID:itemID, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendGetDoesPlayerOwnPuffleItem(itemId, itemCategory) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_GET_DOES_PLAYER_OWN_PUFFLE_ITEM, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), itemId:itemId, itemCategory:itemCategory, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendAddPuffleCareItem(itemID, quantity, addToExistingQuantity) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_ADD_PUFFLE_CARE_ITEM, itemID:itemID, quantity:quantity, addToExistingQuantity:addToExistingQuantity});
    }
    function sendAddPuffleCarePoints(puffleID, food, play, rest, clean) {
        if (puffleID == null) {
            return(undefined);
        }
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_ADD_PUFFLE_CARE_POINTS, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), puffleID:puffleID, food:food, play:play, rest:rest, clean:clean, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendShowError(errorObject, errorCode) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_SHOW_ERROR_FROM_AS2, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), errorType:errorObject.type, errorCode:errorCode, errorMessageTextArgsArray:errorObject.errorMessageTextArgsArray, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendStringInChunks(str, messageType) {
        str = str + END_OF_CHUNKING_DELIMITER;
        var _local_6 = Math.ceil(str.length / MAX_LOCAL_CONNECTION_SEND_BYTES);
        if (_local_6 <= 1) {
            swfBridge.send(AS3_GATEWAY_METHOD, {type:messageType, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), str:str, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
        } else {
            var _local_1 = 0;
            while (_local_1 < _local_6) {
                swfBridge.send(AS3_GATEWAY_METHOD, {type:messageType, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), str:str.substr(MAX_LOCAL_CONNECTION_SEND_BYTES * _local_1, MAX_LOCAL_CONNECTION_SEND_BYTES), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
                _local_1++;
            }
        }
    }
    function sendTrackingEvent(trackingKey, paramsJSONString) {
        if (!isValidString(paramsJSONString)) {
            paramsJSONString = "params";
        }
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_SEND_TRACKING_DATA, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), trackingKey:trackingKey, paramsJSONString:paramsJSONString, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function showAs3Content(filePath, fileKey, data) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_SHOW_CONTENT, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), filePath:filePath, fileKey:fileKey, data:data, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function showAs3ContentFAQ(filePath, fileKey, data) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_SHOW_CONTENT_FAQ, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), filePath:filePath, fileKey:fileKey, data:data, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendMapAction(categoryID, mapID, triggerID, makeTriggersVisible) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_MAP_ACTION, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), categoryID:categoryID, mapID:mapID, triggerID:triggerID, makeTriggersVisible:makeTriggersVisible, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function clearTriggers() {
        sendMapAction(0, 0, 0, false);
    }
    function sendMapCategorySelected(category) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_MAP_CATEGORY_SELECTED, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), category:category, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendTrigger(triggerName) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_SEND_TRIGGER, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), triggerName:triggerName, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendHideTriggers() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_HIDE_TRIGGERS, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendShowTriggers() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_SHOW_TRIGGERS, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendHideLikeWindow() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_HIDE_LIKE_WINDOW, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendShowLikeWindow() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_SHOW_LIKE_WINDOW, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendCloseLikeWindow() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_CLOSE_LIKE_WINDOW, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendAS3JoinRoom(room_id, player_count) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_JOINED_ROOM, room_id:room_id, player_count:player_count, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendAS3LeavingRoom() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_LEAVING_ROOM, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendAS2Clicked(clickName) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_CLICKED_IN_AS2, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), clickName:clickName, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendNavigateToBuyMembership(tag) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_NAVIGATE_TO_BUY_MEMBERSHIP, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), tag:tag, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendShowStamp(stampObject) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_SHOW_STAMP_EARNED, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), stampObject:stampObject, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendAS3StartNotificationServices() {
        if (!_as3NotificationServiceStopped) {
            return(undefined);
        }
        _as3NotificationServiceStopped = false;
        getPuffleTreasureHuntService().startTreasureHunting();
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_START_NOTIFICATION_SERVICES, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendAS3StopNotificationServices() {
        if (_as3NotificationServiceStopped) {
            return(undefined);
        }
        _as3NotificationServiceStopped = true;
        getPuffleTreasureHuntService().stopTreasureHunting();
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_STOP_NOTIFICATION_SERVICES, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendAS3ShowPrompt(style, message, file, cards) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_SHOW_PROMPT, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), style:style, message:message, file:file, cards:cards, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendAS3ClosePrompt() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_CLOSE_PROMPT, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendAS3ShowComplexPrompt(style, data) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_SHOW_COMPLEX_PROMPT, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), style:style, data:data, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendAS3ShowAssetPrompt(data) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_SHOW_ASSET_PROMPT, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), data:data, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendAS3ShowPuffleTricksHUD() {
        updateListeners(DISABLE_PUFFLE_TREASURE_HUNTING, getMyPlayerId());
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_SHOW_PUFFLE_TRICKS_HUD, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendAS3EnablePuffleTricksHUD() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_ENABLE_PUFFLE_TRICKS_HUD, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendAS3DisablePuffleTricksHUD() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_DISABLE_PUFFLE_TRICKS_HUD, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendAS3ShowPuffleTreasureNotification(data) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_SHOW_PUFFLE_TREASURE_NOTIFICATION, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), data:data, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendAS3LoadPuffleTreasureInfographic() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_LOAD_PUFFLE_TREASURE_INFOGRAPHIC, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendAS3WorldDataById(worldId) {
        var _local_1 = getWorldCrumbs()[worldId];
        _local_1.id = worldId;
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_RECEIVE_WORLD_DATA_BY_ID, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), worldData:_local_1, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendAS3CurrentWorld(worldData) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_SET_CURRENT_WORLD, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), worldData:worldData, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendIdlePlayerTimeout() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_IDLE_PLAYER_TIMEOUT, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendRoomLoaded(room_id) {
        var _local_2 = 324;
        var _local_1 = 325;
        if ((room_id == _local_2) || (room_id == _local_1)) {
            swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_STOP_NOTIFICATION_SERVICES});
        }
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_ROOM_LOADED, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), room_id:room_id, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendShowPoster(posterPath) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_SHOW_POSTER, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), posterPath:posterPath, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendGetPlayerStatus() {
        var _local_1 = getPlayerList().length;
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_GET_PLAYER_STATUS, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), currentRoom:getCurrentRoomId(), playerCount:_local_1, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendLoginStartedLog() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_START_ASSET_LOAD, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), reference:"load.selectworld", msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function startTracker() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_START_TRACKER, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp()});
    }
    function sendWorldSelectedStartLog(context, world_id) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_START_ASSET_LOAD, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), reference:context, world_id:world_id, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendToAS3StartAssetLoad(_message) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_START_ASSET_LOAD, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), reference:_message, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendToAS3MouseRelease() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_AS2_MOUSE_RELEASED, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendInteraction(_swid, _interactionType) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_ADD_INTERACTION, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), swid:_swid, points:getInteractionPoints(_interactionType), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendClearCardsCache() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_CLEAR_CARDS_CACHE});
    }
    function showLoadingScreen(loadingText) {
        loadingText = ((loadingText == undefined) ? "" : (loadingText));
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_SHOW_LOADING_SCREEN, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), loadingText:loadingText, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function hideLoadingScreen() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_HIDE_LOADING_SCREEN, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function updateLoadingScreen(progress) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_UPDATE_LOADING_SCREEN, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), progress:progress, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendDataToAS3(payloadType, payload) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_AS2_DATA_PAYLOAD, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), payloadType:payloadType, payload:payload, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendQuestSettingsToAS3(payload) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_QUEST_SETTINGS, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), payload:payload, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
        isQuestingPlayer = true;
    }
    function sendQuestStatusToAS3(payload) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_QUEST_STATUS, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), payload:payload, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendHideQuestUI() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_HIDE_QUEST_UI, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendShowQuestUI() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_SHOW_QUEST_UI, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendMapLegendAnimationComplete() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_MAP_LEGEND_ANIM_COMPLETE, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendShowMusicPlayerWidget() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_SHOW_MUSIC_PLAYER_WIDGET, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendHideMusicPlayerWidget() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_HIDE_MUSIC_PLAYER_WIDGET, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendGetPlayerIgnoreList(payload) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_GET_LOCAL_PLAYER_IGNORE_LIST, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), payload:payload, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function startSoundStudio() {
        var _local_3 = new Object();
        _local_3.prevRoom = getRoomNameById(getLastRoomId());
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_START_SOUND_STUDIO, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), payload:_local_3, msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendMuteMusicPlayer() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_MUTE_MUSIC_PLAYER, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendUnmuteMusicPlayer() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_UNMUTE_MUSIC_PLAYER, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendStartIglooStudioMusic(payload) {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_START_IGLOO_STUDIO_MUSIC, payload:payload, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function sendStopIglooStudioMusic() {
        swfBridge.send(AS3_GATEWAY_METHOD, {type:MSG_STOP_IGLOO_STUDIO_MUSIC, timestamp:com.clubpenguin.util.BridgeStats.getTimestamp(), msgId:com.clubpenguin.util.BridgeStats.sendCount++});
    }
    function hasOpenedMap() {
        return(SHELL.getMyPlayerSavedMapCategory() != -1);
    }
    function isInSoloRoom() {
        return(getCurrentRoomId() == 112);
    }
    function hasStartedSession() {
        return(_currentTrackingVO != null);
    }
    function startTrackingTime() {
        _startTime = getTimer();
    }
    function stopTrackingTime() {
        var _local_1 = getTimer() - _startTime;
        _currentTrackingVO.mapOpenDuration = _currentTrackingVO.mapOpenDuration + _local_1;
    }
    function startTrackingMap() {
        _currentTrackingVO = new com.clubpenguin.map.vo.MapBITrackingVO();
        startTrackingTime();
    }
    function trackCategorySelection(catid) {
        if (_currentTrackingVO) {
            _currentTrackingVO.trackCategorySelection(catid);
        }
    }
    function stopTrackingMap(categoryID, mapLabel, roomID, shouldIgnoreNextTrackingCall) {
        if (_currentTrackingVO) {
            stopTrackingTime();
            _currentTrackingVO.categoryID = categoryID;
            _currentTrackingVO.mapLabel = mapLabel;
            _currentTrackingVO.closeTime = getTimer();
            _currentTrackingVO.roomID = roomID;
            _currentTrackingVO.shouldIgnoreNextTrackingCall = shouldIgnoreNextTrackingCall;
        }
    }
    function sendMapTracking(trackingName) {
        if (_currentTrackingVO && (trackingName != "igloo_map")) {
            if (_currentTrackingVO.shouldIgnoreNextTrackingCall) {
                _currentTrackingVO.shouldIgnoreNextTrackingCall = false;
                return(undefined);
            }
            if (isInSoloRoom() && (trackingName != "map")) {
                return(undefined);
            }
            var _local_1 = 1;
            var _local_3 = mapTriggers.getTriggerByTriggerName(trackingName);
            if (!_local_3) {
                _local_1 = 0;
            }
            if (_local_3.label != _currentTrackingVO.mapLabel) {
                _local_1 = 0;
            }
            if (((_currentTrackingVO.categoryID == 0) || (_currentTrackingVO.categoryID == 4)) && (_currentTrackingVO.mapLabel != "")) {
                _local_1 = 1;
            }
            var _local_2 = ((((((((((((((((("player_id:" + getMyPlayerId()) + "|") + "map_duration:") + _currentTrackingVO.mapOpenDuration) + "|") + _currentTrackingVO.getCategoryCountString()) + "|") + "exit_cat_label:") + _currentTrackingVO.categoryLabel) + "|") + "exit_content_label:") + _currentTrackingVO.mapLabel) + "|") + "exit_room_id:") + _currentTrackingVO.roomID) + "|") + "success_content:") + _local_1;
            var _local_4;
            if (soloRoomTrackingString != "") {
                _local_2 = _local_2 + (soloRoomTrackingString + "|");
                soloRoomTrackingString = "";
                _local_4 = "#binx";
            } else {
                _local_2 = _local_2 + "|";
                _local_4 = "#bimp";
            }
            AIRTOWER.send(AIRTOWER.PLAY_EXT, AIRTOWER.NEW_USER_EXPERIENCE_HANDLER + _local_4, [_local_2], "str", getCurrentServerRoomId());
            _currentTrackingVO = null;
        }
    }
    function sendSetSavedMapCategory(categoryId) {
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.NEW_USER_EXPERIENCE_HANDLER + "#") + AIRTOWER.SET_SAVED_MAP_CATEGORY, [categoryId], "str", getCurrentServerRoomId());
    }
    function sendSetPlayerCardOpen() {
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.NEW_USER_EXPERIENCE_HANDLER + "#") + AIRTOWER.SET_PLAYER_CARD_OPENED, [], "str", getCurrentServerRoomId());
    }
    function setMapTriggersData(data) {
        mapTriggers = new com.clubpenguin.map.vo.MapCategoriesVO();
        mapTriggers.initFromObject(data);
    }
    function getMapTriggers() {
        return(mapTriggers);
    }
    function onNewPlayerEvent(eventName) {
        switch (eventName) {
            case "guideStarting" : 
                INTERFACE.hideInterfaceForSoloRoom();
                SHELL.quietAirtower();
                isNewPlayerExperienceRunning = true;
                break;
            case "showToolBar" : 
                INTERFACE.showDock();
                break;
            case "showMap" : 
                INTERFACE.showMapIcon();
                break;
            case "guideComplete" : 
                SHELL.enableAirtower();
                INTERFACE.unhideInterfaceForSoloRoom();
                isNewPlayerExperienceRunning = false;
                SHELL.updateListeners(SHELL.NEW_PLAYER_EXPERIENCE_COMPLETE);
                break;
        }
    }
    function resetTriggerHideCount() {
        hideCount = 0;
    }
    function hideTriggers() {
        hideCount++;
        sendHideTriggers();
    }
    function showTriggers() {
        hideCount--;
        if (hideCount <= 0) {
            sendShowTriggers();
        }
    }
    function sendGetNinjaLevel() {
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.NINJA_HANDLER + "#") + AIRTOWER.GET_NINJA_LEVEL, [], AIRTOWER.STRING_TYPE, getCurrentServerRoomId());
    }
    function handleGetNinjaLevel(result) {
        var _local_1 = {};
        _local_1.currentNinjaLevel = result[1];
        _local_1.percentageToNextLevel = result[2];
        updateListeners(GET_NINJA_LEVEL, _local_1);
    }
    function sendGetCards() {
        if (!cardsRequested) {
            AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.NINJA_HANDLER + "#") + AIRTOWER.GET_CARDS, [], AIRTOWER.STRING_TYPE, getCurrentServerRoomId());
            cardsRequested = true;
        } else {
            $d("[SHELL] sendGetCards() -> Not sending request for cards as it has already been sent.");
            updateListeners(GET_CARDS, {cards:cardsCache});
        }
    }
    function handleGetCards(result) {
        var _local_7 = result[1];
        var _local_3 = _local_7.split("|");
        var _local_6 = {};
        _local_6.cards = [];
        var _local_2;
        var _local_1 = 0;
        while (_local_1 < _local_3.length) {
            _local_2 = _local_3[_local_1].split(",");
            _local_6.cards.push({id:_local_2[0], quantity:_local_2[1]});
            _local_1++;
        }
        cardsCache = _local_6.cards;
        updateListeners(GET_CARDS, _local_6);
    }
    function sendGetNinjaRanks(playerID) {
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.NINJA_HANDLER + "#") + AIRTOWER.GET_NINJA_RANKS, [playerID], AIRTOWER.STRING_TYPE, getCurrentServerRoomId());
    }
    function handleGetNinjaRanks(result) {
        var _local_1 = {};
        _local_1.playerID = result[1];
        _local_1.cardJitsuRank = (isNaN(result[2]) ? -1 : (result[2]));
        _local_1.firePathRank = (isNaN(result[3]) ? -1 : (result[3]));
        _local_1.waterPathRank = (isNaN(result[4]) ? -1 : (result[4]));
        _local_1.snowPathRank = (isNaN(result[5]) ? -1 : (result[5]));
        updateListeners(GET_NINJA_RANKS, _local_1);
        if (isMyPlayer(Number(_local_1.playerID))) {
            checkFor3GemsStamp(_local_1.firePathRank, _local_1.waterPathRank, _local_1.snowPathRank);
        }
    }
    function checkFor3GemsStamp(firePathRank, waterPathRank, snowPathRank) {
        var _local_3 = 488;
        var _local_1 = 5;
        var _local_2 = 13;
        if (((firePathRank == _local_1) && (waterPathRank == _local_1)) && (snowPathRank >= _local_2)) {
            stampEarned(_local_3);
        }
    }
    function sendGetFireLevel() {
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.NINJA_HANDLER + "#") + AIRTOWER.GET_FIRE_LEVEL, [], AIRTOWER.STRING_TYPE, getCurrentServerRoomId());
    }
    function sendGetWaterLevel() {
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.NINJA_HANDLER + "#") + AIRTOWER.GET_WATER_LEVEL, [], AIRTOWER.STRING_TYPE, getCurrentServerRoomId());
    }
    function sendGetSnowLevel() {
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.NINJA_HANDLER + "#") + AIRTOWER.GET_SNOW_LEVEL, [], AIRTOWER.STRING_TYPE, getCurrentServerRoomId());
    }
    function handleGetFireLevel(result) {
        var _local_1 = {};
        _local_1.currentNinjaLevel = result[1];
        _local_1.percentageToNextLevel = result[2];
        updateListeners(GET_FIRE_LEVEL, _local_1);
    }
    function handleGetWaterLevel(result) {
        var _local_1 = {};
        _local_1.currentNinjaLevel = result[1];
        _local_1.percentageToNextLevel = result[2];
        updateListeners(GET_WATER_LEVEL, _local_1);
    }
    function handleGetSnowLevel(result) {
        var _local_1 = {};
        _local_1.currentNinjaLevel = result[1];
        _local_1.percentageToNextLevel = result[2];
        updateListeners(GET_SNOW_LEVEL, _local_1);
    }
    function setupServices() {
        currentRoomService = new com.clubpenguin.services.CurrentRoomService(AIRTOWER.getServer());
        equipmentService = new com.clubpenguin.services.EquipmentService(AIRTOWER.getServer());
        epfService = new com.clubpenguin.services.EPFService(AIRTOWER.getServer());
        mailService = new com.clubpenguin.services.MailService(AIRTOWER.getServer());
        questService = new com.clubpenguin.services.QuestService(AIRTOWER.getServer());
        serverCookieService = new com.clubpenguin.services.ServerCookieService();
        puffleTreasureHuntService = new com.clubpenguin.services.PuffleTreasureHuntService(AIRTOWER.getServer(), getMyPlayerId());
        puffleWorldAnimationService = new com.clubpenguin.services.PuffleWorldAnimationService(AIRTOWER.getServer(), getMyPlayerId());
        puffleTricksService = new com.clubpenguin.services.PuffleTricksService(AIRTOWER.getServer());
    }
    function getCurrentRoomService() {
        return(currentRoomService);
    }
    function getEquipmentService() {
        return(equipmentService);
    }
    function getEPFService() {
        return(epfService);
    }
    function getMailService() {
        return(mailService);
    }
    function getServerCookieService() {
        return(serverCookieService);
    }
    function getPuffleTreasureHuntService() {
        return(puffleTreasureHuntService);
    }
    function setupMailInboxModel() {
        mailService.postCardReceived.add(onPostCardReceived, this);
        mailService.inboxReceived.add(onInboxReceived, this);
        mailService.getInbox();
    }
    function onInboxReceived(receivedInbox) {
        if (!inbox) {
            inbox = receivedInbox;
        }
    }
    function onPostCardReceived(postCard) {
        inbox.addPostCard(postCard);
    }
    function getInbox() {
        return(inbox);
    }
    function setInterfaceForStampNotifier(_interface) {
        stampNotifier._interface = _interface;
    }
    function getStampManager() {
        return(stampManager);
    }
    function setupStampManager() {
        stampManager = new com.clubpenguin.stamps.StampManager(this, AIRTOWER.getServer());
        com.clubpenguin.stamps.stampbook.StampBook.shell = this;
        com.clubpenguin.stamps.stampbook.StampBook.stampManager = stampManager;
    }
    function stampIsOwnedByMe(stampID) {
        return(stampManager.stampIsOwnedByMe(stampID));
    }
    function setPauseStampNotification(pause) {
        stampNotifier.pauseNotification = pause;
    }
    function stampEarned(stampID, isServerSide) {
        if (isServerSide == undefined) {
            isServerSide = false;
        }
        if (stampIsOwnedByMe(stampID)) {
            return(undefined);
        }
        var _local_1 = com.clubpenguin.stamps.IStampItem(stampManager.getStampBookItem(stampID, com.clubpenguin.stamps.StampBookItemType.STAMP.value));
        if (_local_1 != undefined) {
            stampManager.setRecentlyEarnedStamp(stampID, isServerSide);
            stampNotifier.add(_local_1);
        } else {
            $e("[SHELL] stampEarned() -> Was told that a stamp which does not exist has been earned. stampID: " + stampID);
        }
    }
    function setRosterWorld() {
        (new com.clubpenguin.friendsas2.commands.UpdateRosterWorldCommand(getCurrentWorld().id, ROSTER)).execute();
    }
    function connectToFriends(playerVO, isMascot) {
        (new com.clubpenguin.friendsas2.commands.ConnectToFriendsCommand(playerVO.player_swid, isMascot, playerVO.loginDataRaw, playerVO.confirmationHash, swfBridge, AS3_GATEWAY_METHOD)).execute();
    }
    function disconnectFromFriends() {
        (new com.clubpenguin.friendsas2.commands.DisconnectFromFriendsCommand(swfBridge, AS3_GATEWAY_METHOD, SHELL)).execute();
    }
    function updatePresence() {
        (new com.clubpenguin.friendsas2.commands.UpdatePresenceCommand(getCurrentWorld().id, getCurrentRoomId(), getMyPlayerObject().presence, swfBridge, AS3_GATEWAY_METHOD)).execute();
    }
    function showFriendsPlayerCard(swid) {
        (new com.clubpenguin.friendsas2.commands.ShowPlayerCardCommand(swid, ROSTER, getCurrentInterface(), AIRTOWER, SHELL)).execute();
    }
    function showFriendsCharacterCard(charcterId) {
        (new com.clubpenguin.friendsas2.commands.ShowCharacterCardCommand(charcterId, ROSTER, getCurrentInterface(), AIRTOWER, SHELL)).execute();
    }
    function toggleFriendsUI() {
        (new com.clubpenguin.friendsas2.commands.ToggleFriendsUICommand(swfBridge, AS3_GATEWAY_METHOD)).execute();
    }
    function findFriend(name) {
        (new com.clubpenguin.friendsas2.commands.FindPlayerCommand(name, AIRTOWER, AS3_GATEWAY_METHOD, swfBridge)).execute();
    }
    function requestFriendship(playerSwid) {
        (new com.clubpenguin.friendsas2.commands.RequestFriendshipCommand(playerSwid, AIRTOWER, AS3_GATEWAY_METHOD, swfBridge)).execute();
    }
    function friendshipAccepted(rawFriend) {
        new FriendshipAcceptedCommand(rawFriend, SHELL).execute();
    }
    function updateFriends(friendsJsonStr) {
        (new com.clubpenguin.friendsas2.commands.UpdateRosterFriendsCommand(friendsJsonStr, ROSTER, getCurrentInterface(), AIRTOWER, SHELL)).execute();
    }
    function updateRosterPlayerIDs() {
        (new com.clubpenguin.friendsas2.commands.UpdateRosterPlayerIDsCommand(ROSTER, getCurrentInterface(), AIRTOWER)).execute();
    }
    function removeFriendship(playerSwid) {
        (new com.clubpenguin.friendsas2.commands.RemoveFriendshipCommand(playerSwid, ROSTER, false, swfBridge, AS3_GATEWAY_METHOD)).execute();
    }
    function friendshipRemoved(swid) {
        (new com.clubpenguin.friendsas2.commands.FriendshipRemovedCommand(swid, ROSTER, SHELL)).execute();
    }
    function addIgnored(playerID, swid) {
        playerToIgnore = playerID;
        (new com.clubpenguin.friendsas2.commands.AddIgnoredCommand(playerID, AIRTOWER, swfBridge, AS3_GATEWAY_METHOD, swid, ENGINE)).execute();
    }
    function removeIgnored(player_id) {
        (new com.clubpenguin.friendsas2.commands.RemoveIgnoredCommand(player_id, ROSTER, swfBridge, AS3_GATEWAY_METHOD, ENGINE)).execute();
    }
    function ignoredUpdated(ignoredCredentialsJsonStr) {
        (new com.clubpenguin.friendsas2.commands.IgnoredUpdatedCommand(ignoredCredentialsJsonStr, ROSTER, AIRTOWER, getCurrentInterface(), SHELL)).execute();
    }
    function friendsConnected(status, sid) {
        (new com.clubpenguin.friendsas2.commands.FriendsConnectedCommand(status, sid, SHELL)).execute();
    }
    function friendsDisconnected(status) {
        (new com.clubpenguin.friendsas2.commands.FriendsDisconnectedCommand(status, SHELL)).execute();
    }
    function requestPlayerInfo(playerID, callback) {
        (new com.clubpenguin.friendsas2.commands.RequestPlayerInfoCommand(playerID, AIRTOWER, callback)).execute();
    }
    function sendRefreshPlayerFriendInfo() {
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_HANDLER + "#") + AIRTOWER.REFRESH_PLAYER_FRIEND_INFORMATION, [], "str", getCurrentServerRoomId());
    }
    function addMascotFriend(id) {
        (new com.clubpenguin.friendsas2.commands.AddMascotFriendCommand(id, AS3_GATEWAY_METHOD, swfBridge)).execute();
    }
    function removeMascotFriend(id) {
        (new com.clubpenguin.friendsas2.commands.RemoveMascotFriendCommand(id, AS3_GATEWAY_METHOD, swfBridge)).execute();
    }
    function jumpToServer(worldId, loginKey, targetPlayerId) {
        (new com.clubpenguin.friendsas2.commands.JumpToServerCommand(worldId, loginKey, AIRTOWER, SHELL, targetPlayerId)).execute();
    }
    function jumpToPlayer(playerId) {
        (new com.clubpenguin.friendsas2.commands.JumpToPlayerCommand(playerId, AIRTOWER, SHELL)).execute();
    }
    function unhideIgnoredPlayer() {
        ENGINE.hideIgnoredPenguin(playerToIgnore, false);
    }
    function setPartyOptions(obj) {
        party_options = obj;
    }
    function getPartyOptions() {
        return(party_options);
    }
    function handleSetTestGroupID(result) {
        if (result.length >= 2) {
            testGroupID = Number(result[1]);
        }
    }
    function getTestGroupID() {
        return(testGroupID);
    }
    function handleScavengerHuntNotification(obj) {
        var _local_4 = obj.shift();
        var _local_2 = obj.pop();
        var _local_1 = _local_2.split(",");
        party_options.unlockedDay = _local_1[0];
    }
    function sendGetScavengerHuntTickets() {
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_TICKET_HANDLER + "#") + AIRTOWER.GET_SCAVENGER_HUNT_TICKETS, [], "str", getCurrentServerRoomId());
    }
    function sendIncrementScavengerHuntTickets(numTickets) {
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_TICKET_HANDLER + "#") + AIRTOWER.INC_SCAVENGER_HUNT_TICKETS, [numTickets], "str", getCurrentServerRoomId());
    }
    function sendDecrementScavengerHuntTickets(numTickets) {
        AIRTOWER.send(AIRTOWER.PLAY_EXT, (AIRTOWER.PLAYER_TICKET_HANDLER + "#") + AIRTOWER.DEC_SCAVENGER_HUNT_TICKETS, [numTickets], "str", getCurrentServerRoomId());
    }
    function handleGetScavengerHuntTickets(obj) {
        var _local_3 = obj.shift();
        var _local_1 = Number(obj[0]);
        updateListeners(SCAVENGER_HUNT_TICKETS_RECEIVED, _local_1);
    }
    function setIslandOptions(obj) {
        island_options = obj;
    }
    function getIslandOptions() {
        return(island_options);
    }
    function initQuests() {
        rainbowPuffleQuest = new com.clubpenguin.quests.rainbowpuffle.RainbowPuffleQuest();
        rainbowPuffleQuest.init();
    }
    function getRainbowPuffleQuest() {
        return(rainbowPuffleQuest);
    }
    var heartbeat;
    var playerModel = (new com.clubpenguin.model.PlayerModel());
    var abTestModel = (new com.clubpenguin.model.ABTestModel());
    var activeFeaturesArray = new Array();
    var trialController = (new com.clubpenguin.modules.trials.TrialController());
    System.exactSettings = false;
    var dependencyHolder = this.createEmptyMovieClip("dependencyHolder", this.getNextHighestDepth());
    setupLightbox(this);
    setupLoading(this);
    setupErrorScreen(this);
    var WHITE_FRAME = this.attachMovie("whiteFrame", "whiteFrame", this.getNextHighestDepth());
    var AIRTOWER;
    var SENTRY;
    var POSTCARDS;
    var MAIL;
    var GRIDVIEW;
    var MUSIC;
    var MERCH_HOLDER;
    var redemptionActive = false;
    var LOGIN_HOLDER;
    var ENGINE;
    var INTERFACE;
    var PARTY;
    var SHELL = this;
    var IGLOO_HOLDER;
    var LOCAL_CRUMBS = local_crumbs_mc;
    var GLOBAL_CRUMBS = global_crumbs_mc;
    var NEWS_CRUMBS = news_crumbs_mc;
    var WEB_CRUMBS_SERVICE;
    var WEB_SERVICE_RECEIVER;
    var INVENTORY_TYPE_COLOUR = 0;
    var INVENTORY_TYPE_HEAD = 1;
    var INVENTORY_TYPE_FACE = 2;
    var INVENTORY_TYPE_NECK = 3;
    var INVENTORY_TYPE_BODY = 4;
    var INVENTORY_TYPE_HAND = 5;
    var INVENTORY_TYPE_FEET = 6;
    var INVENTORY_TYPE_FLAG = 7;
    var INVENTORY_TYPE_PHOTO = 8;
    var INVENTORY_TYPE_OTHER = 9;
    var INVENTORY_EXCLUSIVE = 1;
    var INVENTORY_SUPER_EXCLUSIVE = 2;
    var PAPERDOLLDEPTH_TOP_LAYER = 7500;
    var PAPERDOLLDEPTH_PUFFLE_LAYER = 7250;
    var PAPERDOLLDEPTH_HAND_LAYER = 7000;
    var PAPERDOLLDEPTH_BETWEEN_HAND_AND_HEAD = 6500;
    var PAPERDOLLDEPTH_HEAD_LAYER = 6000;
    var PAPERDOLLDEPTH_BETWEEN_HEAD_AND_FACE = 5500;
    var PAPERDOLLDEPTH_FACE_LAYER = 5000;
    var PAPERDOLLDEPTH_BETWEEN_FACE_AND_NECK = 4500;
    var PAPERDOLLDEPTH_NECK_LAYER = 4000;
    var PAPERDOLLDEPTH_BETWEEN_NECK_AND_BODY = 3500;
    var PAPERDOLLDEPTH_BODY_LAYER = 3000;
    var PAPERDOLLDEPTH_BETWEEN_BODY_AND_FEET = 2500;
    var PAPERDOLLDEPTH_FEET_LAYER = 2000;
    var PAPERDOLLDEPTH_BETWEEN_FEET_AND_BACK = 1500;
    var PAPERDOLLDEPTH_BACK_LAYER = 1000;
    var PAPERDOLLDEPTH_BOTTOM_LAYER = 500;
    var _friendsSid = "";
    var _friendsStatus = false;
    var joinGameFromIglooStatus = false;
    var idOfIglooRoomToJoin;
    var isGameQueWidgetOpen;
    var PAPERDOLL_DEFAULT_LAYER_DEPTHS = {hand:PAPERDOLLDEPTH_HAND_LAYER, head:PAPERDOLLDEPTH_HEAD_LAYER, face:PAPERDOLLDEPTH_FACE_LAYER, neck:PAPERDOLLDEPTH_NECK_LAYER, body:PAPERDOLLDEPTH_BODY_LAYER, feet:PAPERDOLLDEPTH_FEET_LAYER, back:PAPERDOLLDEPTH_BACK_LAYER, puffle:PAPERDOLLDEPTH_PUFFLE_LAYER};
    var FURNITURE_TYPE_ROOM = 0;
    var FURNITURE_TYPE_WALL = 1;
    var FURNITURE_TYPE_FLOOR = 2;
    var FURNITURE_SORT_ROOM = 0;
    var FURNITURE_SORT_WALL = 1;
    var FURNITURE_SORT_FLOOR = 2;
    var FURNITURE_SORT_PET = 3;
    var MAP_SHOW_GAMES = false;
    var IGLOO_INTERACTION = "iglooInteraction";
    var POSTCARD_INTERACTION = "postcardInteraction";
    var STAMPS_INTERACTION = "stampsInteraction";
    var JUMP_INTERACTION = "jumpInteraction";
    var IGLOO_INTERACTION_POINTS = 5;
    var POSTCARD_INTERACTION_POINTS = 3;
    var STAMPS_INTERACTION_POINTS = 1;
    var JUMP_INTERACTION_POINTS = 5;
    var WAVE_FRAME = 25;
    var DANCE_FRAME = 26;
    var CJ_STRAIGHT_FRAME = 7;
    var CJ_BOW_RIGHT_FRAME = 33;
    var CJ_BOW_LEFT_FRAME = 34;
    var CJ_BOW_RIGHT_FRAME_ANGLE_DOWN = 35;
    var CJ_BOW_LEFT_FRAME_ANGLE_UP = 36;
    var CJ_BOW_LEFT_FRAME_ANGLE_DOWN = 37;
    var CJ_BOW_RIGHT_FRAME_ANGLE_UP = 38;
    var DIMG_BI_SERVICE = (new com.clubpenguin.services.DimgBiService());
    var RAW_BI_SERVICE = (new com.clubpenguin.services.RawBiService());
    var _cacheVersion = "";
    _global.getCacheVersion = function () {
        return(_cacheVersion);
    };
    _global.getCurrentShell = function () {
        return(SHELL);
    };
    var _trackerAS2 = com.clubpenguin.util.TrackerAS2.getInstance();
    _global.getCurrentAirtower = function () {
        return(SHELL.AIRTOWER);
    };
    _global.getCurrentIgloo = function () {
        return(IGLOO_HOLDER);
    };
    _global.getCurrentEngine = function () {
        return(SHELL.dependencyHolder.engine);
    };
    _global.getCurrentInterface = function () {
        return(SHELL.dependencyHolder['interface']);
    };
    _global.getCurrentParty = function () {
        return(SHELL.dependencyHolder.party);
    };
    var server_switch = false;
    var domain_name = getDomainName();
    var puffleCrumbs;
    var puffleManager;
    var puffleHatCollection;
    var ENV_SANDBOX_01 = "sandbox01";
    var ENV_SANDBOX_02 = "sandbox02";
    var ENV_SANDBOX_03 = "sandbox03";
    var ENV_SANDBOX_04 = "sandbox04";
    var ENV_SANDBOX_05 = "sandbox05";
    var ENV_SANDBOX_06 = "sandbox06";
    var ENV_SANDBOX_07 = "sandbox07";
    var ENV_SANDBOX_08 = "sandbox08";
    var ENV_SANDBOX_09 = "sandbox09";
    var ENV_DEV = "dev";
    var ENV_GAME_INT_1 = "gameint1";
    var ENV_GAME_QA_2 = "gameqa2";
    var ENV_QA_01 = "qa01";
    var ENV_QA_02 = "qa02";
    var ENV_QA_03 = "qa03";
    var ENV_QA_04 = "qa04";
    var ENV_QA_20 = "qa20";
    var ENV_QA_21 = "qa21";
    var ENV_QA_22 = "qa22";
    var ENV_QA_23 = "qa23";
    var ENV_QA_24 = "qa24";
    var ENV_QA_25 = "qa25";
    var ENV_QA_26 = "qa26";
    var ENV_QA_27 = "qa27";
    var ENV_QA_28 = "qa28";
    var ENV_SEC_01 = "sec01";
    var ENV_LIVE = "live";
    var ENV_LOCAL = "local";
    var ENV_STAGE = "stage";
    var ENV_STAGE2 = "stage2";
    var ENV_HOTFIX = "hotfix";
    var PROTOCOL_HTTP = "http";
    var PROTOCOL_HTTPS = "https";
    var current_environment = ENV_LIVE;
    var buildParam = "";
    parseEnvironment();
    var DEFAULT_AFFILIATE_ID = 0;
    var DEFAULT_PROMOTION_ID = -1;
    var localized_folder;
    var local_paths_object;
    var global_paths_object;
    var link_paths_object;
    var affiliateID = DEFAULT_AFFILIATE_ID;
    var promotionID = DEFAULT_PROMOTION_ID;
    var LOCAL_CRUMBS_PATH = "content/local/";
    var GLOBAL_CRUMBS_PATH = "content/global/crumbs/";
    var LOCAL_CRUMBS_FILE = "local_crumbs.swf";
    var GLOBAL_CRUMBS_FILE = "global_crumbs.swf";
    var NEWSPAPER_CRUMBS_FILE = "news_crumbs.swf";
    var START_SCREEN_XML = "login/startscreen.xml";
    var START_SCREEN_ICONS = "login/messages/icons/";
    var START_SCREEN_POPUPS = "login/messages/popups/";
    var START_SCREEN_BACKGROUNDS = "login/backgrounds/";
    var IGLOO_PATH = "igloo";
    var BACKYARD_PATH = "backyard";
    var basePath;
    var baseConfigPath;
    var clientPath;
    var globalContentPath;
    var localContentPath;
    var webServiceContentPath;
    var gamesPath;
    var phraseChatPath;
    var getAffiliateID = getAffilateId;
    var language_obj = new Object();
    var joke_arr = new Array();
    var safe_message_arr = new Array();
    var mascot_message_arr = new Array();
    var line_message_arr = new Array();
    var quick_message_arr = new Array();
    var tour_guide_message_arr = new Array();
    var treveresed_safe_message_obj = new Object();
    var treveresed_mascot_message_obj = new Object();
    var EN_ABBR = "en";
    var PT_ABBR = "pt";
    var FR_ABBR = "fr";
    var ES_ABBR = "es";
    var DE_ABBR = "de";
    var RU_ABBR = "ru";
    var EN_LABEL = EN_ABBR;
    var PT_LABEL = PT_ABBR;
    var FR_LABEL = FR_ABBR;
    var ES_LABEL = ES_ABBR;
    var DE_LABEL = DE_ABBR;
    var RU_LABEL = RU_ABBR;
    var EN_FRAME = 1;
    var PT_FRAME = 2;
    var FR_FRAME = 3;
    var ES_FRAME = 4;
    var DE_FRAME = 5;
    var RU_FRAME = 6;
    var EN_BITMASK = 1;
    var PT_BITMASK = 2;
    var FR_BITMASK = 4;
    var ES_BITMASK = 8;
    var DE_BITMASK = 32;
    var RU_BITMASK = 64;
    var currentLanguageAbbreviation = EN_ABBR;
    var currentLanguageFrame = EN_FRAME;
    var currentLanguageBitmask = EN_BITMASK;
    var getLanguageAbbriviation = getLanguageAbbreviation;
    var errors = new Array();
    var e_func = new Object();
    var window_size = new Object();
    var STAGE_URL = "http://stage.play.clubpenguin.com/";
    var TEMP_BAN = "3A9609F0-FA90-2CCC-8F7F-1517ED0794E0";
    var PERMANENT_BAN = "921D9363-502A-6D49-01A9-34C4D7F42AD5";
    var WINDOW_SMALL = 1;
    var WINDOW_MEDIUM = 2;
    var WINDOW_LARGE = 3;
    var WINDOW_EXTRA_LARGE = 4;
    window_size[WINDOW_SMALL] = {w:354, h:200};
    window_size[WINDOW_MEDIUM] = {w:354, h:240};
    window_size[WINDOW_LARGE] = {w:354, h:260};
    window_size[WINDOW_EXTRA_LARGE] = {w:460, h:280};
    var DEFAULT_ERROR_TYPE = "d";
    var DEFAULT_ERROR_CODE = -1;
    var DEFAULT_ERROR = DEFAULT_ERROR_CODE;
    var CONNECTION_LOST = 1;
    var TIME_OUT = 2;
    var MULTI_CONNECTIONS = 3;
    var DISCONNECT = 4;
    var KICK = 5;
    var CONNECTION_NOT_ALLOWED = 6;
    var NAME_NOT_FOUND = 100;
    var PASSWORD_WRONG = 101;
    var SERVER_FULL = 103;
    var OLD_SALT_ERROR = 104;
    var PASSWORD_REQUIRED = 130;
    var PASSWORD_SHORT = 131;
    var PASSWORD_LONG = 132;
    var NAME_REQUIRED = 140;
    var NAME_SHORT = 141;
    var NAME_LONG = 142;
    var LOGIN_FLOODING = 150;
    var PLAYER_IN_ROOM = 200;
    var ROOM_FULL = 210;
    var GAME_FULL = 211;
    var ROOM_CAPACITY_RULE = 212;
    var ROOM_DOES_NOT_EXIST = 213;
    var ALREADY_OWN_INVENTORY_ITEM = 400;
    var NOT_ENOUGH_COINS = 401;
    var MAX_FURNITURE_ITEMS = 403;
    var MAX_PUFFLECARE_ITEMS = 406;
    var MAX_PUFFLEHAT_ITEMS = 407;
    var ALREADY_OWN_SUPERPLAY_ITEM = 408;
    var MAX_CJ_MATS = 409;
    var ITEM_NOT_EXIST = 402;
    var ITEM_NOT_AVAILABLE = 410;
    var NOT_ENOUGH_MEDALS = 405;
    var NAME_NOT_ALLOWED = 441;
    var IGLOO_PUFFLE_LIMIT = 443;
    var MAX_PUFFLE_LIMIT = 440;
    var ALREADY_OWN_IGLOO = 500;
    var ALREADY_OWN_FLOOR = 501;
    var ALREADY_OWN_LOCATION = 502;
    var BAN_DURATION = 601;
    var BAN_AN_HOUR = 602;
    var BAN_FOREVER = 603;
    var AUTO_BAN = 610;
    var HACKING_AUTO_BAN = 611;
    var GAME_CHEAT = 800;
    var ACCOUNT_NOT_ACTIVATE = 900;
    var BUDDY_LIMIT = 901;
    var PLAY_TIME_UP = 910;
    var OUT_PLAY_TIME = 911;
    var GROUNDED = 913;
    var PLAY_TIME_ENDING = 914;
    var PLAY_HOURS_ENDING = 915;
    var PLAY_HOURS_UP = 916;
    var PLAY_HOURS_HASNT_START = 917;
    var PLAY_HOURS_UPDATE = 918;
    var SYSTEM_REBOOT = 990;
    var NOT_MEMBER = 999;
    var NO_DB_CONNECTION = 1000;
    var NO_SOCKET_CONNECTION = 10001;
    var TIMEOUT = 10002;
    var PASSWORD_SAVE_PROMPT = 10003;
    var SOCKET_LOST_CONNECTION = 10004;
    var LOAD_ERROR = 10005;
    var MAX_IGLOO_FURNITURE_ERROR = 10006;
    var MULTIPLE_CONNECTIONS = 10007;
    var CONNECTION_TIMEOUT = 10008;
    var MAX_STAMPBOOK_COVER_ITEMS = 10009;
    var WEB_SERVICE_LOAD_ERROR = 10010;
    var WEB_SERVICE_SEND_ERROR = 10011;
    var CHROME_MAC_LOGIN_ERROR = 10104;
    var REDEMPTION_CONNECTION_LOST = 20001;
    var REDEMPTION_ALREADY_HAVE_ITEM = 20002;
    var REDEMPTION_SERVER_FULL = 20103;
    var NAME_REQUIRED_REDEMPTION = 20140;
    var NAME_SHORT_REDEMPTION = 20141;
    var PASSWORD_REQUIRED_REDEMPTION = 20130;
    var PASSWORD_SHORT_REDEMPTION = 20131;
    var REDEMPTION_BOOK_ID_NOT_EXIST = 20710;
    var REDEMPTION_BOOK_ALREADY_REDEEMED = 20711;
    var REDEMPTION_WRONG_BOOK_ANSWER = 20712;
    var REDEMPTION_BOOK_TOO_MANY_ATTEMPTS = 20713;
    var REDEMPTION_CODE_NOT_FOUND = 20720;
    var REDEMPTION_CODE_ALREADY_REDEEMED = 20721;
    var REDEMPTION_TOO_MANY_ATTEMPTS = 20722;
    var REDEMPTION_CATALOG_NOT_AVAILABLE = 20723;
    var REDEMPTION_NO_EXCLUSIVE_REDEEMS = 20724;
    var REDEMPTION_CODE_GROUP_REDEEMED = 20725;
    var REDEMPTION_CODE_EXPIRED = 20726;
    var REDEMPTION_PUFFLES_MAX = 20730;
    var REDEMPTION_PUFFLE_INVALID = 21700;
    var REDEMPTION_PUFFLE_CODE_MAX = 21701;
    var REDEMPTION_CODE_TOO_SHORT = 21702;
    var REDEMPTION_CODE_TOO_LONG = 21703;
    var GOLDEN_CODE_NOT_READY = 21704;
    var REDEMPTION_PUFFLE_NAME_EMPTY = 21705;
    e_func[DEFAULT_ERROR] = e_default;
    e_func[CONNECTION_NOT_ALLOWED] = e_connectionNotAllowed;
    e_func[CONNECTION_LOST] = e_connectionLost;
    e_func[TIME_OUT] = e_timeOut;
    e_func[MULTI_CONNECTIONS] = e_multiConnections;
    e_func[DISCONNECT] = e_disconnect;
    e_func[KICK] = e_kick;
    e_func[NAME_NOT_FOUND] = e_nameNotFound;
    e_func[PASSWORD_WRONG] = e_passwordWrong;
    e_func[SERVER_FULL] = e_serverFull;
    e_func[PASSWORD_REQUIRED] = e_passwordRequired;
    e_func[PASSWORD_SHORT] = e_passwordShort;
    e_func[PASSWORD_LONG] = e_passwordLong;
    e_func[NAME_REQUIRED] = e_nameRequired;
    e_func[NAME_SHORT] = e_nameShort;
    e_func[NAME_LONG] = e_nameLong;
    e_func[PASSWORD_REQUIRED_REDEMPTION] = e_passwordRequiredRedemption;
    e_func[PASSWORD_SHORT_REDEMPTION] = e_passwordShortRedemption;
    e_func[NAME_SHORT_REDEMPTION] = e_nameRequiredRedemption;
    e_func[NAME_REQUIRED_REDEMPTION] = e_nameShortRedemption;
    e_func[LOGIN_FLOODING] = e_loginFlooding;
    e_func[PLAYER_IN_ROOM] = e_playerInRoom;
    e_func[ROOM_FULL] = e_roomFull;
    e_func[GAME_FULL] = e_gameFull;
    e_func[ROOM_CAPACITY_RULE] = e_roomCapacityRule;
    e_func[ROOM_DOES_NOT_EXIST] = e_roomDoesNotExist;
    e_func[ALREADY_OWN_INVENTORY_ITEM] = e_alreadyOwnInventoryItem;
    e_func[NOT_ENOUGH_COINS] = e_notEnoughCoins;
    e_func[MAX_FURNITURE_ITEMS] = e_maxFurnitureItems;
    e_func[MAX_PUFFLECARE_ITEMS] = e_maxPuffleCareItems;
    e_func[MAX_PUFFLEHAT_ITEMS] = e_maxPuffleHatItems;
    e_func[ALREADY_OWN_SUPERPLAY_ITEM] = e_alreadyOwnSuperplayItem;
    e_func[MAX_CJ_MATS] = e_maxCJMats;
    e_func[NOT_ENOUGH_MEDALS] = e_notEnoughMedals;
    e_func[ITEM_NOT_EXIST] = e_itemNotExist;
    e_func[ITEM_NOT_AVAILABLE] = e_itemNotAvailable;
    e_func[NAME_NOT_ALLOWED] = e_nameNotAllowed;
    e_func[IGLOO_PUFFLE_LIMIT] = e_iglooPuffleLimit;
    e_func[MAX_PUFFLE_LIMIT] = e_maxPuffleLimit;
    e_func[ALREADY_OWN_IGLOO] = e_alreadyOwnIgloo;
    e_func[ALREADY_OWN_FLOOR] = e_alreadyOwnFloor;
    e_func[ALREADY_OWN_LOCATION] = e_alreadyOwnLocation;
    e_func[BAN_DURATION] = e_banDuration;
    e_func[BAN_AN_HOUR] = e_banAnHour;
    e_func[BAN_FOREVER] = e_banForever;
    e_func[AUTO_BAN] = e_autoBan;
    e_func[HACKING_AUTO_BAN] = e_hackingAutoBan;
    e_func[GAME_CHEAT] = e_gameCheat;
    e_func[ACCOUNT_NOT_ACTIVATE] = e_accountNotActive;
    e_func[BUDDY_LIMIT] = e_buddyLimit;
    e_func[PLAY_TIME_UP] = e_playTimeUp;
    e_func[OUT_PLAY_TIME] = e_outPlayTime;
    e_func[GROUNDED] = e_grounded;
    e_func[PLAY_TIME_ENDING] = e_playTimeEnding;
    e_func[PLAY_HOURS_ENDING] = e_playHoursEnding;
    e_func[PLAY_HOURS_UP] = e_playHoursUp;
    e_func[PLAY_HOURS_HASNT_START] = e_playHoursHasntStart;
    e_func[PLAY_HOURS_UPDATE] = e_playHoursUpdate;
    e_func[SYSTEM_REBOOT] = e_systemReboot;
    e_func[NOT_MEMBER] = e_notMember;
    e_func[NO_DB_CONNECTION] = e_noDatabaseConnection;
    e_func[NO_SOCKET_CONNECTION] = e_noConnection;
    e_func[TIMEOUT] = e_timeout;
    e_func[PASSWORD_SAVE_PROMPT] = e_passwordSavePrompt;
    e_func[SOCKET_LOST_CONNECTION] = e_connectionLost;
    e_func[LOAD_ERROR] = e_loadError;
    e_func[OLD_SALT_ERROR] = e_loadError;
    e_func[MAX_IGLOO_FURNITURE_ERROR] = e_maxFurniture;
    e_func[CONNECTION_TIMEOUT] = e_connectionAttemptTimedOut;
    e_func[MAX_STAMPBOOK_COVER_ITEMS] = e_maxStampBookCoverItems;
    e_func[WEB_SERVICE_LOAD_ERROR] = e_loadError;
    e_func[WEB_SERVICE_SEND_ERROR] = e_loadError;
    e_func[CHROME_MAC_LOGIN_ERROR] = e_chromeMacLoginError;
    var error_cover;
    var error_window;
    var error_window_on_close;
    var local_error_obj = new Object();
    var SOCKET_ERROR = "SOCKET ERROR";
    var CLIENT_ERROR = "CLIENT ERROR";
    var shell_errors_active = true;
    var idle_interval = 0;
    var last_update = getLocalEpoch();
    var idle_timeout = 600000;
    var idle_timeout_freq = 60000;
    var key_listener;
    var mouse_listener;
    var DEBUG_MODE = true;
    var loading;
    var loadingScreenEnabled = true;
    var isJumpLoadingScreen = false;
    var animationPaths;
    var progressInterval = -1;
    var UPDATE_TIME = 500;
    var lightbox;
    var close_func_holder;
    var shell_listener_container = new Object();
    var SENDING_MESSAGE = "sendingMessage";
    var SEND_MESSAGE = "sendMessage";
    var SEND_PHRASECHAT_MESSAGE = "sendPhraseChatMessage";
    var SEND_BLOCKED_MESSAGE = "sendBlockedMessage";
    var SEND_SAFE_MESSAGE = "sendSafeMessage";
    var SEND_LINE_MESSAGE = "sendLineMessage";
    var SEND_QUICK_MESSAGE = "sendQuickMessage";
    var SEND_TOUR_GUIDE_MESSAGE = "sendTourGuideMessage";
    var SEND_MASCOT_MESSAGE = "sendMascotMessage";
    var SEND_EMOTE = "sendEmote";
    var SEND_JOKE = "sendJoke";
    var SHOW_EMOTE = "showEmote";
    var GAME_OVER = "gameOver";
    var BUY_INVENTORY = "buyInventory";
    var BUY_CARDS = "buyCards";
    var CHECK_INVENTORY = "checkInventory";
    var GET_INVENTORY_LIST = "getInventoryList";
    var ADD_PLAYER = "addPlayer";
    var REMOVE_PLAYER = "removePlayer";
    var UPDATE_PLAYER = "updatePlayer";
    var PLAYER_MOVE = "playerMove";
    var LOCAL_PLAYER_MOVE = "localPlayerMove";
    var PLAYER_TELEPORT = "playerTeleport";
    var PLAYER_FRAME = "playerFrame";
    var PLAYER_DANCE_START = "playerDanceStart";
    var PLAYER_WAVE_START = "playerWaveStart";
    var PLAYER_SIT_START = "playerSitStart";
    var PLAYER_ACTION = "playerAction";
    var OPEN_BOOK = "openBook";
    var CLOSE_BOOK = "closeBook";
    var THROW_BALL = "throwBall";
    var THROW_BALL_LOCAL = "throwBallLocal";
    var BALL_LAND = "ballLand";
    var JOIN_ROOM = "joinRoom";
    var REFRESH_ROOM = "refreshRoom";
    var JOIN_GAME = "joinGame";
    var BROWSER_CLOSE = "browserClose";
    var COIN_DIG_UPDATE = "coinDigUpdate";
    var ACHIEVEMENT_EVENT = "achievement";
    var ACHIEVEMENT_EARNED_EVENT = "achievementEarned";
    var GEOCACHE_EVENT = "geocache";
    var STAMP_EARNED_ANIM_DONE = "stampEarnedAnimDone";
    var ACHIEVEMENT_DONE = "achievementDone";
    var PLAYER_AVATAR_TRANSFORMED = "playerAvatarTransformed";
    var SEND_GHOST_BUSTED = "sendGhostBusted";
    var ALL_PLAYERS_LOADED = "allPlayersLoaded";
    var COINS_FOR_CHANGE_TOTALS_UPDATED = "coinsForChangeTotalsUpdated";
    var COOKIE_PURCHASED = "cookiePurchased";
    var COOKIE_STOCK_UPDATED = "cookieStockUpdated";
    var COOKIE_BAKERY_STATE_UPDATE = "cookieBakeryStateUpdate";
    var CAN_PURCHASE_COOKIES = "canPurchaseCookies";
    var BATTLE_ROOM_COUNDOWN = "battleRoomCountdown";
    var BATTLE_ROOM_UPDATE = "battleRoomUpdate";
    var CONTENT_OPENED = "contentOpened";
    var CONTENT_CLOSED = "contentClosed";
    var PARTY_COOKIE_UPDATED = "partyCookieUpdated";
    var PLAYER_CURRENCIES_UPDATED = "playerCurrenciesUpdated";
    var JUMP_TO_PLAYER_ANIMATION_COMPLETE = "jumpToPlayerAnimationComplete";
    var ERROR_PROMPT_CLOSED = "errorPromptClosed";
    var PLAYERS_STAMP_BOOK_CATEGORIES = "playersStampBookCategories";
    var PLAYERS_STAMPS = "playersStamps";
    var MY_RECENTLY_EARNED_STAMPS = "myRecentlyEarnedStamps";
    var STAMP_BOOK_COVER_DETAILS = "stampBookCoverDetails";
    var LOAD_COMPLETE = "slc";
    var ROOM_INITIATED = "sri";
    var ROOM_DESTROYED = "srd";
    var GET_PLAYER_INVENTORY = "gpi";
    var UPDATE_CHAT_LOG = "ucl";
    var START_ENGINE = "sten";
    var START_INTERFACE = "stin";
    var NEW_MAIL = "nm";
    var TOTAL_MAIL = "tm";
    var RECIEVE_MAIL = "rm";
    var GAME_OVER;
    var UPDATE_COINS = "upc";
    var UPDATE_INVENTORY = "upi";
    var FURNITURE_INTERACTIVE_TYPES = "fit";
    var UPDATE_BUDDY_LIST = "ubl";
    var SEND_BUDDY_REQUEST = "sbr";
    var SEND_BUDDY_ACCEPT = "abr";
    var BUDDY_ONLINE = "buo";
    var LOAD_PLAYER_OBJECT = "spo";
    var LOAD_MASCOT_OBJECT = "loadMascotObject";
    var EGG_TIMER_UPDATE = "eggTimerUpdate";
    var GET_PLAYER_LOCATION = "gpl";
	var GET_PLAYER_LOCATION_JUMP = "gplj";
    var GET_FURNITURE_LIST = "gfl";
    var UPDATE_IGLOO_FLOOR = "uif";
    var UPDATE_IGLOO_TYPE = "uit";
    var BUY_IGLOO_LOCATION = "aloc";
    var IGLOO_LOCK_STATUS = "ils";
    var GET_IGLOO_DETAILS = "gid";
    var JOIN_PLAYER_IGLOO = "jpi";
    var LOAD_PLAYER_IGLOO_LIST = "lpil";
    var GET_OWNED_IGLOOS = "getOwnedIgloos";
    var LOAD_IS_PLAYER_IGLOO_OPEN = "pio";
    var BUY_IGLOO_FLOOR = "buyIglooFloor";
    var BUY_IGLOO_TYPE = "buyIglooType";
    var BUY_FURNITURE = "buyFurniture";
    var BUY_MULTIPLE_FURNITURE = "buyMultipleFurniture";
    var BUY_PUFFLE_CARE_ITEM = "buyPuffleCareItem";
    var IGLOO_INIT_COMPLETE = "iglooInitComplete";
    var IGLOO_FURNITURE_COMPLETE = "iglooFurnitureComplete";
    var IGLOO_EDIT_MODE = "iglooEditMode";
    var ADD_PUFFLE = "addPuffle";
    var REMOVE_PUFFLE = "removePuffle";
    var SWAP_PUFFLE = "swapPuffle";
    var REQUEST_PUFFLE_MOVE = "requestPuffleMove";
    var PUFFLE_MOVE = "puffleMove";
    var PUFFLE_FRAME = "puffleFrame";
    var PUFFLE_WALK = "puffleWalk";
    var ADOPT_PUFFLE = "adoptPuffle";
    var PUFFLE_INTERACTION = "puffleInteraction";
    var REQUEST_PUFFLE_INTERACTION = "requestPuffleInteration";
    var ENABLE_PUFFLE_DIG_SEARCH_EMOTE = "enablePuffleDigSearchEmote";
    var DISABLE_PUFFLE_DIG_SEARCH_EMOTE = "disablePuffleDigSearchEmote";
    var ENABLE_PUFFLE_TREASURE_HUNTING = "enablePuffleTreasureHunting";
    var DISABLE_PUFFLE_TREASURE_HUNTING = "disablePuffleTreasureHunting";
    var PUFFLE_CARE_STATION = "puffleAccessedCareStation";
    var PUFFLE_EFFECT_ANIMATION_COMPLETE = "puffleEffectAnimationComplete";
    var ROOM_EFFECT_COMPLETE = "roomEffectComplete";
    var PUFFLE_AVATAR_CLIP_LOADED = "puffleAvatarClipLoaded";
    var PUFFLE_PERFORMING_TRICK = "pufflePefromingTrick";
    var UPDATE_TABLE = "upt";
    var JOIN_TABLE = "jt";
    var LEAVE_TABLE = "lt";
    var UPDATE_WADDLE = "uw";
    var JOIN_WADDLE = "jw";
    var LEAVE_WADDLE = "lw";
    var START_WADDLE = "sw";
    var CARD_JITSU_MATCH_SUCCESSFUL = "cjms";
    var MAIL_SEND_STATUS = "mss";
    var PLAYER_MOVE_START = "playerMoveStart";
    var PLAYER_MOVE_DONE = "pmd";
    var GET_CARDS = "getCards";
    var GET_NINJA_LEVEL = "getNinjaLevel";
    var GET_FIRE_LEVEL = "getFireLevel";
    var GET_WATER_LEVEL = "getWaterLevel";
    var GET_SNOW_LEVEL = "getSnowLevel";
    var GET_NINJA_RANKS = "getNinjaRanks";
    var WORLD_CONNECT_SUCCESS = "worldConnectSuccess";
    var SCAVENGER_HUNT_TICKETS_RECEIVED = "scavengerHuntTicketsReceived";
    var MODULE_CLOSED = "moduleClosed";
    var CONTINUE_LOGIN = "continueLogin";
    var UPDATE_ACTIVE_FEATURES = "updateActiveFeatures";
    var UPDATE_MUSIC = "updatemusic";
    var currentDispatchingCount = 0;
    var listenersToAddMap = {};
    var listenersToRemoveMap = {};
    var currently_loading_path;
    var current_load_attempt;
    var load_queue = new Array();
    var FREEZE_CODE_HASH = "theultimatesupermonkeycomicbooks";
    var MAX_LOAD_ATTEMPS = 3;
    var SWF = ".swf";
    var __loadInterval = null;
    var __holder = null;
    var INTERVAL_RATE = 10;
    var __initFunction = null;
    var __path = null;
    var __options = null;
    var __delayInterval = null;
    var __itemsLoaded = null;
    var __onLoadInPostCard = null;
    var __clipList = null;
    var server_time;
    var serverTimezoneOffset;
    var local_time;
    var calculated_time_difference;
    var calculated_timezone_offset;
    var DEFAULT_TIMEZONE_OFFSET = 7;
    var MINUTES_IN_DAY = 1440;
    var ONE_MINUTE_IN_MILLISECONDS = 60000;
    var TWO_MINUTES_IN_MILLISECONDS = 120000;
    var THREE_MINUTES_IN_MILLISECONDS = 180000;
    var FOUR_MINUTES_IN_MILLISECONDS = 240000;
    var FIVE_MINUTES_IN_MILLISECONDS = 300000;
    var ONE_SECOND_IN_MILLISECONDS = 1000;
    var TWO_SECONDS_IN_MILLISECONDS = 2000;
    var ONE_DAY_IN_MILLISECONDS = 86400000;
    var playerJoinedGame = (new org.osflash.signals.Signal());
    var my_game = new Object();
    var MAX_GAME_SCORE = 999999999;
    var NINJA_CATALOGUE_POWERCARDS_PAGE = 2;
    var MP_COMMAND_PLAY_VIDEO = "pv";
    var MP_COMMAND_SHOW_STORY_VIEWER = "ssv";
    var MP_COMMAND_BUY_POWER_CARDS = "bpc";
    var MP_COMMAND_IDLE_DISCONNECT = "dc";
    var game_crumbs = {};
    var phoneGameCrumbs = {};
    var loadGameStartTime;
    var _mmData;
    var _disconnecting = false;
    var endGameParams = {};
    var gameName = "";
    var isCardJitsuEndGameScreen = false;
    var cardJitsuEndGameScreenVars;
    var game_room_smart_id = undefined;
    var current_game_name = "";
    var CARD_JITSU_SERVER_ROOM_ID = 998;
    var CARD_JITSU_FIRE_SERVER_ROOM_ID = 997;
    var CARD_JITSU_WATER_SERVER_ROOM_ID = 995;
    var IGLOO_SERVER_ROOM_ID = 994;
    var waddle_list = new Object();
    var playerJoinedRoom = (new org.osflash.signals.Signal());
    var add_more_players = false;
    var my_room;
    var last_known_room_name;
    var last_known_xpos;
    var last_known_ypos;
    var current_server_room_id = undefined;
    var current_crumb_room_id = undefined;
    var room_crumbs = new Object();
    var current_room_id;
    var last_room_id;
    var last_world_room_id;
    var roomIds_visited = [];
    var last_server_room_id;
    var loadRoomStartTime = 0;
    var _categoryId = null;
    var _mapId = null;
    var _triggerId = null;
    var battleInfo = {};
    var STARTER_DECK_ITEM_ID = 821;
    var FIRE_DECK_ITEM_ID = 8006;
    var WATER_DECK_ITEM_ID = 8010;
    var SNOW_DECK_ITEM_ID = 8011;
    var AMULET_ITEM_ID = 3032;
    var DOJO_EXT_SOLO_ROOM_NAME = "dojoextsolo";
    var DOJO_EXT_SOLO_START_X = 390;
    var DOJO_EXT_SOLO_START_Y = 350;
    var backyardMovieClip;
    var playerJoinedRoom = (new org.osflash.signals.Signal());
    mouse_listener = new Object();
    mouse_listener.onMouseUp = handleOnMouseUp;
    Mouse.addListener(mouse_listener);
    var news_crumbs;
    var postcard_flat_arr;
    var postcard_category_list;
    var postcard_crumbs;
    var postcard_count;
    var CURRENCY_TYPE_GOLD_NUGGETS = 1;
    var SET_COOKIE_METHOD = "setCookie";
    var MEMBERSHIP_STATUS_COOKIE_NAME = "cpvisitor";
    var MEMBERSHIP_STATUS_COOKIE_EXPIRY_IN_DAYS = 730;
    var MEMBER_COOKIE_VALUE = "returnpaid";
    var NON_MEMBER_COOKIE_VALUE = "returnfree";
    var epfPhoneRequested = false;
    var sendThrowEnabled = true;
    var player_cache = [];
    var MAX_PLAYERS_IN_CACHE = 20;
    var membership_days_remaining = -1;
    var temporaryMapCategory = -1;
    var SPLIT_CHAR = "|";
    var isNameResubmitted = false;
    var resubmittedName = "";
    var isQuestingPlayer = false;
    var playerChoseSafeChatWorld;
    addListener(UPDATE_PLAYER, handleUpdatePlayer);
    var playerIdToLastRequestTimeMS = {};
    var playerIdToTimeout = {};
    var MIN_TIME_MS = 1000;
    var playerAgentStatusChanged = ((playerAgentStatusChanged = new org.osflash.signals.Signal(Boolean)));
    var EPFSystemPostCardID = 112;
    var EPFPlayerPostCardID = 47;
    var jumpingPlayersAnimationMap = {};
    var localPlayerIsJumping = false;
    var SAFETY_SWEATER_ITEM_ID = 24042;
    var inventory_crumbs = undefined;
    var localized_inventory_crumbs = undefined;
    var inventory_arr = [];
    var player_colours = new Object();
    var frame_hacks;
    var furniture_crumbs = new Object();
    var localized_furniture_crumbs = undefined;
    var furniture_list;
    var igloo_building_list;
    var igloo_location_list;
    var INTERACTIVE_REST = 0;
    var INTERACTIVE_PLAY = 1;
    var INTERACTIVE_FEED = 2;
    var CJ_MAT_ID = 786;
    var CJ_MAT_MAX_COUNT = 4;
    var _buyFurnitureIgnoreListeners = false;
    var _cjMatAmount = 0;
    var _matCountSet = false;
    var is_igloo_locked = true;
    var player_igloo;
    var igloo_player_id;
    var player_igloo_furniture;
    var ownedIgloos;
    var igloosCached = false;
    var current_igloo_type;
    var current_igloo_floor_id;
    var is_room_igloo = false;
    var first_run = true;
    var isLastJoinedRoomIgloo;
    var previousIglooOwnerID;
    var iglooOptions = {};
    var igloo_crumbs = {};
    var floor_crumbs = {};
    var location_crumbs = {};
    var music_crumbs = {};
    var CJ_MAT_ID = 786;
    var myStoredIglooObject = null;
    var localized_igloo_crumbs = undefined;
    var MAX_IGLOO_ITEMS = 99;
    var DEFAULT_IGLOO_TYPE_ID = 1;
    var DEFAULT_IGLOO_MUSIC_ID = 0;
    var DEFAULT_IGLOO_FLOOR_ID = 0;
    var DEFAULT_IGLOO_FURNITURE = [];
    var cjMatWaddleID;
    var BI_ACTION_SEND_MESSAGE = "send_message";
    var BI_ACTION_SEND_PHRASE_CHAT_MESSAGE = "send_phrase_chat_message";
    var BI_ACTION_SEND_EMOTE = "send_emote";
    var BI_ACTION_SEND_JOKE = "send_joke";
    var BI_ACTION_SEND_QUICK_MESSAGE = "send_quick_message";
    var BI_ACTION_SEND_SAFE_MESSAGE = "send_safe_message";
    var BI_ACTION_SEND_LINE_MESSAGE = "send_line_message";
    var BI_ACTION_SEND_MASCOT_MESSAGE = "send_mascot_message";
    var BI_ACTION_SEND_TOUR_GUIDE_MESSAGE = "send_tour_guide_message";
    var BI_ACTION_SEND_PHRASE_AUTOCOMPLETE_MESSAGE = "send_phrase_autocomplete_message";
    var mascot_crumbs;
    var mascot_options;
    var achievement_crumbs;
    var achievement_group_complete;
    var buddyList = undefined;
    var buddyRequest = undefined;
    var MAX_BUDDY_COUNT = 100;
    var ignore_list = undefined;
    var REPORT_SWEARING = 0;
    var REPORT_SEXUAL_LANGUAGE = 1;
    var REPORT_RACIAL_WORDS = 2;
    var REPORT_PERSONAL_INFO = 3;
    var REPORT_EMAIL_ADDRESS = 4;
    var REPORT_REAL_NAME = 5;
    var REPORT_NAME_CALLING = 6;
    var REPORT_BAD_PENGUIN_NAME = 7;
    var mail_engine = undefined;
    var total_sent_messages = 0;
    var MAX_MAIL_MESSAGES = 250;
    var POSTCARD_COST = 10;
    var MAIL_INBOX_FULL = 0;
    var MAIL_SUCCESSFULLY_SENT = 1;
    var MAIL_NOT_ENOUGH_COINS = 2;
    var active_postcard;
    var world_id_holder;
    var world_crumbs;
    var localized_world_crumbs;
    var login_server;
    var redemption_server;
    var webService;
    var world_list = new Array();
    var is_world_safe = false;
    var current_world_obj;
    var jumpDestinationAirtower;
    var worldsWithFriends = new Array();
    var UPDATE_SHELL_STATE = "updateShellState";
    var SETUP_STATE = 0;
    var LOGIN_STATE = 1;
    var PLAY_STATE = 2;
    var GAME_STATE = 3;
    var EDIT_STATE = 4;
    var MERCH_STATE = 5;
    var MAIL_STATE = 6;
    var HIDDEN_STATE = 7;
    var currentState;
    var states_holder = new Array();
    var GLOBAL_CRUMBS_LOADING_MESSAGE = "Loading Global Files";
    var NEWS_CRUMBS_LOADING_MESSAGE = "Loading Content";
    var CRUMBS_PATH = "crumbs/";
    var NEWS_PATH = "news/";
    var MAP_TRIGGERS_FILNAME = "map_triggers.json";
    var _mapTriggersLoader;
    var _devWebDomain = "";
    var _localLoginServerData;
    var wem = (new com.clubpenguin.world.rooms.weathereffects.WeatherEffectsManager(this, null));
    delete wem;
    addState(SETUP_STATE, receiveServices, undefined);
    addState(LOGIN_STATE, showLogin, hideLogin);
    var login_init = false;
    var __pollInterval = null;
    var PROP_INTERVAL = 40;
    var loginDepLoader;
    var validAutoLoginWorlds = new Array();
    var autoLoginWorldIndex = 0;
    var AUTO_LOGIN_POP_MAX = 5;
    var AUTO_LOGIN_POP_MIN = 4;
    var _manualLoginCallback;
    var username;
    var password;
    var chat_log;
    var MAX_CHAT_LOG_ENTRIES = 20;
    addState(PLAY_STATE, setupPlay, hidePlay);
    var play_state_init = false;
    var playDepLoader;
    addState(EDIT_STATE, setupEdit, hideEdit);
    addState(MERCH_STATE, showMerch, hideMerch);
    var merchDepLoader;
    var __delayInterval = null;
    var INTERVAL_RATE = 500;
    addState(MAIL_STATE, setupMailState, hideMailState);
    addState(LOGIN_STATE, onEnterHidden, onExitHidden);
    var scavengerHuntCrumbs;
    var client_cookies = new Array();
    var MISSION_COOKIE = "missionCookie_";
    var GAME_COOKIE = "gameCookie_";
    var CLIENT_COOKIE = "clientCookie_";
    var PARTY_COOKIE = "clientCookie_";
    var coinsForChangeTotals = [];
    var totalCoinsDonated = 0;
    var cookieTotal;
    var maxCookies;
    var canBuyCookies = true;
    var lastBakeryStateJSON = "";
    var timeouts = {};
    setupRootContextMenu();
    var bootDepLoader;
    var createDepLoader;
    var bootDependencies;
    var loginDependencies;
    var merchDependencies;
    var joinDependencies;
    var isLoginFloodControlActive;
    var DEPENDENCIES_FILENAME = "v2/client/dependencies.json";
    var AS3_GATEWAY_METHOD = "messageFromAS2";
    var MSG_WEB_SERVICE_REQUEST = "webServiceRequest";
    var MSG_OPEN_NEWSPAPER = "openNewspaper";
    var MSG_OPEN_MODULE = "openModule";
    var MSG_CLOSE_DIALOG = "closeDialog";
    var MSG_UPDATE_PLAYER_VO = "updatePlayerVO";
    var MSG_AIRTOWER_EVENT = "airtowerEvent";
    var MSG_ADD_BUDDY = "addBuddy";
    var MSG_UPDATE_COINS = "updateCoins";
    var MSG_AS2_INITIALIZED = "as2Initialized";
    var MSG_SET_SWF_ADDRESS = "setSwfAddress";
    var MSG_SEND_TRACKING_DATA = "sendTrackingData";
    var MSG_GET_BUY_PUFFLE_CARE_ITEM_INFO = "getBuyPuffleCareItemInfo";
    var MSG_GET_DOES_PLAYER_OWN_PUFFLE_ITEM = "getDoesPlayerOwnPuffleItem";
    var MSG_ADD_PUFFLE_CARE_ITEM = "addPuffleCareItemInfo";
    var MSG_ADD_PUFFLE_CARE_POINTS = "addPuffleCarePoints";
    var MSG_SHOW_ERROR_FROM_AS2 = "showErrorFromAS2";
    var MSG_SHOW_CONTENT = "showContent";
    var MSG_SHOW_CONTENT_FAQ = "showFAQ";
    var MSG_MAP_ACTION = "mapAction";
    var MSG_MAP_CATEGORY_SELECTED = "mapCategorySelected";
    var MSG_SEND_TRIGGER = "sendTrigger";
    var MSG_CLICKED_IN_AS2 = "clickedInAS2";
    var MSG_JOINED_ROOM = "joinedRoom";
    var MSG_LEAVING_ROOM = "leavingRoom";
    var MSG_HIDE_TRIGGERS = "hideTriggers";
    var MSG_SHOW_TRIGGERS = "showTriggers";
    var MSG_NAVIGATE_TO_BUY_MEMBERSHIP = "navigateToBuyMembership";
    var MSG_START_NOTIFICATION_SERVICES = "startNotificationServices";
    var MSG_STOP_NOTIFICATION_SERVICES = "stopNotificationServices";
    var MSG_SHOW_PROMPT = "showPrompt";
    var MSG_CLOSE_PROMPT = "closePrompt";
    var MSG_SHOW_ASSET_PROMPT = "showAssetPrompt";
    var MSG_SHOW_PUFFLE_TRICKS_HUD = "showPuffleTricksHUD";
    var MSG_ENABLE_PUFFLE_TRICKS_HUD = "enablePuffleTricksHUD";
    var MSG_DISABLE_PUFFLE_TRICKS_HUD = "disablePuffleTricksHUD";
    var MSG_SHOW_PUFFLE_TREASURE_NOTIFICATION = "showPuffleTreasureNotification";
    var MSG_LOAD_PUFFLE_TREASURE_INFOGRAPHIC = "loadPuffleTreasureInfographic";
    var MSG_SHOW_COMPLEX_PROMPT = "showComplexPrompt";
    var MSG_RECEIVE_WORLD_DATA_BY_ID = "receiveWorldDataById";
    var MSG_SET_CURRENT_WORLD = "setCurrentWorld";
    var MSG_IDLE_PLAYER_TIMEOUT = "idlePlayerTimeout";
    var MSG_FOCUS_PHRASE_CHAT = "focusPhraseChat";
    var MSG_PARTY_INITIALIZED = "partyInit";
    var MSG_TELL_WEB_MEMBER_SWID = "tellWebMemberSwid";
    var MSG_ROOM_LOADED = "roomLoaded";
    var MSG_SHOW_POSTER = "showPoster";
    var MSG_ADD_INTERACTION = "addInteraction";
    var MSG_LOADING_SCREEN_SHOW = "loadingScreenShowing";
    var MSG_LOADING_SCREEN_HIDE = "loadingScreenHiding";
    var MSG_SHOW_STAMP_EARNED = "showStampEarned";
    var MSG_GET_PLAYER_STATUS = "getPlayerStatus";
    var MSG_START_TRACKER = "startTracker";
    var MSG_START_ASSET_LOAD = "startAssetLoad";
    var MSG_MOVIE_CLIP_LOAD_ERROR = "movieClipLoadError";
    var MSG_SHOW_LOADING_SCREEN = "showLoadingScreen";
    var MSG_HIDE_LOADING_SCREEN = "hideLoadingScreen";
    var MSG_UPDATE_LOADING_SCREEN = "updateLoadingScreen";
    var MSG_CLEAR_CARDS_CACHE = "clearCardsCache";
    var MSG_HIDE_LIKE_WINDOW = "hideLikeWindow";
    var MSG_SHOW_LIKE_WINDOW = "showLikeWindow";
    var MSG_CLOSE_LIKE_WINDOW = "closeLikeWindow";
    var MSG_AS2_MOUSE_RELEASED = "AS2MouseReleased";
    var MAX_LOCAL_CONNECTION_SEND_BYTES = 40000;
    var END_OF_CHUNKING_DELIMITER = "@END_OF_CHUNKING@";
    var MSG_AS2_MEMBERSHIP_ACTIVITY = "membershipActivity";
    var MSG_CONSOLE_DEBUG = "consoleDebug";
    var MSG_AS2_DATA_PAYLOAD = "as2DataPayload";
    var MSG_QUEST_SETTINGS = "questSettingsUpdate";
    var MSG_QUEST_STATUS = "questStatusUpdate";
    var MSG_HIDE_QUEST_UI = "hideQuestUI";
    var MSG_SHOW_QUEST_UI = "showQuestUI";
    var MSG_SEND_AS2_END_GAME_DATA = "sendAS2EndGameData";
    var MSG_MAP_LEGEND_ANIM_COMPLETE = "mapLegendAnimComplete";
    var MSG_START_SOUND_STUDIO = "startSoundStudio";
    var MSG_SHOW_MUSIC_PLAYER_WIDGET = "showMusicPlayerWidget";
    var MSG_HIDE_MUSIC_PLAYER_WIDGET = "hideMusicPlayerWidget";
    var MSG_GET_LOCAL_PLAYER_IGNORE_LIST = "getLocalPlayerIgnoreList";
    var MSG_MUTE_MUSIC_PLAYER = "muteMusicPlayer";
    var MSG_UNMUTE_MUSIC_PLAYER = "unmuteMusicPlayer";
    var MSG_START_IGLOO_STUDIO_MUSIC = "startIglooStudioMusic";
    var MSG_STOP_IGLOO_STUDIO_MUSIC = "stopIglooStudioMusic";
    var swfBridge;
    var _as3NotificationServiceStopped = false;
    var receivedDoesPlayerOwnPuffleItem = (new org.osflash.signals.Signal(Number, String, Boolean));
    var mapTriggers;
    var _currentTrackingObject;
    var soloRoomTrackingString = "";
    var isNewPlayerExperienceRunning = false;
    var _startTime;
    var showMapLegendAnimation;
    var hideCount = 0;
    var cardsRequested = false;
    var cardsCache;
    var MAX_FIRE_PATH_LEVEL = 4;
    var MAX_WATER_PATH_LEVEL = 4;
    var MAX_SNOW_PATH_LEVEL = 4;
    var currentRoomService;
    var equipmentService;
    var epfService;
    var mailService;
    var serverCookieService;
    var puffleTreasureHuntService;
    var puffleWorldAnimationService;
    var puffleTricksService;
    var questService;
    var inbox;
    var stampNotifier = (new com.clubpenguin.stamps.StampNotifier(this));
    var stampManager;
    playerJoinedGame.add(updatePresence);
    playerJoinedRoom.add(updatePresence);
    playerJoinedRoom.addOnce(completePendingFriendRequests);
    playerJoinedRoom.addOnce(setRosterWorld);
    playerJoinedRoom.addOnce(updateRosterPlayerIDs);
    var ROSTER = (new com.clubpenguin.friendsas2.buddiesintegration.Roster());
    var playerToIgnore;
    var party_options;
    var testGroupID;
    var partyCookie = {};
    var island_options;
    var rainbowPuffleQuest;