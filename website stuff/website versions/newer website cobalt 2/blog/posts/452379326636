{"name":"I made a file format","id":"452379326636","author":"Jack Anderson","date":"2022-08-05T17:32:15.480Z","tags":["495343099468"],"description":"What steps I took to make a file format for my blog, and how it's also gonna say goodbye soon.","body":"<p>Let me just start by saying I acknowledge that everything I do in coding is a learning experience, because I come out of it with more knowledge. That's just how everything works. Still, it's funny that I only realize how much better thing x could be done <strong>after</strong> I finish the feature, or get quite close. This happened yet again with my blogpost generator, which, ironically and for better or for worse, was used to format and create this blogpost.</p>\n<p>I will say one thing, it is surely much easier than writing a blogpost in HTML, and at this point that's enough for me to say it's a good utility.</p>\n<h3>ingress</h3>\n<p>I couldn't just title this entr√©e again!</p>\n<p>Yesterday in around 3 hours I managed to create blog_generator.js, a command line utility that generates html files from a single text file, given a template file, and an output directory, where it will dump an autogenerated data.json file and the corresponding post.html.</p>\n<p>Now, don't get me wrong, HTML isn't hard, but it's annoying. Linebreaks are annoying, the formatting is annoying. To write a blogpost directly in HTML feels weird because pressing enter won't affect anything in a paragraph element.</p>\n<p>Using text files, which I know track line breaks, this was a no-brainer to me. I could simply split the file into an array of lines, put every line into a paragraph element, empty lines will add html linebreak elements, and just enable word wrapping on the text file.</p>\n<p>I used the same strategy as the autogenerated blog landing page, where the template has the text {BODY} inside the body element which is later replaced with the generated html. Conveniently to how HTML works and how this was made, I can insert HTML tags at will, like <strong>this</strong>, which requires no extra code in the post generator, and little extra effort in the actual creation of the post.</p>\n<p>Like any *cool* file format, this one needed comments, so I just escape lines starting with // alltogether.</p>\n<p>And for title elements and others, I've added the ! escape, which pushes the exact contents of the line directly into html, not wrapped in paragraph elements, so that the resulting HTML file is less cluttered with empty elements. This wasn't my idea, it was my friend's, same guy who helped me with css and formatting my first few blogposts. Greatly appreciated.</p>\n<p>Finally, I already acknowledge where this blog generator has room to improve, such as possible inline escapes, since I cannot write raw html tags in here for plaintext without messing with the actual behaviour of the page.</p>\n<h3>this isn't the last change</h3>\n<p>This also isn't the last change to how the blog works entirely. Even though statically autogenerated HTML is a good start for the blog, it can still be improved with one, more dynamic HTML file that fetches post contents from a database. That essentially shouldn't be too hard to implement with the current tools, but still is a ways off from now. Do expect it sometime in the future though.</p>\n<p>If you're interested in this custom file format, you can take a look at the file for this post at <a href=\"https://neon.windingtheropes.tech/blogpost-example.post\">neon.windingtheropes.tech/blogpost-example.post</a>.</p>\n<h3>postscriptum</h3>\n<p>Another quiet blog change I made is <a href=\"https://windingtheropes.tech/blog/latest\">/blog/latest</a>. This link will always bring you to the latest blogpost on my website, a feature I thought would be cool to implement, as it's currently sitting in my Discord profile description. Now you can always be up to date, assuming you follow the link at exactly the right time.</p>","published":true}