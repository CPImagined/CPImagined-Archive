{"name":"can you even call this dynamic?","id":"452379326790","author":"Jack Anderson","date":"2022-07-31T15:53:00.000Z","tags":["495343099468"],"description":"A jank rundown of how this jank website was made, and how I'll probably change it again.","body":"<p>\nStarting earlier this week, I decided that I wanted to build a website. \nThis idea was heavily fueled by the fact that I had just received approval for the GitHub Student Pack, which includes a free .tech domain, and tons of other perks. \nI've known HTML for a while now, but I've surely only scratched the surface because I've never had a website to build with it.\nI also tried out React development, but without a definitve plan, it was hard to create anything.\nNow that I have a domain, a Raspberry Pi, and even a Microsoft Azure VM Instance, including all the programming knowledge I've gained over the past two years, I'd say now is the time to create my website. And it should be special.\n</p>\n<p>\nWell, about the special part: it looks cool, but under little examination you can tell that it's a completely static website. On the surface, static websites can be boring, and I would rather not write a Vanilla JS website messing with DOM.\nSo I used Node.js and Express.\nRecently I'd learned Express from working with making APIs for some projects, and that you can make semi-static websites with it, or provide the backend for a full-fledged React app. \nNo React today, but this website isn't completely static, or at least from my perspective.\n</p>\n<p>\nThere are two 'dynamic' parts of this website as it stands, and both of them are only dynamic on the server side, and that means this website is still a static website...\nI'll still go on to explain them and how I classify them as sort of dynamic. Disagree with me if you will.\n<br>\n</p>\n<h3>1. The /blog landing page</h3>\n<p>\nThough this entire blog is mostly made manually, I decided that there was one area that I wanted to be automated, to save me some work in the end. \nThis area was loading a summary of blog posts on the /blog page. I wanted URLs to be simple, but the blog to be organized internally, so I worked with Express.js to dynamically create routes.\nI decided to organize posts into folders, where each folder has a post.html and a data.json. Post.html is what is routed to the viewer's browser, under /blog/FOLDER_NAME.\nData.json is used for my 'dynamic' part of the website, the /blog landing page. Data.json holds the title of the post, and a simple description. That way, my server.js code can pull it and load some post-blocks into the /blog landing page automatically for me.\nBlog.html's posts div contains only the string {POSTS} server side, so that it can be replaced with the dynamically created list of post div elements, by simply iterating through the posts folder.\nIn server.js, the /blog route is directed to a string, which is blog.html with its {POSTS} replaced with the actual autogenerated posts list.\n</p>\n<h3>2. The 404 page</h3>\n<p>\nThis one is a lot simpler, rather than storing a string with html in javascript code, I created a 404.html file, then just added {URL} in the text, so it could be replaced server-side, depending on the invalid url the user tried to access. \nOf the two, though simpler, I feel that this one could be considered more dynamic than the other, because it actually depends upon user input.\n</p>\n<h3>epiphany</h3>\n<p>\nAfter writing this article and writing the code that got you to it, I realize how I'm really overcomplicating objectively simple tasks that could be done with a dynamically rendered framework. \nAnd being the type of person that can't leave things alone for long without thinking of something to improve them, I can say without a doubt this website won't be static forever. \nEnjoy it while it lasts ;)\n</p>\n<p>If you're a student and like tech, I highly suggest you sign up for the GitHub Student Developer Pack: <a href=\"https://education.github.com/pack\">https://education.github.com/pack</a>.</p>","published":true}