{"name":"Re-React","id":"452379326964","author":"Jack Anderson","date":"2022-08-25T15:52:18.885Z","tags":["495343099468"],"description":"To be or not to be [a react website].","body":"<p>A while ago I said that I would be redesigning this website soon with React, the dynamic web framework. I got as far as moving most of the site, then approached the blog, where I realized that React is build for single page apps. And surely I could have worked around that, and not knowing React at all contributes to me thinking doing certain things would be more complicated than others. But in the end, it came down to the fact that windingtheropes.tech is not a server oriented website, or even very dynamic at that. I can do all the rendering server side then send it to the client and get the performance of a [basically] completely static website. Plus I wrote lots of code that caters to exactly what I need.</p>\n<p>That was a cool paragraph, but it must be unpacked.</p>\n<h3>judge a book by its cover</h3>\n<p class=\"tagline noindent\">and its first few pages</p>\n<p>The point of all of this is to say that I'm going back on my decision of moving this site to be dynamic, for a few reasons.</p>\n<h4>1. this is not a dynamic website</h4>\n<p>Let's be real: windingtheropes.tech is not a dynamic website, everything is static. Everything that could be called dynamic can be generated server side, and like mentioned earlier, I can reap the benefits of a more performant static website.</p>\n<h4>2. react is for single page apps</h4>\n<p>I know, there are tons of ways to make multi-page apps with React, and BrowserRouter was one of the features I used. After some finnicky stuff, I used HashRouter, which would append # to the root of every url. That could also be fixed, inside my Nginx server with what looked like a simple solution. But in the end, my website is not a single page app, and isn't very <strong>react</strong>ive. They just go together, and my website has neither.</p>\n<h4>3. came running back to express</h4>\n<p>Of course, I had to use Express to serve this project, so I looked into serving React with express, which in itself isn't very hard, if you get past the router 'problems'.  Next with this was finding tutorials on meta tags, which involved injecting html from express into the built React website. This didn't scare me off, but as I read more, I realized a lot of this is what I'm already doing, or could easily add onto my current code. React is just nice looking boilerplate with a small performance hit. I can make my own solution.</p>\n<h3>call it what you want, I call it a solution</h3>\n<p>I don't need all the features of React, and I already have a few hundred lines of code powering my blog and the rest of the website exactly how I'd like it to be. I can manage formatting/rendering html in custom code, and really, anything can be done in React can be done in javascript, and more tailored at that.</p>\n<p>I'm not creating a web-framework or the next React, but I'd rather take this as more of a learning experience, a bit of a challenge, and this comes with a head start, and the really nice Express framework behind every part.</p>\n<h3></h3>\n<p>In similar terms, I've decided to give my little 'website engine' a name, Cobalt. Maybe it will come to GitHub at a later time.</p>","published":true}